# api_reference/*.rst translations.
# Copyright (C) 2024, Ivan Konovalov
# This file is distributed under the same license as the YaDisk package.
# Ivan Konovalov <ivknv0@gmail.com>, 2024.
#
msgid ""
msgstr ""
"Project-Id-Version: YaDisk 3.1.0\n"
"Report-Msgid-Bugs-To: ivknv0@gmail.com\n"
"POT-Creation-Date: 2025-02-03 19:18+0500\n"
"PO-Revision-Date: 2025-02-03 19:21+0500\n"
"Last-Translator: Ivan Konovalov <ivknv0@gmail.com>\n"
"Language-Team: Russian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../api_reference/async_api.rst:2
msgid "Asynchronous API"
msgstr "Асинхронный API"

#: of yadisk._async_client.AsyncClient:1
msgid "Implements access to Yandex.Disk REST API (provides asynchronous API)."
msgstr "Реализует доступ к REST API Яндекс.Диска (реализует асинхронный API)."

#: of yadisk._async_client.AsyncClient:3
msgid ""
"HTTP client implementation can be specified using the :code:`session` "
"parameter. :any:`AsyncHTTPXSession` is used by default. For other "
"options, see :doc:`/api_reference/sessions`."
msgstr ""
"Реализация HTTP-клиента может быть указана с помощью параметра "
":code:`session`. По умолчанию используется :any:`AsyncHTTPXSession`. см. "
":doc:`/api_reference/sessions` для других списка других доступных "
"вариантов."

#: of yadisk._async_client.AsyncClient:7
msgid ""
"Almost all methods of :any:`AsyncClient` (the ones that accept "
"`**kwargs`) accept some additional arguments:"
msgstr ""
"Почти все методы :any:`AsyncClient` (те, которые принимают `**kwargs`) "
"принимают некоторые дополнительные параметры:"

#: of yadisk._async_client.AsyncClient:10 yadisk._client.Client:10
msgid "**n_retries** - `int`, maximum number of retries for a request"
msgstr "**n_retries** - `int`, максимальное число повторных попыток запроса"

#: of yadisk._async_client.AsyncClient:11 yadisk._client.Client:11
msgid "**retry_interval** - `float`, delay between retries (in seconds)"
msgstr ""
"**retry_interval** - `float`, задержка между повторными попытками (в "
"секундах)"

#: of yadisk._async_client.AsyncClient:12 yadisk._client.Client:12
msgid "**headers** - `dict` or `None`, additional request headers"
msgstr "**headers** - `dict` или `None`, дополнительные заголовки запроса"

#: of yadisk._async_client.AsyncClient:13 yadisk._client.Client:13
msgid ""
"**timeout** - `tuple` (:code:`(<connect timeout>, <read timeout>)`) or "
"`float` (specifies both connect and read timeout), request timeout (in "
"seconds)"
msgstr ""
"**timeout** - `tuple` (:code:`(<connect timeout>, <read timeout>)`) или "
"`float` (указывает одновременно и connect и read timeout), таймаут "
"запроса в секундах"

#: of yadisk._async_client.AsyncClient:17
msgid ""
"Additional parameters, specific to a given HTTP client library can also "
"be passed, see documentation for specific :any:`AsyncSession` subclasses "
"(:doc:`/api_reference/sessions`)."
msgstr ""
"Дополнительные параметры, относящиеся к конкретной HTTP библиотеке могут "
"также быть переданы, см. документацию для конкретных подклассов "
":any:`AsyncSession` (:doc:`/api_reference/sessions`)."

#: of yadisk._async_client.AsyncClient:22
msgid ""
"Do not forget to call :any:`AsyncClient.close` or use the `async with` "
"statement to close all the connections. Otherwise, you may get a warning."
msgstr ""
"Не забывайте вызывать :any:`AsyncClient.close` или используйте `async "
"with`, чтобы закрыть все соединения. Иначе, вы можете получить "
"предупреждение."

#: of yadisk._async_client.AsyncClient:25
msgid ""
"In :any:`Client` this is handled in the destructor, but since "
":any:`AsyncClient.close` is a coroutine function the same cannot be done "
"here, so you have to do it explicitly."
msgstr ""
"В :any:`Client` это делалается в деструкторе, но т.к. "
":any:`AsyncClient.close` - корутина, здесь этого сделать нельзя, поэтому "
"приходится делать это явно."

#: of yadisk._async_client.AsyncClient
#: yadisk._async_client.AsyncClient.check_token
#: yadisk._async_client.AsyncClient.copy
#: yadisk._async_client.AsyncClient.download
#: yadisk._async_client.AsyncClient.download_by_link
#: yadisk._async_client.AsyncClient.download_public
#: yadisk._async_client.AsyncClient.exists
#: yadisk._async_client.AsyncClient.get_all_public_resources
#: yadisk._async_client.AsyncClient.get_auth_url
#: yadisk._async_client.AsyncClient.get_code_url
#: yadisk._async_client.AsyncClient.get_device_code
#: yadisk._async_client.AsyncClient.get_disk_info
#: yadisk._async_client.AsyncClient.get_download_link
#: yadisk._async_client.AsyncClient.get_files
#: yadisk._async_client.AsyncClient.get_last_uploaded
#: yadisk._async_client.AsyncClient.get_meta
#: yadisk._async_client.AsyncClient.get_operation_status
#: yadisk._async_client.AsyncClient.get_public_download_link
#: yadisk._async_client.AsyncClient.get_public_meta
#: yadisk._async_client.AsyncClient.get_public_resources
#: yadisk._async_client.AsyncClient.get_public_type
#: yadisk._async_client.AsyncClient.get_token
#: yadisk._async_client.AsyncClient.get_token_from_device_code
#: yadisk._async_client.AsyncClient.get_trash_meta
#: yadisk._async_client.AsyncClient.get_trash_type
#: yadisk._async_client.AsyncClient.get_type
#: yadisk._async_client.AsyncClient.get_upload_link
#: yadisk._async_client.AsyncClient.get_upload_link_object
#: yadisk._async_client.AsyncClient.is_dir
#: yadisk._async_client.AsyncClient.is_file
#: yadisk._async_client.AsyncClient.is_public_dir
#: yadisk._async_client.AsyncClient.is_public_file
#: yadisk._async_client.AsyncClient.is_trash_dir
#: yadisk._async_client.AsyncClient.is_trash_file
#: yadisk._async_client.AsyncClient.listdir
#: yadisk._async_client.AsyncClient.makedirs
#: yadisk._async_client.AsyncClient.mkdir yadisk._async_client.AsyncClient.move
#: yadisk._async_client.AsyncClient.patch
#: yadisk._async_client.AsyncClient.public_exists
#: yadisk._async_client.AsyncClient.public_listdir
#: yadisk._async_client.AsyncClient.publish
#: yadisk._async_client.AsyncClient.refresh_token
#: yadisk._async_client.AsyncClient.remove
#: yadisk._async_client.AsyncClient.remove_trash
#: yadisk._async_client.AsyncClient.rename
#: yadisk._async_client.AsyncClient.restore_trash
#: yadisk._async_client.AsyncClient.revoke_token
#: yadisk._async_client.AsyncClient.save_to_disk
#: yadisk._async_client.AsyncClient.trash_exists
#: yadisk._async_client.AsyncClient.trash_listdir
#: yadisk._async_client.AsyncClient.unpublish
#: yadisk._async_client.AsyncClient.upload
#: yadisk._async_client.AsyncClient.upload_by_link
#: yadisk._async_client.AsyncClient.upload_url
#: yadisk._async_client.AsyncClient.wait_for_operation
#: yadisk._async_session.AsyncResponse.download
#: yadisk._async_session.AsyncSession.send_request yadisk._client.Client
#: yadisk._client.Client.check_token yadisk._client.Client.copy
#: yadisk._client.Client.download yadisk._client.Client.download_by_link
#: yadisk._client.Client.download_public yadisk._client.Client.exists
#: yadisk._client.Client.get_all_public_resources
#: yadisk._client.Client.get_auth_url yadisk._client.Client.get_code_url
#: yadisk._client.Client.get_device_code yadisk._client.Client.get_disk_info
#: yadisk._client.Client.get_download_link yadisk._client.Client.get_files
#: yadisk._client.Client.get_last_uploaded yadisk._client.Client.get_meta
#: yadisk._client.Client.get_operation_status
#: yadisk._client.Client.get_public_download_link
#: yadisk._client.Client.get_public_meta
#: yadisk._client.Client.get_public_resources
#: yadisk._client.Client.get_public_type yadisk._client.Client.get_token
#: yadisk._client.Client.get_token_from_device_code
#: yadisk._client.Client.get_trash_meta yadisk._client.Client.get_trash_type
#: yadisk._client.Client.get_type yadisk._client.Client.get_upload_link
#: yadisk._client.Client.get_upload_link_object yadisk._client.Client.is_dir
#: yadisk._client.Client.is_file yadisk._client.Client.is_public_dir
#: yadisk._client.Client.is_public_file yadisk._client.Client.is_trash_dir
#: yadisk._client.Client.is_trash_file yadisk._client.Client.listdir
#: yadisk._client.Client.makedirs yadisk._client.Client.mkdir
#: yadisk._client.Client.move yadisk._client.Client.patch
#: yadisk._client.Client.public_exists yadisk._client.Client.public_listdir
#: yadisk._client.Client.publish yadisk._client.Client.refresh_token
#: yadisk._client.Client.remove yadisk._client.Client.remove_trash
#: yadisk._client.Client.rename yadisk._client.Client.restore_trash
#: yadisk._client.Client.revoke_token yadisk._client.Client.save_to_disk
#: yadisk._client.Client.trash_exists yadisk._client.Client.trash_listdir
#: yadisk._client.Client.unpublish yadisk._client.Client.upload
#: yadisk._client.Client.upload_by_link yadisk._client.Client.upload_url
#: yadisk._client.Client.wait_for_operation
#: yadisk._import_session.import_async_session
#: yadisk._import_session.import_session yadisk._session.Response.download
#: yadisk._session.Session.send_request yadisk.exceptions.YaDiskError
#: yadisk.objects._auth.DeviceCodeObject yadisk.objects._auth.TokenObject
#: yadisk.objects._auth.TokenRevokeStatusObject
#: yadisk.objects._disk.DiskInfoObject yadisk.objects._disk.SystemFoldersObject
#: yadisk.objects._disk.UserObject yadisk.objects._disk.UserPublicInfoObject
#: yadisk.objects._error_object.ErrorObject
#: yadisk.objects._link_object.LinkObject
#: yadisk.objects._operations.AsyncOperationLinkObject
#: yadisk.objects._operations.AsyncOperationLinkObject.get_status
#: yadisk.objects._operations.AsyncOperationLinkObject.wait
#: yadisk.objects._operations.OperationLinkObject
#: yadisk.objects._operations.OperationStatusObject
#: yadisk.objects._operations.SyncOperationLinkObject
#: yadisk.objects._operations.SyncOperationLinkObject.get_status
#: yadisk.objects._operations.SyncOperationLinkObject.wait
#: yadisk.objects._resources.AsyncFilesResourceListObject
#: yadisk.objects._resources.AsyncLastUploadedResourceListObject
#: yadisk.objects._resources.AsyncPublicResourceLinkObject
#: yadisk.objects._resources.AsyncPublicResourceListObject
#: yadisk.objects._resources.AsyncPublicResourceObject
#: yadisk.objects._resources.AsyncPublicResourcesListObject
#: yadisk.objects._resources.AsyncResourceLinkObject
#: yadisk.objects._resources.AsyncResourceListObject
#: yadisk.objects._resources.AsyncResourceObject
#: yadisk.objects._resources.AsyncTrashResourceListObject
#: yadisk.objects._resources.AsyncTrashResourceObject
#: yadisk.objects._resources.AsyncTrashResourceObject.exists
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta
#: yadisk.objects._resources.AsyncTrashResourceObject.get_type
#: yadisk.objects._resources.AsyncTrashResourceObject.is_dir
#: yadisk.objects._resources.AsyncTrashResourceObject.is_file
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir
#: yadisk.objects._resources.AsyncTrashResourceObject.remove
#: yadisk.objects._resources.AsyncTrashResourceObject.restore
#: yadisk.objects._resources.CommentIDsObject
#: yadisk.objects._resources.EXIFObject
#: yadisk.objects._resources.FilesResourceListObject
#: yadisk.objects._resources.LastUploadedResourceListObject
#: yadisk.objects._resources.PublicResourceLinkObject
#: yadisk.objects._resources.PublicResourceListObject
#: yadisk.objects._resources.PublicResourceObject
#: yadisk.objects._resources.PublicResourcesListObject
#: yadisk.objects._resources.ResourceDownloadLinkObject
#: yadisk.objects._resources.ResourceLinkObject
#: yadisk.objects._resources.ResourceListObject
#: yadisk.objects._resources.ResourceObject
#: yadisk.objects._resources.ResourceUploadLinkObject
#: yadisk.objects._resources.ShareInfoObject
#: yadisk.objects._resources.SyncFilesResourceListObject
#: yadisk.objects._resources.SyncLastUploadedResourceListObject
#: yadisk.objects._resources.SyncPublicResourceLinkObject
#: yadisk.objects._resources.SyncPublicResourceListObject
#: yadisk.objects._resources.SyncPublicResourceObject
#: yadisk.objects._resources.SyncPublicResourcesListObject
#: yadisk.objects._resources.SyncResourceLinkObject
#: yadisk.objects._resources.SyncResourceListObject
#: yadisk.objects._resources.SyncResourceObject
#: yadisk.objects._resources.SyncTrashResourceListObject
#: yadisk.objects._resources.SyncTrashResourceObject
#: yadisk.objects._resources.SyncTrashResourceObject.exists
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta
#: yadisk.objects._resources.SyncTrashResourceObject.get_type
#: yadisk.objects._resources.SyncTrashResourceObject.is_dir
#: yadisk.objects._resources.SyncTrashResourceObject.is_file
#: yadisk.objects._resources.SyncTrashResourceObject.listdir
#: yadisk.objects._resources.SyncTrashResourceObject.remove
#: yadisk.objects._resources.SyncTrashResourceObject.restore
#: yadisk.objects._resources.TrashResourceListObject
#: yadisk.objects._resources.TrashResourceObject
#: yadisk.objects._yadisk_object.YaDiskObject
#: yadisk.objects._yadisk_object.YaDiskObject.__matmul__
#: yadisk.objects._yadisk_object.YaDiskObject.field
#: yadisk.objects._yadisk_object.YaDiskObject.import_fields
#: yadisk.objects._yadisk_object.YaDiskObject.remove_alias
#: yadisk.objects._yadisk_object.YaDiskObject.remove_field
#: yadisk.objects._yadisk_object.YaDiskObject.set_alias
#: yadisk.objects._yadisk_object.YaDiskObject.set_field_type
#: yadisk.objects._yadisk_object.YaDiskObject.set_field_types
#: yadisk.types.AsyncFileLike.read yadisk.types.AsyncFileLike.seek
#: yadisk.types.AsyncFileLike.write yadisk.types.BinaryAsyncFileLike.read
#: yadisk.types.BinaryAsyncFileLike.seek yadisk.types.BinaryAsyncFileLike.write
#: yadisk.utils.async_auto_retry yadisk.utils.auto_retry
#: yadisk.utils.get_exception
msgid "Parameters"
msgstr "Параметры"

#: of yadisk._async_client.AsyncClient:29 yadisk._client.Client:21
msgid "application ID"
msgstr "идентификатор приложения"

#: of yadisk._async_client.AsyncClient:30 yadisk._client.Client:22
msgid "application secret password"
msgstr "пароль приложения"

#: of yadisk._async_client.AsyncClient:31 yadisk._client.Client:23
msgid "application token"
msgstr "токен"

#: of yadisk._async_client.AsyncClient:32 yadisk._client.Client:24
msgid ""
"`dict` or `None`, default arguments for methods. Can be used to set the "
"default timeout, headers, etc."
msgstr ""
"`dict` или `None`, аргументы по умолчанию для методов. Можно "
"использовать, чтобы задать стандартный таймаут, заголовки и т.д."

#: of yadisk._async_client.AsyncClient:34
msgid ""
"`None`, `str` or an instance of :any:`AsyncSession`. If :code:`session` "
"is a string, the appropriate session class will be imported, it must be "
"one of the following values:    * :code:`\"aiohttp\"` - "
":any:`AIOHTTPSession`   * :code:`\"httpx\"` - :any:`AsyncHTTPXSession`"
msgstr ""
"`None`, `str` или объект :any:`AsyncSession`. Если :code:`session` - "
"строка, то нужный класс будет автоматически импортирован, допустимые "
"значения:    * :code:`\"aiohttp\"` - :any:`AIOHTTPSession`   * "
":code:`\"httpx\"` - :any:`AsyncHTTPXSession`"

#: of yadisk._async_client.AsyncClient:34
msgid ""
"`None`, `str` or an instance of :any:`AsyncSession`. If :code:`session` "
"is a string, the appropriate session class will be imported, it must be "
"one of the following values:"
msgstr ""
"`None`, `str` или объект :any:`AsyncSession`. Если :code:`session` - "
"строка, то нужный класс будет автоматически импортирован, допустимые "
"значения:"

#: of yadisk._async_client.AsyncClient:39
#: yadisk._import_session.import_async_session:7
msgid ":code:`\"aiohttp\"` - :any:`AIOHTTPSession`"
msgstr ":code:`\"aiohttp\"` - :any:`AIOHTTPSession`"

#: of yadisk._async_client.AsyncClient:40
#: yadisk._import_session.import_async_session:8
msgid ":code:`\"httpx\"` - :any:`AsyncHTTPXSession`"
msgstr ":code:`\"httpx\"` - :any:`AsyncHTTPXSession`"

#: of yadisk._async_client.AsyncClient:42
msgid ""
"`None` or an async function that opens a file for reading or writing "
"(:code:`aiofiles.open()` by default)"
msgstr ""
"`None` или асинхронная функция, которая открывает файл для чтения или "
"записи (:code:`aiofiles.open()` по умолчанию)"

#: of yadisk._async_client.AsyncClient:44
msgid ""
"kept for compatibility, callable that returns an instance of "
":any:`AsyncSession`"
msgstr ""
"оставлен для совместимости, функция, возвращающая объект "
":any:`AsyncSession`"

#: of yadisk._async_client.AsyncClient yadisk._async_session.AsyncResponse
#: yadisk._client.Client yadisk._session.Response yadisk.exceptions.YaDiskError
#: yadisk.objects._auth.DeviceCodeObject yadisk.objects._auth.TokenObject
#: yadisk.objects._auth.TokenRevokeStatusObject
#: yadisk.objects._disk.DiskInfoObject yadisk.objects._disk.SystemFoldersObject
#: yadisk.objects._disk.UserObject yadisk.objects._disk.UserPublicInfoObject
#: yadisk.objects._error_object.ErrorObject
#: yadisk.objects._link_object.LinkObject
#: yadisk.objects._operations.AsyncOperationLinkObject
#: yadisk.objects._operations.OperationLinkObject
#: yadisk.objects._operations.OperationStatusObject
#: yadisk.objects._operations.SyncOperationLinkObject
#: yadisk.objects._resources.AsyncFilesResourceListObject
#: yadisk.objects._resources.AsyncLastUploadedResourceListObject
#: yadisk.objects._resources.AsyncPublicResourceLinkObject
#: yadisk.objects._resources.AsyncPublicResourceListObject
#: yadisk.objects._resources.AsyncPublicResourceObject
#: yadisk.objects._resources.AsyncPublicResourcesListObject
#: yadisk.objects._resources.AsyncResourceLinkObject
#: yadisk.objects._resources.AsyncResourceListObject
#: yadisk.objects._resources.AsyncResourceObject
#: yadisk.objects._resources.AsyncTrashResourceListObject
#: yadisk.objects._resources.AsyncTrashResourceObject
#: yadisk.objects._resources.CommentIDsObject
#: yadisk.objects._resources.EXIFObject
#: yadisk.objects._resources.FilesResourceListObject
#: yadisk.objects._resources.LastUploadedResourceListObject
#: yadisk.objects._resources.PublicResourceLinkObject
#: yadisk.objects._resources.PublicResourceListObject
#: yadisk.objects._resources.PublicResourceObject
#: yadisk.objects._resources.PublicResourcesListObject
#: yadisk.objects._resources.ResourceDownloadLinkObject
#: yadisk.objects._resources.ResourceLinkObject
#: yadisk.objects._resources.ResourceListObject
#: yadisk.objects._resources.ResourceObject
#: yadisk.objects._resources.ResourceUploadLinkObject
#: yadisk.objects._resources.ShareInfoObject
#: yadisk.objects._resources.SyncFilesResourceListObject
#: yadisk.objects._resources.SyncLastUploadedResourceListObject
#: yadisk.objects._resources.SyncPublicResourceLinkObject
#: yadisk.objects._resources.SyncPublicResourceListObject
#: yadisk.objects._resources.SyncPublicResourceObject
#: yadisk.objects._resources.SyncPublicResourcesListObject
#: yadisk.objects._resources.SyncResourceLinkObject
#: yadisk.objects._resources.SyncResourceListObject
#: yadisk.objects._resources.SyncResourceObject
#: yadisk.objects._resources.SyncTrashResourceListObject
#: yadisk.objects._resources.SyncTrashResourceObject
#: yadisk.objects._resources.TrashResourceListObject
#: yadisk.objects._resources.TrashResourceObject
#: yadisk.sessions.aiohttp_session.AIOHTTPSession
#: yadisk.sessions.async_httpx_session.AsyncHTTPXSession
#: yadisk.sessions.httpx_session.HTTPXSession
#: yadisk.sessions.requests_session.RequestsSession
msgid "Variables"
msgstr "Атрибуты"

#: of yadisk._async_client.AsyncClient:47 yadisk._client.Client:40
msgid "`str`, application ID"
msgstr "`str`, идентификатор приложения"

#: of yadisk._async_client.AsyncClient:48 yadisk._client.Client:41
msgid "`str`, application secret password"
msgstr "`str`, пароль приложения"

#: of yadisk._async_client.AsyncClient:49 yadisk._client.Client:42
msgid "`str`, application token"
msgstr "`str`, токен"

#: of yadisk._async_client.AsyncClient:50 yadisk._client.Client:43
msgid ""
"`dict`, default arguments for methods. Can be used to set the default "
"timeout, headers, etc."
msgstr ""
"`dict`, аргументы по умолчанию для методов. Можно использовать, чтобы "
"задать стандартный таймаут, заголовки и т.д."

#: of yadisk._async_client.AsyncClient:52
msgid "current session (:any:`AsyncSession` instance)"
msgstr "текущая сессия (объект :any:`AsyncSession`)"

#: of yadisk._async_client.AsyncClient:53
msgid ""
"async function that opens a file for reading or writing "
"(:code:`aiofiles.open()` by default)"
msgstr ""
"асинхронная функция, которая открывает файл для чтения или записи "
"(:code:`aiofiles.open()` по умолчанию)"

#: of yadisk._async_client.AsyncClient:56 yadisk._client.Client:49
msgid "The following exceptions may be raised by most API requests:"
msgstr "Большинство запросов к API могут вызвать следующие исключения:"

#: of yadisk._async_client.AsyncClient yadisk._async_client.AsyncClient.copy
#: yadisk._async_client.AsyncClient.download
#: yadisk._async_client.AsyncClient.download_public
#: yadisk._async_client.AsyncClient.exists
#: yadisk._async_client.AsyncClient.get_all_public_resources
#: yadisk._async_client.AsyncClient.get_auth_url
#: yadisk._async_client.AsyncClient.get_code_url
#: yadisk._async_client.AsyncClient.get_device_code
#: yadisk._async_client.AsyncClient.get_disk_info
#: yadisk._async_client.AsyncClient.get_download_link
#: yadisk._async_client.AsyncClient.get_files
#: yadisk._async_client.AsyncClient.get_last_uploaded
#: yadisk._async_client.AsyncClient.get_meta
#: yadisk._async_client.AsyncClient.get_operation_status
#: yadisk._async_client.AsyncClient.get_public_download_link
#: yadisk._async_client.AsyncClient.get_public_meta
#: yadisk._async_client.AsyncClient.get_public_resources
#: yadisk._async_client.AsyncClient.get_public_type
#: yadisk._async_client.AsyncClient.get_token
#: yadisk._async_client.AsyncClient.get_token_from_device_code
#: yadisk._async_client.AsyncClient.get_trash_meta
#: yadisk._async_client.AsyncClient.get_trash_type
#: yadisk._async_client.AsyncClient.get_type
#: yadisk._async_client.AsyncClient.get_upload_link
#: yadisk._async_client.AsyncClient.get_upload_link_object
#: yadisk._async_client.AsyncClient.is_dir
#: yadisk._async_client.AsyncClient.is_file
#: yadisk._async_client.AsyncClient.is_public_dir
#: yadisk._async_client.AsyncClient.is_public_file
#: yadisk._async_client.AsyncClient.is_trash_dir
#: yadisk._async_client.AsyncClient.is_trash_file
#: yadisk._async_client.AsyncClient.listdir
#: yadisk._async_client.AsyncClient.makedirs
#: yadisk._async_client.AsyncClient.mkdir yadisk._async_client.AsyncClient.move
#: yadisk._async_client.AsyncClient.patch
#: yadisk._async_client.AsyncClient.public_exists
#: yadisk._async_client.AsyncClient.public_listdir
#: yadisk._async_client.AsyncClient.publish
#: yadisk._async_client.AsyncClient.refresh_token
#: yadisk._async_client.AsyncClient.remove
#: yadisk._async_client.AsyncClient.remove_trash
#: yadisk._async_client.AsyncClient.rename
#: yadisk._async_client.AsyncClient.restore_trash
#: yadisk._async_client.AsyncClient.revoke_token
#: yadisk._async_client.AsyncClient.save_to_disk
#: yadisk._async_client.AsyncClient.trash_exists
#: yadisk._async_client.AsyncClient.trash_listdir
#: yadisk._async_client.AsyncClient.unpublish
#: yadisk._async_client.AsyncClient.upload
#: yadisk._async_client.AsyncClient.upload_by_link
#: yadisk._async_client.AsyncClient.upload_url
#: yadisk._async_client.AsyncClient.wait_for_operation
#: yadisk._async_session.AsyncResponse.download
#: yadisk._async_session.AsyncResponse.json yadisk._client.Client
#: yadisk._client.Client.copy yadisk._client.Client.download
#: yadisk._client.Client.download_public yadisk._client.Client.exists
#: yadisk._client.Client.get_all_public_resources
#: yadisk._client.Client.get_auth_url yadisk._client.Client.get_code_url
#: yadisk._client.Client.get_device_code yadisk._client.Client.get_disk_info
#: yadisk._client.Client.get_download_link yadisk._client.Client.get_files
#: yadisk._client.Client.get_last_uploaded yadisk._client.Client.get_meta
#: yadisk._client.Client.get_operation_status
#: yadisk._client.Client.get_public_download_link
#: yadisk._client.Client.get_public_meta
#: yadisk._client.Client.get_public_resources
#: yadisk._client.Client.get_public_type yadisk._client.Client.get_token
#: yadisk._client.Client.get_token_from_device_code
#: yadisk._client.Client.get_trash_meta yadisk._client.Client.get_trash_type
#: yadisk._client.Client.get_type yadisk._client.Client.get_upload_link
#: yadisk._client.Client.get_upload_link_object yadisk._client.Client.is_dir
#: yadisk._client.Client.is_file yadisk._client.Client.is_public_dir
#: yadisk._client.Client.is_public_file yadisk._client.Client.is_trash_dir
#: yadisk._client.Client.is_trash_file yadisk._client.Client.listdir
#: yadisk._client.Client.makedirs yadisk._client.Client.mkdir
#: yadisk._client.Client.move yadisk._client.Client.patch
#: yadisk._client.Client.public_exists yadisk._client.Client.public_listdir
#: yadisk._client.Client.publish yadisk._client.Client.refresh_token
#: yadisk._client.Client.remove yadisk._client.Client.remove_trash
#: yadisk._client.Client.rename yadisk._client.Client.restore_trash
#: yadisk._client.Client.revoke_token yadisk._client.Client.save_to_disk
#: yadisk._client.Client.trash_exists yadisk._client.Client.trash_listdir
#: yadisk._client.Client.unpublish yadisk._client.Client.upload
#: yadisk._client.Client.upload_by_link yadisk._client.Client.upload_url
#: yadisk._client.Client.wait_for_operation
#: yadisk._import_session.import_async_session
#: yadisk._import_session.import_session yadisk._session.Response.download
#: yadisk._session.Response.json
#: yadisk.objects._operations.AsyncOperationLinkObject.get_status
#: yadisk.objects._operations.AsyncOperationLinkObject.wait
#: yadisk.objects._operations.SyncOperationLinkObject.get_status
#: yadisk.objects._operations.SyncOperationLinkObject.wait
#: yadisk.objects._resources.AsyncTrashResourceObject.exists
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta
#: yadisk.objects._resources.AsyncTrashResourceObject.get_type
#: yadisk.objects._resources.AsyncTrashResourceObject.is_dir
#: yadisk.objects._resources.AsyncTrashResourceObject.is_file
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir
#: yadisk.objects._resources.AsyncTrashResourceObject.remove
#: yadisk.objects._resources.AsyncTrashResourceObject.restore
#: yadisk.objects._resources.SyncTrashResourceObject.exists
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta
#: yadisk.objects._resources.SyncTrashResourceObject.get_type
#: yadisk.objects._resources.SyncTrashResourceObject.is_dir
#: yadisk.objects._resources.SyncTrashResourceObject.is_file
#: yadisk.objects._resources.SyncTrashResourceObject.listdir
#: yadisk.objects._resources.SyncTrashResourceObject.remove
#: yadisk.objects._resources.SyncTrashResourceObject.restore
#: yadisk.objects._yadisk_object.YaDiskObject.__matmul__
#: yadisk.objects._yadisk_object.YaDiskObject.field
msgid "Raises"
msgstr "Вызывает"

#: of yadisk._async_client.AsyncClient:58 yadisk._client.Client:51
msgid "HTTP client raised an exception while making a request"
msgstr "HTTP-клиент вызвал исключение во время отправления запроса"

#: of yadisk._async_client.AsyncClient:59 yadisk._client.Client:52
msgid "server returned HTTP code 400"
msgstr "сервер вернул код 400."

#: of yadisk._async_client.AsyncClient:60 yadisk._client.Client:53
msgid "request contains fields with invalid data"
msgstr "запрос содежит поля с некорректными данными."

#: of yadisk._async_client.AsyncClient:61 yadisk._client.Client:54
msgid "server returned HTTP code 401"
msgstr "сервер вернул код 401."

#: of yadisk._async_client.AsyncClient:62 yadisk._client.Client:55
msgid "server returned HTTP code 403"
msgstr "сервер вернул код 403."

#: of yadisk._async_client.AsyncClient:63 yadisk._client.Client:56
msgid "server returned HTTP code 406"
msgstr "сервер вернул код 406."

#: of yadisk._async_client.AsyncClient:64 yadisk._client.Client:57
msgid "server returned HTTP code 409"
msgstr "сервер вернул код 409."

#: of yadisk._async_client.AsyncClient:65 yadisk._client.Client:58
msgid "server returned code 413"
msgstr "сервер вернул код 413."

#: of yadisk._async_client.AsyncClient:66 yadisk._client.Client:59
msgid "server returned HTTP code 415"
msgstr "сервер вернул код 415."

#: of yadisk._async_client.AsyncClient:67 yadisk._client.Client:60
msgid "server returned HTTP code 423"
msgstr "сервер вернул код 423."

#: of yadisk._async_client.AsyncClient:68 yadisk._client.Client:61
msgid "server returned HTTP code 429"
msgstr "сервер вернул код 429."

#: of yadisk._async_client.AsyncClient:69 yadisk._client.Client:62
msgid "server returned HTTP code 500"
msgstr "сервер вернул код 500."

#: of yadisk._async_client.AsyncClient:70 yadisk._client.Client:63
msgid "server returned HTTP code 502"
msgstr "сервер вернул код 502."

#: of yadisk._async_client.AsyncClient:71 yadisk._client.Client:64
msgid "server returned HTTP code 503"
msgstr "сервер вернул код 503."

#: of yadisk._async_client.AsyncClient:72 yadisk._client.Client:65
msgid "server returned HTTP code 504"
msgstr "сервер вернул код 504."

#: of yadisk._async_client.AsyncClient:73 yadisk._client.Client:66
msgid "server returned HTTP code 509"
msgstr "сервер вернул код 509."

#: of yadisk._async_client.AsyncClient:74 yadisk._client.Client:67
msgid "other unknown error"
msgstr "другая неизвестная ошибка"

#: of yadisk._async_client.AsyncClient.check_token:1
#: yadisk._client.Client.check_token:1
msgid "Check whether the token is valid."
msgstr "Проверяет, действителен ли токен."

#: of yadisk._async_client.AsyncClient.check_token:3
#: yadisk._client.Client.check_token:3
msgid "token to check, equivalent to `self.token` if `None`"
msgstr "токен, подлежащий проверке, то же самое, что `self.token` при `None`"

#: of yadisk._async_client.AsyncClient.check_token:4
#: yadisk._async_client.AsyncClient.copy:15
#: yadisk._async_client.AsyncClient.download:5
#: yadisk._async_client.AsyncClient.download_by_link:5
#: yadisk._async_client.AsyncClient.download_public:6
#: yadisk._async_client.AsyncClient.exists:4
#: yadisk._async_client.AsyncClient.get_device_code:12
#: yadisk._async_client.AsyncClient.get_disk_info:4
#: yadisk._async_client.AsyncClient.get_download_link:4
#: yadisk._async_client.AsyncClient.get_files:11
#: yadisk._async_client.AsyncClient.get_last_uploaded:8
#: yadisk._async_client.AsyncClient.get_meta:10
#: yadisk._async_client.AsyncClient.get_operation_status:4
#: yadisk._async_client.AsyncClient.get_public_download_link:5
#: yadisk._async_client.AsyncClient.get_public_meta:13
#: yadisk._async_client.AsyncClient.get_public_resources:9
#: yadisk._async_client.AsyncClient.get_public_type:5
#: yadisk._async_client.AsyncClient.get_token:6
#: yadisk._async_client.AsyncClient.get_trash_meta:10
#: yadisk._async_client.AsyncClient.get_trash_type:4
#: yadisk._async_client.AsyncClient.get_type:4
#: yadisk._async_client.AsyncClient.get_upload_link:5
#: yadisk._async_client.AsyncClient.is_dir:4
#: yadisk._async_client.AsyncClient.is_file:4
#: yadisk._async_client.AsyncClient.is_public_dir:5
#: yadisk._async_client.AsyncClient.is_public_file:5
#: yadisk._async_client.AsyncClient.is_trash_dir:4
#: yadisk._async_client.AsyncClient.is_trash_file:4
#: yadisk._async_client.AsyncClient.listdir:10
#: yadisk._async_client.AsyncClient.makedirs:6
#: yadisk._async_client.AsyncClient.mkdir:5
#: yadisk._async_client.AsyncClient.move:12
#: yadisk._async_client.AsyncClient.patch:6
#: yadisk._async_client.AsyncClient.public_exists:5
#: yadisk._async_client.AsyncClient.public_listdir:13
#: yadisk._async_client.AsyncClient.publish:5
#: yadisk._async_client.AsyncClient.refresh_token:4
#: yadisk._async_client.AsyncClient.remove:13
#: yadisk._async_client.AsyncClient.remove_trash:10
#: yadisk._async_client.AsyncClient.rename:13
#: yadisk._async_client.AsyncClient.restore_trash:13
#: yadisk._async_client.AsyncClient.revoke_token:4
#: yadisk._async_client.AsyncClient.save_to_disk:15
#: yadisk._async_client.AsyncClient.trash_exists:4
#: yadisk._async_client.AsyncClient.trash_listdir:10
#: yadisk._async_client.AsyncClient.unpublish:5
#: yadisk._async_client.AsyncClient.upload:7
#: yadisk._async_client.AsyncClient.upload_by_link:7
#: yadisk._async_client.AsyncClient.upload_url:11
msgid "`float`, `tuple` or `None`, request timeout"
msgstr "`float`, `tuple` или `None`, таймаут запроса"

#: of yadisk._async_client.AsyncClient.check_token:5
#: yadisk._async_client.AsyncClient.copy:16
#: yadisk._async_client.AsyncClient.download:6
#: yadisk._async_client.AsyncClient.download_by_link:6
#: yadisk._async_client.AsyncClient.download_public:7
#: yadisk._async_client.AsyncClient.exists:5
#: yadisk._async_client.AsyncClient.get_all_public_resources:11
#: yadisk._async_client.AsyncClient.get_device_code:13
#: yadisk._async_client.AsyncClient.get_disk_info:5
#: yadisk._async_client.AsyncClient.get_download_link:5
#: yadisk._async_client.AsyncClient.get_files:12
#: yadisk._async_client.AsyncClient.get_last_uploaded:9
#: yadisk._async_client.AsyncClient.get_meta:11
#: yadisk._async_client.AsyncClient.get_operation_status:5
#: yadisk._async_client.AsyncClient.get_public_download_link:6
#: yadisk._async_client.AsyncClient.get_public_meta:14
#: yadisk._async_client.AsyncClient.get_public_resources:10
#: yadisk._async_client.AsyncClient.get_public_type:6
#: yadisk._async_client.AsyncClient.get_token:7
#: yadisk._async_client.AsyncClient.get_token_from_device_code:8
#: yadisk._async_client.AsyncClient.get_trash_meta:11
#: yadisk._async_client.AsyncClient.get_trash_type:5
#: yadisk._async_client.AsyncClient.get_type:5
#: yadisk._async_client.AsyncClient.get_upload_link:6
#: yadisk._async_client.AsyncClient.get_upload_link_object:10
#: yadisk._async_client.AsyncClient.is_dir:5
#: yadisk._async_client.AsyncClient.is_file:5
#: yadisk._async_client.AsyncClient.is_public_dir:6
#: yadisk._async_client.AsyncClient.is_public_file:6
#: yadisk._async_client.AsyncClient.is_trash_dir:5
#: yadisk._async_client.AsyncClient.is_trash_file:5
#: yadisk._async_client.AsyncClient.listdir:11
#: yadisk._async_client.AsyncClient.makedirs:7
#: yadisk._async_client.AsyncClient.mkdir:6
#: yadisk._async_client.AsyncClient.move:13
#: yadisk._async_client.AsyncClient.patch:7
#: yadisk._async_client.AsyncClient.public_exists:6
#: yadisk._async_client.AsyncClient.public_listdir:14
#: yadisk._async_client.AsyncClient.publish:6
#: yadisk._async_client.AsyncClient.refresh_token:5
#: yadisk._async_client.AsyncClient.remove:14
#: yadisk._async_client.AsyncClient.remove_trash:11
#: yadisk._async_client.AsyncClient.rename:14
#: yadisk._async_client.AsyncClient.restore_trash:14
#: yadisk._async_client.AsyncClient.revoke_token:5
#: yadisk._async_client.AsyncClient.save_to_disk:16
#: yadisk._async_client.AsyncClient.trash_exists:5
#: yadisk._async_client.AsyncClient.trash_listdir:11
#: yadisk._async_client.AsyncClient.unpublish:6
#: yadisk._async_client.AsyncClient.upload:8
#: yadisk._async_client.AsyncClient.upload_by_link:8
#: yadisk._async_client.AsyncClient.upload_url:12
#: yadisk._async_client.AsyncClient.wait_for_operation:9
#: yadisk._client.Client.check_token:5 yadisk._client.Client.copy:16
#: yadisk._client.Client.download:6 yadisk._client.Client.download_by_link:6
#: yadisk._client.Client.download_public:7 yadisk._client.Client.exists:5
#: yadisk._client.Client.get_all_public_resources:11
#: yadisk._client.Client.get_device_code:12
#: yadisk._client.Client.get_disk_info:5
#: yadisk._client.Client.get_download_link:5 yadisk._client.Client.get_files:12
#: yadisk._client.Client.get_last_uploaded:9 yadisk._client.Client.get_meta:11
#: yadisk._client.Client.get_operation_status:5
#: yadisk._client.Client.get_public_download_link:6
#: yadisk._client.Client.get_public_meta:14
#: yadisk._client.Client.get_public_resources:10
#: yadisk._client.Client.get_public_type:6 yadisk._client.Client.get_token:8
#: yadisk._client.Client.get_token_from_device_code:7
#: yadisk._client.Client.get_trash_meta:11
#: yadisk._client.Client.get_trash_type:5 yadisk._client.Client.get_type:5
#: yadisk._client.Client.get_upload_link:6
#: yadisk._client.Client.get_upload_link_object:10
#: yadisk._client.Client.is_dir:5 yadisk._client.Client.is_file:5
#: yadisk._client.Client.is_public_dir:6 yadisk._client.Client.is_public_file:6
#: yadisk._client.Client.is_trash_dir:5 yadisk._client.Client.is_trash_file:5
#: yadisk._client.Client.listdir:11 yadisk._client.Client.makedirs:7
#: yadisk._client.Client.mkdir:6 yadisk._client.Client.move:13
#: yadisk._client.Client.patch:7 yadisk._client.Client.public_exists:6
#: yadisk._client.Client.public_listdir:14 yadisk._client.Client.publish:6
#: yadisk._client.Client.refresh_token:5 yadisk._client.Client.remove:14
#: yadisk._client.Client.remove_trash:11 yadisk._client.Client.rename:14
#: yadisk._client.Client.restore_trash:14 yadisk._client.Client.revoke_token:5
#: yadisk._client.Client.save_to_disk:16 yadisk._client.Client.trash_exists:5
#: yadisk._client.Client.trash_listdir:11 yadisk._client.Client.unpublish:6
#: yadisk._client.Client.upload:9 yadisk._client.Client.upload_by_link:9
#: yadisk._client.Client.upload_url:12
#: yadisk._client.Client.wait_for_operation:9
#: yadisk.objects._operations.AsyncOperationLinkObject.get_status:4
#: yadisk.objects._operations.AsyncOperationLinkObject.wait:8
#: yadisk.objects._operations.SyncOperationLinkObject.get_status:4
#: yadisk.objects._operations.SyncOperationLinkObject.wait:8
#: yadisk.objects._resources.AsyncTrashResourceObject.exists:5
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:11
#: yadisk.objects._resources.AsyncTrashResourceObject.get_type:5
#: yadisk.objects._resources.AsyncTrashResourceObject.is_dir:5
#: yadisk.objects._resources.AsyncTrashResourceObject.is_file:5
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir:11
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:11
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:19
#: yadisk.objects._resources.SyncTrashResourceObject.exists:5
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:11
#: yadisk.objects._resources.SyncTrashResourceObject.get_type:5
#: yadisk.objects._resources.SyncTrashResourceObject.is_dir:5
#: yadisk.objects._resources.SyncTrashResourceObject.is_file:5
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:11
#: yadisk.objects._resources.SyncTrashResourceObject.remove:11
#: yadisk.objects._resources.SyncTrashResourceObject.restore:19
msgid "`dict` or `None`, additional request headers"
msgstr "`dict` или `None`, дополнительные заголовки запроса"

#: of yadisk._async_client.AsyncClient.check_token:6
#: yadisk._async_client.AsyncClient.copy:17
#: yadisk._async_client.AsyncClient.download:7
#: yadisk._async_client.AsyncClient.download_by_link:7
#: yadisk._async_client.AsyncClient.download_public:8
#: yadisk._async_client.AsyncClient.exists:6
#: yadisk._async_client.AsyncClient.get_all_public_resources:12
#: yadisk._async_client.AsyncClient.get_device_code:14
#: yadisk._async_client.AsyncClient.get_disk_info:6
#: yadisk._async_client.AsyncClient.get_download_link:6
#: yadisk._async_client.AsyncClient.get_files:13
#: yadisk._async_client.AsyncClient.get_last_uploaded:10
#: yadisk._async_client.AsyncClient.get_meta:12
#: yadisk._async_client.AsyncClient.get_operation_status:6
#: yadisk._async_client.AsyncClient.get_public_download_link:7
#: yadisk._async_client.AsyncClient.get_public_meta:15
#: yadisk._async_client.AsyncClient.get_public_resources:11
#: yadisk._async_client.AsyncClient.get_public_type:7
#: yadisk._async_client.AsyncClient.get_token:8
#: yadisk._async_client.AsyncClient.get_token_from_device_code:9
#: yadisk._async_client.AsyncClient.get_trash_meta:12
#: yadisk._async_client.AsyncClient.get_trash_type:6
#: yadisk._async_client.AsyncClient.get_type:6
#: yadisk._async_client.AsyncClient.get_upload_link:7
#: yadisk._async_client.AsyncClient.get_upload_link_object:11
#: yadisk._async_client.AsyncClient.is_dir:6
#: yadisk._async_client.AsyncClient.is_file:6
#: yadisk._async_client.AsyncClient.is_public_dir:7
#: yadisk._async_client.AsyncClient.is_public_file:7
#: yadisk._async_client.AsyncClient.is_trash_dir:6
#: yadisk._async_client.AsyncClient.is_trash_file:6
#: yadisk._async_client.AsyncClient.listdir:12
#: yadisk._async_client.AsyncClient.makedirs:8
#: yadisk._async_client.AsyncClient.mkdir:7
#: yadisk._async_client.AsyncClient.move:14
#: yadisk._async_client.AsyncClient.patch:8
#: yadisk._async_client.AsyncClient.public_exists:7
#: yadisk._async_client.AsyncClient.public_listdir:15
#: yadisk._async_client.AsyncClient.publish:7
#: yadisk._async_client.AsyncClient.refresh_token:6
#: yadisk._async_client.AsyncClient.remove:15
#: yadisk._async_client.AsyncClient.remove_trash:12
#: yadisk._async_client.AsyncClient.rename:15
#: yadisk._async_client.AsyncClient.restore_trash:15
#: yadisk._async_client.AsyncClient.revoke_token:6
#: yadisk._async_client.AsyncClient.save_to_disk:17
#: yadisk._async_client.AsyncClient.trash_exists:6
#: yadisk._async_client.AsyncClient.trash_listdir:12
#: yadisk._async_client.AsyncClient.unpublish:7
#: yadisk._async_client.AsyncClient.upload:9
#: yadisk._async_client.AsyncClient.upload_by_link:9
#: yadisk._async_client.AsyncClient.upload_url:13
#: yadisk._async_client.AsyncClient.wait_for_operation:10
#: yadisk._client.Client.check_token:6 yadisk._client.Client.copy:17
#: yadisk._client.Client.download:7 yadisk._client.Client.download_by_link:7
#: yadisk._client.Client.download_public:8 yadisk._client.Client.exists:6
#: yadisk._client.Client.get_all_public_resources:12
#: yadisk._client.Client.get_device_code:13
#: yadisk._client.Client.get_disk_info:6
#: yadisk._client.Client.get_download_link:6 yadisk._client.Client.get_files:13
#: yadisk._client.Client.get_last_uploaded:10 yadisk._client.Client.get_meta:12
#: yadisk._client.Client.get_operation_status:6
#: yadisk._client.Client.get_public_download_link:7
#: yadisk._client.Client.get_public_meta:15
#: yadisk._client.Client.get_public_resources:11
#: yadisk._client.Client.get_public_type:7 yadisk._client.Client.get_token:9
#: yadisk._client.Client.get_token_from_device_code:8
#: yadisk._client.Client.get_trash_meta:12
#: yadisk._client.Client.get_trash_type:6 yadisk._client.Client.get_type:6
#: yadisk._client.Client.get_upload_link:7
#: yadisk._client.Client.get_upload_link_object:11
#: yadisk._client.Client.is_dir:6 yadisk._client.Client.is_file:6
#: yadisk._client.Client.is_public_dir:7 yadisk._client.Client.is_public_file:7
#: yadisk._client.Client.is_trash_dir:6 yadisk._client.Client.is_trash_file:6
#: yadisk._client.Client.listdir:12 yadisk._client.Client.makedirs:8
#: yadisk._client.Client.mkdir:7 yadisk._client.Client.move:14
#: yadisk._client.Client.patch:8 yadisk._client.Client.public_exists:7
#: yadisk._client.Client.public_listdir:15 yadisk._client.Client.publish:7
#: yadisk._client.Client.refresh_token:6 yadisk._client.Client.remove:15
#: yadisk._client.Client.remove_trash:12 yadisk._client.Client.rename:15
#: yadisk._client.Client.restore_trash:15 yadisk._client.Client.revoke_token:6
#: yadisk._client.Client.save_to_disk:17 yadisk._client.Client.trash_exists:6
#: yadisk._client.Client.trash_listdir:12 yadisk._client.Client.unpublish:7
#: yadisk._client.Client.upload:10 yadisk._client.Client.upload_by_link:10
#: yadisk._client.Client.upload_url:13
#: yadisk._client.Client.wait_for_operation:10
#: yadisk.objects._operations.AsyncOperationLinkObject.get_status:5
#: yadisk.objects._operations.AsyncOperationLinkObject.wait:9
#: yadisk.objects._operations.SyncOperationLinkObject.get_status:5
#: yadisk.objects._operations.SyncOperationLinkObject.wait:9
#: yadisk.objects._resources.AsyncTrashResourceObject.exists:6
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:12
#: yadisk.objects._resources.AsyncTrashResourceObject.get_type:6
#: yadisk.objects._resources.AsyncTrashResourceObject.is_dir:6
#: yadisk.objects._resources.AsyncTrashResourceObject.is_file:6
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir:12
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:12
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:20
#: yadisk.objects._resources.SyncTrashResourceObject.exists:6
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:12
#: yadisk.objects._resources.SyncTrashResourceObject.get_type:6
#: yadisk.objects._resources.SyncTrashResourceObject.is_dir:6
#: yadisk.objects._resources.SyncTrashResourceObject.is_file:6
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:12
#: yadisk.objects._resources.SyncTrashResourceObject.remove:12
#: yadisk.objects._resources.SyncTrashResourceObject.restore:20
#: yadisk.utils.async_auto_retry:6 yadisk.utils.auto_retry:6
msgid "`int`, maximum number of retries"
msgstr "`int`, максимальное число повторных попыток запроса"

#: of yadisk._async_client.AsyncClient.check_token:7
#: yadisk._async_client.AsyncClient.copy:18
#: yadisk._async_client.AsyncClient.download:8
#: yadisk._async_client.AsyncClient.download_by_link:8
#: yadisk._async_client.AsyncClient.download_public:9
#: yadisk._async_client.AsyncClient.exists:7
#: yadisk._async_client.AsyncClient.get_all_public_resources:13
#: yadisk._async_client.AsyncClient.get_device_code:15
#: yadisk._async_client.AsyncClient.get_disk_info:7
#: yadisk._async_client.AsyncClient.get_download_link:7
#: yadisk._async_client.AsyncClient.get_files:14
#: yadisk._async_client.AsyncClient.get_last_uploaded:11
#: yadisk._async_client.AsyncClient.get_meta:13
#: yadisk._async_client.AsyncClient.get_operation_status:7
#: yadisk._async_client.AsyncClient.get_public_download_link:8
#: yadisk._async_client.AsyncClient.get_public_meta:16
#: yadisk._async_client.AsyncClient.get_public_resources:12
#: yadisk._async_client.AsyncClient.get_public_type:8
#: yadisk._async_client.AsyncClient.get_token:9
#: yadisk._async_client.AsyncClient.get_token_from_device_code:10
#: yadisk._async_client.AsyncClient.get_trash_meta:13
#: yadisk._async_client.AsyncClient.get_trash_type:7
#: yadisk._async_client.AsyncClient.get_type:7
#: yadisk._async_client.AsyncClient.get_upload_link:8
#: yadisk._async_client.AsyncClient.get_upload_link_object:12
#: yadisk._async_client.AsyncClient.is_dir:7
#: yadisk._async_client.AsyncClient.is_file:7
#: yadisk._async_client.AsyncClient.is_public_dir:8
#: yadisk._async_client.AsyncClient.is_public_file:8
#: yadisk._async_client.AsyncClient.is_trash_dir:7
#: yadisk._async_client.AsyncClient.is_trash_file:7
#: yadisk._async_client.AsyncClient.listdir:13
#: yadisk._async_client.AsyncClient.makedirs:9
#: yadisk._async_client.AsyncClient.mkdir:8
#: yadisk._async_client.AsyncClient.move:15
#: yadisk._async_client.AsyncClient.patch:9
#: yadisk._async_client.AsyncClient.public_exists:8
#: yadisk._async_client.AsyncClient.public_listdir:16
#: yadisk._async_client.AsyncClient.publish:8
#: yadisk._async_client.AsyncClient.refresh_token:7
#: yadisk._async_client.AsyncClient.remove:16
#: yadisk._async_client.AsyncClient.remove_trash:13
#: yadisk._async_client.AsyncClient.rename:16
#: yadisk._async_client.AsyncClient.restore_trash:16
#: yadisk._async_client.AsyncClient.revoke_token:7
#: yadisk._async_client.AsyncClient.save_to_disk:18
#: yadisk._async_client.AsyncClient.trash_exists:7
#: yadisk._async_client.AsyncClient.trash_listdir:13
#: yadisk._async_client.AsyncClient.unpublish:8
#: yadisk._async_client.AsyncClient.upload:10
#: yadisk._async_client.AsyncClient.upload_by_link:10
#: yadisk._async_client.AsyncClient.upload_url:14
#: yadisk._async_client.AsyncClient.wait_for_operation:11
#: yadisk._client.Client.check_token:7 yadisk._client.Client.copy:18
#: yadisk._client.Client.download:8 yadisk._client.Client.download_by_link:8
#: yadisk._client.Client.download_public:9 yadisk._client.Client.exists:7
#: yadisk._client.Client.get_all_public_resources:13
#: yadisk._client.Client.get_device_code:14
#: yadisk._client.Client.get_disk_info:7
#: yadisk._client.Client.get_download_link:7 yadisk._client.Client.get_files:14
#: yadisk._client.Client.get_last_uploaded:11 yadisk._client.Client.get_meta:13
#: yadisk._client.Client.get_operation_status:7
#: yadisk._client.Client.get_public_download_link:8
#: yadisk._client.Client.get_public_meta:16
#: yadisk._client.Client.get_public_resources:12
#: yadisk._client.Client.get_public_type:8 yadisk._client.Client.get_token:10
#: yadisk._client.Client.get_token_from_device_code:9
#: yadisk._client.Client.get_trash_meta:13
#: yadisk._client.Client.get_trash_type:7 yadisk._client.Client.get_type:7
#: yadisk._client.Client.get_upload_link:8
#: yadisk._client.Client.get_upload_link_object:12
#: yadisk._client.Client.is_dir:7 yadisk._client.Client.is_file:7
#: yadisk._client.Client.is_public_dir:8 yadisk._client.Client.is_public_file:8
#: yadisk._client.Client.is_trash_dir:7 yadisk._client.Client.is_trash_file:7
#: yadisk._client.Client.listdir:13 yadisk._client.Client.makedirs:9
#: yadisk._client.Client.mkdir:8 yadisk._client.Client.move:15
#: yadisk._client.Client.patch:9 yadisk._client.Client.public_exists:8
#: yadisk._client.Client.public_listdir:16 yadisk._client.Client.publish:8
#: yadisk._client.Client.refresh_token:7 yadisk._client.Client.remove:16
#: yadisk._client.Client.remove_trash:13 yadisk._client.Client.rename:16
#: yadisk._client.Client.restore_trash:16 yadisk._client.Client.revoke_token:7
#: yadisk._client.Client.save_to_disk:18 yadisk._client.Client.trash_exists:7
#: yadisk._client.Client.trash_listdir:13 yadisk._client.Client.unpublish:8
#: yadisk._client.Client.upload:11 yadisk._client.Client.upload_by_link:11
#: yadisk._client.Client.upload_url:14
#: yadisk._client.Client.wait_for_operation:11
#: yadisk.objects._operations.AsyncOperationLinkObject.get_status:6
#: yadisk.objects._operations.AsyncOperationLinkObject.wait:10
#: yadisk.objects._operations.SyncOperationLinkObject.get_status:6
#: yadisk.objects._operations.SyncOperationLinkObject.wait:10
#: yadisk.objects._resources.AsyncTrashResourceObject.exists:7
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:13
#: yadisk.objects._resources.AsyncTrashResourceObject.get_type:7
#: yadisk.objects._resources.AsyncTrashResourceObject.is_dir:7
#: yadisk.objects._resources.AsyncTrashResourceObject.is_file:7
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir:13
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:13
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:21
#: yadisk.objects._resources.SyncTrashResourceObject.exists:7
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:13
#: yadisk.objects._resources.SyncTrashResourceObject.get_type:7
#: yadisk.objects._resources.SyncTrashResourceObject.is_dir:7
#: yadisk.objects._resources.SyncTrashResourceObject.is_file:7
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:13
#: yadisk.objects._resources.SyncTrashResourceObject.remove:13
#: yadisk.objects._resources.SyncTrashResourceObject.restore:21
msgid "delay between retries in seconds"
msgstr "задержка между повторными попытками в секундах"

#: of yadisk._async_client.AsyncClient.check_token:8
#: yadisk._async_client.AsyncClient.copy:19
#: yadisk._async_client.AsyncClient.download:9
#: yadisk._async_client.AsyncClient.download_by_link:9
#: yadisk._async_client.AsyncClient.download_public:10
#: yadisk._async_client.AsyncClient.exists:8
#: yadisk._async_client.AsyncClient.get_all_public_resources:14
#: yadisk._async_client.AsyncClient.get_device_code:16
#: yadisk._async_client.AsyncClient.get_disk_info:8
#: yadisk._async_client.AsyncClient.get_download_link:8
#: yadisk._async_client.AsyncClient.get_files:15
#: yadisk._async_client.AsyncClient.get_last_uploaded:12
#: yadisk._async_client.AsyncClient.get_meta:14
#: yadisk._async_client.AsyncClient.get_operation_status:8
#: yadisk._async_client.AsyncClient.get_public_download_link:9
#: yadisk._async_client.AsyncClient.get_public_meta:17
#: yadisk._async_client.AsyncClient.get_public_resources:13
#: yadisk._async_client.AsyncClient.get_public_type:9
#: yadisk._async_client.AsyncClient.get_token:10
#: yadisk._async_client.AsyncClient.get_token_from_device_code:11
#: yadisk._async_client.AsyncClient.get_trash_meta:14
#: yadisk._async_client.AsyncClient.get_trash_type:8
#: yadisk._async_client.AsyncClient.get_type:8
#: yadisk._async_client.AsyncClient.get_upload_link:9
#: yadisk._async_client.AsyncClient.get_upload_link_object:13
#: yadisk._async_client.AsyncClient.is_dir:8
#: yadisk._async_client.AsyncClient.is_file:8
#: yadisk._async_client.AsyncClient.is_public_dir:9
#: yadisk._async_client.AsyncClient.is_public_file:9
#: yadisk._async_client.AsyncClient.is_trash_dir:8
#: yadisk._async_client.AsyncClient.is_trash_file:8
#: yadisk._async_client.AsyncClient.listdir:14
#: yadisk._async_client.AsyncClient.makedirs:10
#: yadisk._async_client.AsyncClient.mkdir:9
#: yadisk._async_client.AsyncClient.move:16
#: yadisk._async_client.AsyncClient.patch:10
#: yadisk._async_client.AsyncClient.public_exists:9
#: yadisk._async_client.AsyncClient.public_listdir:17
#: yadisk._async_client.AsyncClient.publish:9
#: yadisk._async_client.AsyncClient.refresh_token:8
#: yadisk._async_client.AsyncClient.remove:17
#: yadisk._async_client.AsyncClient.remove_trash:14
#: yadisk._async_client.AsyncClient.rename:17
#: yadisk._async_client.AsyncClient.restore_trash:17
#: yadisk._async_client.AsyncClient.revoke_token:8
#: yadisk._async_client.AsyncClient.save_to_disk:19
#: yadisk._async_client.AsyncClient.trash_exists:8
#: yadisk._async_client.AsyncClient.trash_listdir:14
#: yadisk._async_client.AsyncClient.unpublish:9
#: yadisk._async_client.AsyncClient.upload:11
#: yadisk._async_client.AsyncClient.upload_by_link:11
#: yadisk._async_client.AsyncClient.upload_url:15
#: yadisk._async_client.AsyncClient.wait_for_operation:12
#: yadisk._client.Client.check_token:8 yadisk._client.Client.copy:19
#: yadisk._client.Client.download:9 yadisk._client.Client.download_by_link:9
#: yadisk._client.Client.download_public:10 yadisk._client.Client.exists:8
#: yadisk._client.Client.get_all_public_resources:14
#: yadisk._client.Client.get_device_code:15
#: yadisk._client.Client.get_disk_info:8
#: yadisk._client.Client.get_download_link:8 yadisk._client.Client.get_files:15
#: yadisk._client.Client.get_last_uploaded:12 yadisk._client.Client.get_meta:14
#: yadisk._client.Client.get_operation_status:8
#: yadisk._client.Client.get_public_download_link:9
#: yadisk._client.Client.get_public_meta:17
#: yadisk._client.Client.get_public_resources:13
#: yadisk._client.Client.get_public_type:9 yadisk._client.Client.get_token:11
#: yadisk._client.Client.get_token_from_device_code:10
#: yadisk._client.Client.get_trash_meta:14
#: yadisk._client.Client.get_trash_type:8 yadisk._client.Client.get_type:8
#: yadisk._client.Client.get_upload_link:9
#: yadisk._client.Client.get_upload_link_object:13
#: yadisk._client.Client.is_dir:8 yadisk._client.Client.is_file:8
#: yadisk._client.Client.is_public_dir:9 yadisk._client.Client.is_public_file:9
#: yadisk._client.Client.is_trash_dir:8 yadisk._client.Client.is_trash_file:8
#: yadisk._client.Client.listdir:14 yadisk._client.Client.makedirs:10
#: yadisk._client.Client.mkdir:9 yadisk._client.Client.move:16
#: yadisk._client.Client.patch:10 yadisk._client.Client.public_exists:9
#: yadisk._client.Client.public_listdir:17 yadisk._client.Client.publish:9
#: yadisk._client.Client.refresh_token:8 yadisk._client.Client.remove:17
#: yadisk._client.Client.remove_trash:14 yadisk._client.Client.rename:17
#: yadisk._client.Client.restore_trash:17 yadisk._client.Client.revoke_token:8
#: yadisk._client.Client.save_to_disk:19 yadisk._client.Client.trash_exists:8
#: yadisk._client.Client.trash_listdir:14 yadisk._client.Client.unpublish:9
#: yadisk._client.Client.upload:12 yadisk._client.Client.upload_by_link:12
#: yadisk._client.Client.upload_url:15
#: yadisk._client.Client.wait_for_operation:12
#: yadisk.objects._operations.AsyncOperationLinkObject.get_status:7
#: yadisk.objects._operations.AsyncOperationLinkObject.wait:11
#: yadisk.objects._operations.SyncOperationLinkObject.get_status:7
#: yadisk.objects._operations.SyncOperationLinkObject.wait:11
#: yadisk.objects._resources.AsyncTrashResourceObject.exists:8
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:14
#: yadisk.objects._resources.AsyncTrashResourceObject.get_type:8
#: yadisk.objects._resources.AsyncTrashResourceObject.is_dir:8
#: yadisk.objects._resources.AsyncTrashResourceObject.is_file:8
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir:14
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:14
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:22
#: yadisk.objects._resources.SyncTrashResourceObject.exists:8
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:14
#: yadisk.objects._resources.SyncTrashResourceObject.get_type:8
#: yadisk.objects._resources.SyncTrashResourceObject.is_dir:8
#: yadisk.objects._resources.SyncTrashResourceObject.is_file:8
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:14
#: yadisk.objects._resources.SyncTrashResourceObject.remove:14
#: yadisk.objects._resources.SyncTrashResourceObject.restore:22
#: yadisk.utils.async_auto_retry:10 yadisk.utils.auto_retry:10
msgid "`tuple`, additional exception classes to retry on"
msgstr ""
"`tuple`, дополнительные классы исключений, которые вызовут повторную "
"попытку"

#: of yadisk._async_client.AsyncClient.check_token:9
#: yadisk._async_client.AsyncClient.copy:20
#: yadisk._async_client.AsyncClient.download:10
#: yadisk._async_client.AsyncClient.download_by_link:10
#: yadisk._async_client.AsyncClient.download_public:11
#: yadisk._async_client.AsyncClient.exists:9
#: yadisk._async_client.AsyncClient.get_device_code:17
#: yadisk._async_client.AsyncClient.get_disk_info:9
#: yadisk._async_client.AsyncClient.get_download_link:9
#: yadisk._async_client.AsyncClient.get_files:16
#: yadisk._async_client.AsyncClient.get_last_uploaded:13
#: yadisk._async_client.AsyncClient.get_meta:15
#: yadisk._async_client.AsyncClient.get_operation_status:9
#: yadisk._async_client.AsyncClient.get_public_download_link:10
#: yadisk._async_client.AsyncClient.get_public_meta:18
#: yadisk._async_client.AsyncClient.get_public_resources:14
#: yadisk._async_client.AsyncClient.get_public_type:10
#: yadisk._async_client.AsyncClient.get_token:11
#: yadisk._async_client.AsyncClient.get_token_from_device_code:12
#: yadisk._async_client.AsyncClient.get_trash_meta:15
#: yadisk._async_client.AsyncClient.get_trash_type:9
#: yadisk._async_client.AsyncClient.get_type:9
#: yadisk._async_client.AsyncClient.get_upload_link:10
#: yadisk._async_client.AsyncClient.get_upload_link_object:14
#: yadisk._async_client.AsyncClient.is_dir:9
#: yadisk._async_client.AsyncClient.is_file:9
#: yadisk._async_client.AsyncClient.is_public_dir:10
#: yadisk._async_client.AsyncClient.is_public_file:10
#: yadisk._async_client.AsyncClient.is_trash_dir:9
#: yadisk._async_client.AsyncClient.is_trash_file:9
#: yadisk._async_client.AsyncClient.listdir:15
#: yadisk._async_client.AsyncClient.makedirs:11
#: yadisk._async_client.AsyncClient.mkdir:10
#: yadisk._async_client.AsyncClient.move:17
#: yadisk._async_client.AsyncClient.patch:11
#: yadisk._async_client.AsyncClient.public_exists:10
#: yadisk._async_client.AsyncClient.public_listdir:18
#: yadisk._async_client.AsyncClient.publish:10
#: yadisk._async_client.AsyncClient.refresh_token:9
#: yadisk._async_client.AsyncClient.remove:18
#: yadisk._async_client.AsyncClient.remove_trash:15
#: yadisk._async_client.AsyncClient.rename:18
#: yadisk._async_client.AsyncClient.restore_trash:18
#: yadisk._async_client.AsyncClient.revoke_token:9
#: yadisk._async_client.AsyncClient.save_to_disk:20
#: yadisk._async_client.AsyncClient.trash_exists:9
#: yadisk._async_client.AsyncClient.trash_listdir:15
#: yadisk._async_client.AsyncClient.unpublish:10
#: yadisk._async_client.AsyncClient.upload:12
#: yadisk._async_client.AsyncClient.upload_by_link:12
#: yadisk._async_client.AsyncClient.upload_url:16
#: yadisk._async_client.AsyncClient.wait_for_operation:13
#: yadisk.objects._operations.AsyncOperationLinkObject.get_status:8
#: yadisk.objects._operations.AsyncOperationLinkObject.wait:12
#: yadisk.objects._resources.AsyncTrashResourceObject.exists:9
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:15
#: yadisk.objects._resources.AsyncTrashResourceObject.get_type:9
#: yadisk.objects._resources.AsyncTrashResourceObject.is_dir:9
#: yadisk.objects._resources.AsyncTrashResourceObject.is_file:9
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir:15
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:15
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:23
msgid "`dict`, additional parameters for :any:`AIOHTTPSession`"
msgstr "`dict`, дополнительные параметры для :any:`AIOHTTPSession`"

#: of yadisk._async_client.AsyncClient.check_token:10
#: yadisk._async_client.AsyncClient.copy:21
#: yadisk._async_client.AsyncClient.download:11
#: yadisk._async_client.AsyncClient.download_by_link:11
#: yadisk._async_client.AsyncClient.download_public:12
#: yadisk._async_client.AsyncClient.exists:10
#: yadisk._async_client.AsyncClient.get_device_code:18
#: yadisk._async_client.AsyncClient.get_disk_info:10
#: yadisk._async_client.AsyncClient.get_download_link:10
#: yadisk._async_client.AsyncClient.get_files:17
#: yadisk._async_client.AsyncClient.get_last_uploaded:14
#: yadisk._async_client.AsyncClient.get_meta:16
#: yadisk._async_client.AsyncClient.get_operation_status:10
#: yadisk._async_client.AsyncClient.get_public_download_link:11
#: yadisk._async_client.AsyncClient.get_public_meta:19
#: yadisk._async_client.AsyncClient.get_public_resources:15
#: yadisk._async_client.AsyncClient.get_public_type:11
#: yadisk._async_client.AsyncClient.get_token:12
#: yadisk._async_client.AsyncClient.get_token_from_device_code:13
#: yadisk._async_client.AsyncClient.get_trash_meta:16
#: yadisk._async_client.AsyncClient.get_trash_type:10
#: yadisk._async_client.AsyncClient.get_type:10
#: yadisk._async_client.AsyncClient.get_upload_link:11
#: yadisk._async_client.AsyncClient.get_upload_link_object:15
#: yadisk._async_client.AsyncClient.is_dir:10
#: yadisk._async_client.AsyncClient.is_file:10
#: yadisk._async_client.AsyncClient.is_public_dir:11
#: yadisk._async_client.AsyncClient.is_public_file:11
#: yadisk._async_client.AsyncClient.is_trash_dir:10
#: yadisk._async_client.AsyncClient.is_trash_file:10
#: yadisk._async_client.AsyncClient.listdir:16
#: yadisk._async_client.AsyncClient.makedirs:12
#: yadisk._async_client.AsyncClient.mkdir:11
#: yadisk._async_client.AsyncClient.move:18
#: yadisk._async_client.AsyncClient.patch:12
#: yadisk._async_client.AsyncClient.public_exists:11
#: yadisk._async_client.AsyncClient.public_listdir:19
#: yadisk._async_client.AsyncClient.publish:11
#: yadisk._async_client.AsyncClient.refresh_token:10
#: yadisk._async_client.AsyncClient.remove:19
#: yadisk._async_client.AsyncClient.remove_trash:16
#: yadisk._async_client.AsyncClient.rename:19
#: yadisk._async_client.AsyncClient.restore_trash:19
#: yadisk._async_client.AsyncClient.revoke_token:10
#: yadisk._async_client.AsyncClient.save_to_disk:21
#: yadisk._async_client.AsyncClient.trash_exists:10
#: yadisk._async_client.AsyncClient.trash_listdir:16
#: yadisk._async_client.AsyncClient.unpublish:11
#: yadisk._async_client.AsyncClient.upload:13
#: yadisk._async_client.AsyncClient.upload_by_link:13
#: yadisk._async_client.AsyncClient.upload_url:17
#: yadisk._async_client.AsyncClient.wait_for_operation:14
#: yadisk.objects._operations.AsyncOperationLinkObject.get_status:9
#: yadisk.objects._operations.AsyncOperationLinkObject.wait:13
#: yadisk.objects._resources.AsyncTrashResourceObject.exists:10
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:16
#: yadisk.objects._resources.AsyncTrashResourceObject.get_type:10
#: yadisk.objects._resources.AsyncTrashResourceObject.is_dir:10
#: yadisk.objects._resources.AsyncTrashResourceObject.is_file:10
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir:16
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:16
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:24
msgid "`dict`, additional parameters for :any:`AsyncHTTPXSession`"
msgstr "`dict`, дополнительные параметры для :any:`AsyncHTTPXSession`"

#: of yadisk._async_client.AsyncClient.check_token:11
#: yadisk._async_client.AsyncClient.copy:22
#: yadisk._async_client.AsyncClient.download:12
#: yadisk._async_client.AsyncClient.download_by_link:12
#: yadisk._async_client.AsyncClient.download_public:13
#: yadisk._async_client.AsyncClient.exists:11
#: yadisk._async_client.AsyncClient.get_all_public_resources:18
#: yadisk._async_client.AsyncClient.get_device_code:19
#: yadisk._async_client.AsyncClient.get_disk_info:11
#: yadisk._async_client.AsyncClient.get_download_link:11
#: yadisk._async_client.AsyncClient.get_files:18
#: yadisk._async_client.AsyncClient.get_last_uploaded:15
#: yadisk._async_client.AsyncClient.get_meta:17
#: yadisk._async_client.AsyncClient.get_operation_status:11
#: yadisk._async_client.AsyncClient.get_public_download_link:12
#: yadisk._async_client.AsyncClient.get_public_meta:20
#: yadisk._async_client.AsyncClient.get_public_resources:16
#: yadisk._async_client.AsyncClient.get_public_type:12
#: yadisk._async_client.AsyncClient.get_token:13
#: yadisk._async_client.AsyncClient.get_token_from_device_code:14
#: yadisk._async_client.AsyncClient.get_trash_meta:17
#: yadisk._async_client.AsyncClient.get_trash_type:11
#: yadisk._async_client.AsyncClient.get_type:11
#: yadisk._async_client.AsyncClient.get_upload_link:12
#: yadisk._async_client.AsyncClient.get_upload_link_object:16
#: yadisk._async_client.AsyncClient.is_dir:11
#: yadisk._async_client.AsyncClient.is_file:11
#: yadisk._async_client.AsyncClient.is_public_dir:12
#: yadisk._async_client.AsyncClient.is_public_file:12
#: yadisk._async_client.AsyncClient.is_trash_dir:11
#: yadisk._async_client.AsyncClient.is_trash_file:11
#: yadisk._async_client.AsyncClient.listdir:17
#: yadisk._async_client.AsyncClient.makedirs:13
#: yadisk._async_client.AsyncClient.mkdir:12
#: yadisk._async_client.AsyncClient.move:19
#: yadisk._async_client.AsyncClient.patch:13
#: yadisk._async_client.AsyncClient.public_exists:12
#: yadisk._async_client.AsyncClient.public_listdir:20
#: yadisk._async_client.AsyncClient.publish:12
#: yadisk._async_client.AsyncClient.refresh_token:11
#: yadisk._async_client.AsyncClient.remove:20
#: yadisk._async_client.AsyncClient.remove_trash:17
#: yadisk._async_client.AsyncClient.rename:20
#: yadisk._async_client.AsyncClient.restore_trash:20
#: yadisk._async_client.AsyncClient.revoke_token:11
#: yadisk._async_client.AsyncClient.save_to_disk:22
#: yadisk._async_client.AsyncClient.trash_exists:11
#: yadisk._async_client.AsyncClient.trash_listdir:17
#: yadisk._async_client.AsyncClient.unpublish:12
#: yadisk._async_client.AsyncClient.upload:14
#: yadisk._async_client.AsyncClient.upload_by_link:14
#: yadisk._async_client.AsyncClient.upload_url:18
#: yadisk._async_client.AsyncClient.wait_for_operation:15
#: yadisk._client.Client.check_token:12 yadisk._client.Client.copy:23
#: yadisk._client.Client.download:13 yadisk._client.Client.download_by_link:13
#: yadisk._client.Client.download_public:14 yadisk._client.Client.exists:12
#: yadisk._client.Client.get_all_public_resources:18
#: yadisk._client.Client.get_device_code:19
#: yadisk._client.Client.get_disk_info:12
#: yadisk._client.Client.get_download_link:12
#: yadisk._client.Client.get_files:19
#: yadisk._client.Client.get_last_uploaded:16 yadisk._client.Client.get_meta:18
#: yadisk._client.Client.get_operation_status:12
#: yadisk._client.Client.get_public_download_link:13
#: yadisk._client.Client.get_public_meta:21
#: yadisk._client.Client.get_public_resources:17
#: yadisk._client.Client.get_public_type:13 yadisk._client.Client.get_token:15
#: yadisk._client.Client.get_token_from_device_code:14
#: yadisk._client.Client.get_trash_meta:18
#: yadisk._client.Client.get_trash_type:12 yadisk._client.Client.get_type:12
#: yadisk._client.Client.get_upload_link:13
#: yadisk._client.Client.get_upload_link_object:17
#: yadisk._client.Client.is_dir:12 yadisk._client.Client.is_file:12
#: yadisk._client.Client.is_public_dir:13
#: yadisk._client.Client.is_public_file:13
#: yadisk._client.Client.is_trash_dir:12 yadisk._client.Client.is_trash_file:12
#: yadisk._client.Client.listdir:18 yadisk._client.Client.makedirs:14
#: yadisk._client.Client.mkdir:13 yadisk._client.Client.move:20
#: yadisk._client.Client.patch:14 yadisk._client.Client.public_exists:13
#: yadisk._client.Client.public_listdir:21 yadisk._client.Client.publish:13
#: yadisk._client.Client.refresh_token:12 yadisk._client.Client.remove:21
#: yadisk._client.Client.remove_trash:18 yadisk._client.Client.rename:21
#: yadisk._client.Client.restore_trash:21 yadisk._client.Client.revoke_token:12
#: yadisk._client.Client.save_to_disk:23 yadisk._client.Client.trash_exists:12
#: yadisk._client.Client.trash_listdir:18 yadisk._client.Client.unpublish:13
#: yadisk._client.Client.upload:16 yadisk._client.Client.upload_by_link:16
#: yadisk._client.Client.upload_url:19
#: yadisk._client.Client.wait_for_operation:16
#: yadisk.objects._operations.AsyncOperationLinkObject.get_status:10
#: yadisk.objects._operations.AsyncOperationLinkObject.wait:14
#: yadisk.objects._operations.SyncOperationLinkObject.get_status:11
#: yadisk.objects._operations.SyncOperationLinkObject.wait:15
#: yadisk.objects._resources.AsyncTrashResourceObject.exists:11
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:17
#: yadisk.objects._resources.AsyncTrashResourceObject.get_type:11
#: yadisk.objects._resources.AsyncTrashResourceObject.is_dir:11
#: yadisk.objects._resources.AsyncTrashResourceObject.is_file:11
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir:17
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:17
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:25
#: yadisk.objects._resources.SyncTrashResourceObject.exists:12
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:18
#: yadisk.objects._resources.SyncTrashResourceObject.get_type:12
#: yadisk.objects._resources.SyncTrashResourceObject.is_dir:12
#: yadisk.objects._resources.SyncTrashResourceObject.is_file:12
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:18
#: yadisk.objects._resources.SyncTrashResourceObject.remove:18
#: yadisk.objects._resources.SyncTrashResourceObject.restore:26
msgid "any other parameters, accepted by :any:`Session.send_request()`"
msgstr "другие параметры для :any:`Session.send_request()`"

#: of yadisk._async_client.AsyncClient.check_token
#: yadisk._async_client.AsyncClient.copy
#: yadisk._async_client.AsyncClient.download
#: yadisk._async_client.AsyncClient.download_public
#: yadisk._async_client.AsyncClient.exists
#: yadisk._async_client.AsyncClient.get_all_public_resources
#: yadisk._async_client.AsyncClient.get_auth_url
#: yadisk._async_client.AsyncClient.get_code_url
#: yadisk._async_client.AsyncClient.get_device_code
#: yadisk._async_client.AsyncClient.get_disk_info
#: yadisk._async_client.AsyncClient.get_download_link
#: yadisk._async_client.AsyncClient.get_files
#: yadisk._async_client.AsyncClient.get_last_uploaded
#: yadisk._async_client.AsyncClient.get_meta
#: yadisk._async_client.AsyncClient.get_operation_status
#: yadisk._async_client.AsyncClient.get_public_download_link
#: yadisk._async_client.AsyncClient.get_public_meta
#: yadisk._async_client.AsyncClient.get_public_resources
#: yadisk._async_client.AsyncClient.get_public_type
#: yadisk._async_client.AsyncClient.get_token
#: yadisk._async_client.AsyncClient.get_token_from_device_code
#: yadisk._async_client.AsyncClient.get_trash_meta
#: yadisk._async_client.AsyncClient.get_trash_type
#: yadisk._async_client.AsyncClient.get_type
#: yadisk._async_client.AsyncClient.get_upload_link
#: yadisk._async_client.AsyncClient.get_upload_link_object
#: yadisk._async_client.AsyncClient.is_dir
#: yadisk._async_client.AsyncClient.is_file
#: yadisk._async_client.AsyncClient.is_public_dir
#: yadisk._async_client.AsyncClient.is_public_file
#: yadisk._async_client.AsyncClient.is_trash_dir
#: yadisk._async_client.AsyncClient.is_trash_file
#: yadisk._async_client.AsyncClient.listdir
#: yadisk._async_client.AsyncClient.makedirs
#: yadisk._async_client.AsyncClient.mkdir yadisk._async_client.AsyncClient.move
#: yadisk._async_client.AsyncClient.patch
#: yadisk._async_client.AsyncClient.public_exists
#: yadisk._async_client.AsyncClient.public_listdir
#: yadisk._async_client.AsyncClient.publish
#: yadisk._async_client.AsyncClient.refresh_token
#: yadisk._async_client.AsyncClient.remove
#: yadisk._async_client.AsyncClient.remove_trash
#: yadisk._async_client.AsyncClient.rename
#: yadisk._async_client.AsyncClient.restore_trash
#: yadisk._async_client.AsyncClient.revoke_token
#: yadisk._async_client.AsyncClient.save_to_disk
#: yadisk._async_client.AsyncClient.trash_exists
#: yadisk._async_client.AsyncClient.trash_listdir
#: yadisk._async_client.AsyncClient.unpublish
#: yadisk._async_client.AsyncClient.upload
#: yadisk._async_client.AsyncClient.upload_url
#: yadisk._async_session.AsyncResponse.get_exception
#: yadisk._async_session.AsyncResponse.json
#: yadisk._async_session.AsyncSession.send_request
#: yadisk._client.Client.check_token yadisk._client.Client.copy
#: yadisk._client.Client.download yadisk._client.Client.download_public
#: yadisk._client.Client.exists yadisk._client.Client.get_all_public_resources
#: yadisk._client.Client.get_auth_url yadisk._client.Client.get_code_url
#: yadisk._client.Client.get_device_code yadisk._client.Client.get_disk_info
#: yadisk._client.Client.get_download_link yadisk._client.Client.get_files
#: yadisk._client.Client.get_last_uploaded yadisk._client.Client.get_meta
#: yadisk._client.Client.get_operation_status
#: yadisk._client.Client.get_public_download_link
#: yadisk._client.Client.get_public_meta
#: yadisk._client.Client.get_public_resources
#: yadisk._client.Client.get_public_type yadisk._client.Client.get_token
#: yadisk._client.Client.get_token_from_device_code
#: yadisk._client.Client.get_trash_meta yadisk._client.Client.get_trash_type
#: yadisk._client.Client.get_type yadisk._client.Client.get_upload_link
#: yadisk._client.Client.get_upload_link_object yadisk._client.Client.is_dir
#: yadisk._client.Client.is_file yadisk._client.Client.is_public_dir
#: yadisk._client.Client.is_public_file yadisk._client.Client.is_trash_dir
#: yadisk._client.Client.is_trash_file yadisk._client.Client.listdir
#: yadisk._client.Client.makedirs yadisk._client.Client.mkdir
#: yadisk._client.Client.move yadisk._client.Client.patch
#: yadisk._client.Client.public_exists yadisk._client.Client.public_listdir
#: yadisk._client.Client.publish yadisk._client.Client.refresh_token
#: yadisk._client.Client.remove yadisk._client.Client.remove_trash
#: yadisk._client.Client.rename yadisk._client.Client.restore_trash
#: yadisk._client.Client.revoke_token yadisk._client.Client.save_to_disk
#: yadisk._client.Client.trash_exists yadisk._client.Client.trash_listdir
#: yadisk._client.Client.unpublish yadisk._client.Client.upload
#: yadisk._client.Client.upload_url yadisk._import_session.import_async_session
#: yadisk._import_session.import_session yadisk._session.Response.get_exception
#: yadisk._session.Response.json yadisk._session.Session.send_request
#: yadisk.objects._operations.AsyncOperationLinkObject.get_status
#: yadisk.objects._operations.SyncOperationLinkObject.get_status
#: yadisk.objects._resources.AsyncTrashResourceObject.exists
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta
#: yadisk.objects._resources.AsyncTrashResourceObject.get_type
#: yadisk.objects._resources.AsyncTrashResourceObject.is_dir
#: yadisk.objects._resources.AsyncTrashResourceObject.is_file
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir
#: yadisk.objects._resources.AsyncTrashResourceObject.remove
#: yadisk.objects._resources.AsyncTrashResourceObject.restore
#: yadisk.objects._resources.SyncTrashResourceObject.exists
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta
#: yadisk.objects._resources.SyncTrashResourceObject.get_type
#: yadisk.objects._resources.SyncTrashResourceObject.is_dir
#: yadisk.objects._resources.SyncTrashResourceObject.is_file
#: yadisk.objects._resources.SyncTrashResourceObject.listdir
#: yadisk.objects._resources.SyncTrashResourceObject.remove
#: yadisk.objects._resources.SyncTrashResourceObject.restore
#: yadisk.objects._yadisk_object.YaDiskObject.__matmul__
#: yadisk.objects._yadisk_object.YaDiskObject.field
#: yadisk.types.AsyncFileLike.read yadisk.types.AsyncFileLike.seek
#: yadisk.types.AsyncFileLike.tell yadisk.types.AsyncFileLike.write
#: yadisk.types.BinaryAsyncFileLike.read yadisk.types.BinaryAsyncFileLike.seek
#: yadisk.types.BinaryAsyncFileLike.tell yadisk.types.BinaryAsyncFileLike.write
#: yadisk.utils.async_auto_retry yadisk.utils.auto_retry
#: yadisk.utils.get_exception
msgid "Returns"
msgstr "Возвращает"

#: of yadisk._async_client.AsyncClient.check_token:13
#: yadisk._async_client.AsyncClient.exists:15
#: yadisk._async_client.AsyncClient.public_exists:16
#: yadisk._async_client.AsyncClient.trash_exists:15
#: yadisk._client.Client.check_token:14 yadisk._client.Client.exists:16
#: yadisk._client.Client.public_exists:17 yadisk._client.Client.trash_exists:16
#: yadisk.objects._resources.AsyncTrashResourceObject.exists:15
#: yadisk.objects._resources.SyncTrashResourceObject.exists:16
msgid "`bool`"
msgstr "`bool`"

#: of yadisk._async_client.AsyncClient.close:1 yadisk._client.Client.close:1
msgid ""
"Closes the session. Do not call this method while there are other active "
"threads using this object."
msgstr ""
"Закрывает сессию. Не вызывайте этот метод, пока другие потоки используют "
"этот объект."

#: of yadisk._async_client.AsyncClient.close:4
msgid ""
"This method can also be called implicitly by using the `async with` "
"statement."
msgstr "Этот метод неявно вызывается конструкцией `async with`."

#: of yadisk._async_client.AsyncClient.copy:1 yadisk._client.Client.copy:1
msgid ""
"Copy `src_path` to `dst_path`. If the operation is performed "
"asynchronously, returns the link to the operation, otherwise, returns the"
" link to the newly created resource."
msgstr ""
"Копирует `src_path` в `dst_path`. Если операция выполняется асинхронно, "
"возвращает ссылку на операцию, иначе, возвращает ссылку на новый ресурс."

#: of yadisk._async_client.AsyncClient.copy:5
#: yadisk._async_client.AsyncClient.download:3 yadisk._client.Client.copy:5
#: yadisk._client.Client.download:3
msgid "source path"
msgstr "исходный путь"

#: of yadisk._async_client.AsyncClient.copy:6
#: yadisk._async_client.AsyncClient.get_upload_link:3
#: yadisk._async_client.AsyncClient.get_upload_link_object:6
#: yadisk._async_client.AsyncClient.move:4
#: yadisk._async_client.AsyncClient.restore_trash:5
#: yadisk._async_client.AsyncClient.upload:4
#: yadisk._async_client.AsyncClient.upload_url:4 yadisk._client.Client.copy:6
#: yadisk._client.Client.get_upload_link:3
#: yadisk._client.Client.get_upload_link_object:6 yadisk._client.Client.move:4
#: yadisk._client.Client.restore_trash:5 yadisk._client.Client.upload:5
#: yadisk._client.Client.upload_url:4
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:10
#: yadisk.objects._resources.SyncTrashResourceObject.restore:10
msgid "destination path"
msgstr "путь назначения"

#: of yadisk._async_client.AsyncClient.copy:7 yadisk._client.Client.copy:7
msgid ""
"if `True` the destination path can be overwritten, otherwise, an error "
"will be raised"
msgstr ""
"если `True`, путь назначения может быть перезаписан, иначе будет вызвана "
"ошибка"

#: of yadisk._async_client.AsyncClient.copy:9
#: yadisk._async_client.AsyncClient.move:6
#: yadisk._async_client.AsyncClient.remove:7
#: yadisk._async_client.AsyncClient.remove_trash:4
#: yadisk._async_client.AsyncClient.rename:7
#: yadisk._async_client.AsyncClient.restore_trash:7
#: yadisk._async_client.AsyncClient.save_to_disk:9 yadisk._client.Client.copy:9
#: yadisk._client.Client.move:6 yadisk._client.Client.remove:7
#: yadisk._client.Client.remove_trash:4 yadisk._client.Client.rename:7
#: yadisk._client.Client.restore_trash:7 yadisk._client.Client.save_to_disk:9
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:4
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:12
#: yadisk.objects._resources.SyncTrashResourceObject.remove:4
#: yadisk.objects._resources.SyncTrashResourceObject.restore:12
msgid "forces the operation to be executed asynchronously"
msgstr "заставляет выполнять операцию асинхронно"

#: of yadisk._async_client.AsyncClient.copy:10
#: yadisk._async_client.AsyncClient.get_all_public_resources:9
#: yadisk._async_client.AsyncClient.get_disk_info:3
#: yadisk._async_client.AsyncClient.get_files:10
#: yadisk._async_client.AsyncClient.get_last_uploaded:7
#: yadisk._async_client.AsyncClient.get_meta:9
#: yadisk._async_client.AsyncClient.get_public_meta:12
#: yadisk._async_client.AsyncClient.get_public_resources:8
#: yadisk._async_client.AsyncClient.get_trash_meta:9
#: yadisk._async_client.AsyncClient.get_upload_link_object:8
#: yadisk._async_client.AsyncClient.listdir:9
#: yadisk._async_client.AsyncClient.makedirs:5
#: yadisk._async_client.AsyncClient.mkdir:4
#: yadisk._async_client.AsyncClient.move:7
#: yadisk._async_client.AsyncClient.patch:5
#: yadisk._async_client.AsyncClient.public_listdir:12
#: yadisk._async_client.AsyncClient.publish:4
#: yadisk._async_client.AsyncClient.remove:8
#: yadisk._async_client.AsyncClient.remove_trash:5
#: yadisk._async_client.AsyncClient.rename:8
#: yadisk._async_client.AsyncClient.restore_trash:8
#: yadisk._async_client.AsyncClient.save_to_disk:10
#: yadisk._async_client.AsyncClient.trash_listdir:9
#: yadisk._async_client.AsyncClient.unpublish:4
#: yadisk._async_client.AsyncClient.upload_url:6 yadisk._client.Client.copy:10
#: yadisk._client.Client.get_all_public_resources:9
#: yadisk._client.Client.get_disk_info:3 yadisk._client.Client.get_files:10
#: yadisk._client.Client.get_last_uploaded:7 yadisk._client.Client.get_meta:9
#: yadisk._client.Client.get_public_meta:12
#: yadisk._client.Client.get_public_resources:8
#: yadisk._client.Client.get_trash_meta:9
#: yadisk._client.Client.get_upload_link_object:8
#: yadisk._client.Client.listdir:9 yadisk._client.Client.makedirs:5
#: yadisk._client.Client.mkdir:4 yadisk._client.Client.move:7
#: yadisk._client.Client.patch:5 yadisk._client.Client.public_listdir:12
#: yadisk._client.Client.publish:4 yadisk._client.Client.remove:12
#: yadisk._client.Client.remove_trash:5 yadisk._client.Client.rename:8
#: yadisk._client.Client.restore_trash:8 yadisk._client.Client.save_to_disk:10
#: yadisk._client.Client.trash_listdir:9 yadisk._client.Client.unpublish:4
#: yadisk._client.Client.upload_url:6
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:9
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir:9
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:5
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:13
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:9
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:9
#: yadisk.objects._resources.SyncTrashResourceObject.remove:5
#: yadisk.objects._resources.SyncTrashResourceObject.restore:13
msgid "list of keys to be included in the response"
msgstr "список ключей, которые будут включены в ответ"

#: of yadisk._async_client.AsyncClient.copy:11
#: yadisk._async_client.AsyncClient.move:8
#: yadisk._async_client.AsyncClient.remove:9
#: yadisk._async_client.AsyncClient.remove_trash:6
#: yadisk._async_client.AsyncClient.rename:9
#: yadisk._async_client.AsyncClient.restore_trash:9
#: yadisk._async_client.AsyncClient.save_to_disk:11
#: yadisk._async_client.AsyncClient.upload_url:7 yadisk._client.Client.copy:11
#: yadisk._client.Client.move:8 yadisk._client.Client.remove:8
#: yadisk._client.Client.remove_trash:6 yadisk._client.Client.rename:9
#: yadisk._client.Client.restore_trash:9 yadisk._client.Client.save_to_disk:11
#: yadisk._client.Client.upload_url:7
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:6
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:14
#: yadisk.objects._resources.SyncTrashResourceObject.remove:6
#: yadisk.objects._resources.SyncTrashResourceObject.restore:14
msgid ""
"`bool`, if :code:`True`, the method will wait until the asynchronous "
"operation is completed"
msgstr ""
"`bool`, если :code:`True`, метод будет ожидать завершения асинхронной "
"операции"

#: of yadisk._async_client.AsyncClient.copy:12
#: yadisk._async_client.AsyncClient.move:9
#: yadisk._async_client.AsyncClient.remove:10
#: yadisk._async_client.AsyncClient.remove_trash:7
#: yadisk._async_client.AsyncClient.rename:10
#: yadisk._async_client.AsyncClient.restore_trash:10
#: yadisk._async_client.AsyncClient.save_to_disk:12
#: yadisk._async_client.AsyncClient.upload_url:8
#: yadisk._async_client.AsyncClient.wait_for_operation:5
#: yadisk._client.Client.copy:12 yadisk._client.Client.move:9
#: yadisk._client.Client.remove:9 yadisk._client.Client.remove_trash:7
#: yadisk._client.Client.rename:10 yadisk._client.Client.restore_trash:10
#: yadisk._client.Client.save_to_disk:12 yadisk._client.Client.upload_url:8
#: yadisk._client.Client.wait_for_operation:5
#: yadisk.objects._operations.AsyncOperationLinkObject.wait:4
#: yadisk.objects._operations.SyncOperationLinkObject.wait:4
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:7
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:15
#: yadisk.objects._resources.SyncTrashResourceObject.remove:7
#: yadisk.objects._resources.SyncTrashResourceObject.restore:15
msgid "`float`, interval in seconds between subsequent operation status queries"
msgstr "`float`, интервал в секундах между проверками статуса операции"

#: of yadisk._async_client.AsyncClient.copy:13
#: yadisk._async_client.AsyncClient.move:10
#: yadisk._async_client.AsyncClient.remove:11
#: yadisk._async_client.AsyncClient.remove_trash:8
#: yadisk._async_client.AsyncClient.rename:11
#: yadisk._async_client.AsyncClient.restore_trash:11
#: yadisk._async_client.AsyncClient.save_to_disk:13
#: yadisk._async_client.AsyncClient.upload_url:9
#: yadisk._async_client.AsyncClient.wait_for_operation:6
#: yadisk._client.Client.copy:13 yadisk._client.Client.move:10
#: yadisk._client.Client.remove:10 yadisk._client.Client.remove_trash:8
#: yadisk._client.Client.rename:11 yadisk._client.Client.restore_trash:11
#: yadisk._client.Client.save_to_disk:13 yadisk._client.Client.upload_url:9
#: yadisk._client.Client.wait_for_operation:6
#: yadisk.objects._operations.AsyncOperationLinkObject.wait:5
#: yadisk.objects._operations.SyncOperationLinkObject.wait:5
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:8
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:16
#: yadisk.objects._resources.SyncTrashResourceObject.remove:8
#: yadisk.objects._resources.SyncTrashResourceObject.restore:16
msgid ""
"`float` or `None`, total polling timeout (`None` means no timeout), if "
"this timeout is exceeded, an exception is raised"
msgstr ""
"`float` or `None`, таймаут ожидания операции (`None` означает отсутствие "
"таймаута), если этот таймаут превышен, будет вызвано исключение"

#: of yadisk._async_client.AsyncClient.copy:24
#: yadisk._async_client.AsyncClient.download:14
#: yadisk._async_client.AsyncClient.download_public:15
#: yadisk._async_client.AsyncClient.get_download_link:13
#: yadisk._async_client.AsyncClient.get_meta:19
#: yadisk._async_client.AsyncClient.get_public_download_link:14
#: yadisk._async_client.AsyncClient.get_public_meta:22
#: yadisk._async_client.AsyncClient.get_public_type:14
#: yadisk._async_client.AsyncClient.get_trash_meta:19
#: yadisk._async_client.AsyncClient.get_trash_type:13
#: yadisk._async_client.AsyncClient.get_type:13
#: yadisk._async_client.AsyncClient.listdir:19
#: yadisk._async_client.AsyncClient.move:21
#: yadisk._async_client.AsyncClient.patch:15
#: yadisk._async_client.AsyncClient.public_listdir:22
#: yadisk._async_client.AsyncClient.publish:14
#: yadisk._async_client.AsyncClient.remove:22
#: yadisk._async_client.AsyncClient.remove_trash:19
#: yadisk._async_client.AsyncClient.rename:22
#: yadisk._async_client.AsyncClient.restore_trash:22
#: yadisk._async_client.AsyncClient.save_to_disk:24
#: yadisk._async_client.AsyncClient.trash_listdir:19
#: yadisk._async_client.AsyncClient.unpublish:14 yadisk._client.Client.copy:25
#: yadisk._client.Client.download:15 yadisk._client.Client.download_public:16
#: yadisk._client.Client.get_download_link:14 yadisk._client.Client.get_meta:20
#: yadisk._client.Client.get_public_download_link:15
#: yadisk._client.Client.get_public_meta:23
#: yadisk._client.Client.get_public_type:15
#: yadisk._client.Client.get_trash_meta:20
#: yadisk._client.Client.get_trash_type:14 yadisk._client.Client.get_type:14
#: yadisk._client.Client.listdir:20 yadisk._client.Client.move:22
#: yadisk._client.Client.patch:16 yadisk._client.Client.public_listdir:23
#: yadisk._client.Client.publish:15 yadisk._client.Client.remove:23
#: yadisk._client.Client.remove_trash:20 yadisk._client.Client.rename:23
#: yadisk._client.Client.restore_trash:23 yadisk._client.Client.save_to_disk:25
#: yadisk._client.Client.trash_listdir:20 yadisk._client.Client.unpublish:15
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:19
#: yadisk.objects._resources.AsyncTrashResourceObject.get_type:13
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir:19
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:19
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:27
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:20
#: yadisk.objects._resources.SyncTrashResourceObject.get_type:14
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:20
#: yadisk.objects._resources.SyncTrashResourceObject.remove:20
#: yadisk.objects._resources.SyncTrashResourceObject.restore:28
msgid "resource was not found on Disk"
msgstr "ресурс не был найден на Диске"

#: of yadisk._async_client.AsyncClient.copy:25
#: yadisk._async_client.AsyncClient.get_upload_link:15
#: yadisk._async_client.AsyncClient.get_upload_link_object:19
#: yadisk._async_client.AsyncClient.makedirs:15
#: yadisk._async_client.AsyncClient.mkdir:15
#: yadisk._async_client.AsyncClient.move:22
#: yadisk._async_client.AsyncClient.rename:23
#: yadisk._async_client.AsyncClient.restore_trash:23
#: yadisk._async_client.AsyncClient.upload:17
#: yadisk._async_client.AsyncClient.upload_url:21 yadisk._client.Client.copy:26
#: yadisk._client.Client.get_upload_link:16
#: yadisk._client.Client.get_upload_link_object:20
#: yadisk._client.Client.makedirs:16 yadisk._client.Client.mkdir:16
#: yadisk._client.Client.move:23 yadisk._client.Client.rename:24
#: yadisk._client.Client.restore_trash:24 yadisk._client.Client.upload:19
#: yadisk._client.Client.upload_url:22
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:28
#: yadisk.objects._resources.SyncTrashResourceObject.restore:29
msgid "destination path already exists"
msgstr "путь назначения уже существует"

#: of yadisk._async_client.AsyncClient.copy:26
#: yadisk._async_client.AsyncClient.download:15
#: yadisk._async_client.AsyncClient.download_public:16
#: yadisk._async_client.AsyncClient.exists:13
#: yadisk._async_client.AsyncClient.get_all_public_resources:20
#: yadisk._async_client.AsyncClient.get_disk_info:13
#: yadisk._async_client.AsyncClient.get_download_link:14
#: yadisk._async_client.AsyncClient.get_files:20
#: yadisk._async_client.AsyncClient.get_last_uploaded:17
#: yadisk._async_client.AsyncClient.get_meta:20
#: yadisk._async_client.AsyncClient.get_public_download_link:15
#: yadisk._async_client.AsyncClient.get_public_meta:23
#: yadisk._async_client.AsyncClient.get_public_resources:18
#: yadisk._async_client.AsyncClient.get_public_type:15
#: yadisk._async_client.AsyncClient.get_trash_meta:20
#: yadisk._async_client.AsyncClient.get_trash_type:14
#: yadisk._async_client.AsyncClient.get_type:14
#: yadisk._async_client.AsyncClient.get_upload_link:16
#: yadisk._async_client.AsyncClient.get_upload_link_object:20
#: yadisk._async_client.AsyncClient.is_dir:13
#: yadisk._async_client.AsyncClient.is_file:13
#: yadisk._async_client.AsyncClient.is_public_dir:14
#: yadisk._async_client.AsyncClient.is_public_file:14
#: yadisk._async_client.AsyncClient.is_trash_dir:13
#: yadisk._async_client.AsyncClient.is_trash_file:13
#: yadisk._async_client.AsyncClient.listdir:20
#: yadisk._async_client.AsyncClient.makedirs:17
#: yadisk._async_client.AsyncClient.mkdir:17
#: yadisk._async_client.AsyncClient.move:23
#: yadisk._async_client.AsyncClient.patch:16
#: yadisk._async_client.AsyncClient.public_exists:14
#: yadisk._async_client.AsyncClient.public_listdir:23
#: yadisk._async_client.AsyncClient.publish:15
#: yadisk._async_client.AsyncClient.remove:23
#: yadisk._async_client.AsyncClient.remove_trash:20
#: yadisk._async_client.AsyncClient.rename:24
#: yadisk._async_client.AsyncClient.restore_trash:24
#: yadisk._async_client.AsyncClient.save_to_disk:25
#: yadisk._async_client.AsyncClient.trash_exists:13
#: yadisk._async_client.AsyncClient.trash_listdir:20
#: yadisk._async_client.AsyncClient.unpublish:15
#: yadisk._async_client.AsyncClient.upload:19
#: yadisk._async_client.AsyncClient.upload_url:23 yadisk._client.Client.copy:27
#: yadisk._client.Client.download:16 yadisk._client.Client.download_public:17
#: yadisk._client.Client.exists:14
#: yadisk._client.Client.get_all_public_resources:20
#: yadisk._client.Client.get_disk_info:14
#: yadisk._client.Client.get_download_link:15
#: yadisk._client.Client.get_files:21
#: yadisk._client.Client.get_last_uploaded:18 yadisk._client.Client.get_meta:21
#: yadisk._client.Client.get_public_download_link:16
#: yadisk._client.Client.get_public_meta:24
#: yadisk._client.Client.get_public_resources:19
#: yadisk._client.Client.get_public_type:16
#: yadisk._client.Client.get_trash_meta:21
#: yadisk._client.Client.get_trash_type:15 yadisk._client.Client.get_type:15
#: yadisk._client.Client.get_upload_link:17
#: yadisk._client.Client.get_upload_link_object:21
#: yadisk._client.Client.is_dir:14 yadisk._client.Client.is_file:14
#: yadisk._client.Client.is_public_dir:15
#: yadisk._client.Client.is_public_file:15
#: yadisk._client.Client.is_trash_dir:14 yadisk._client.Client.is_trash_file:14
#: yadisk._client.Client.listdir:21 yadisk._client.Client.makedirs:18
#: yadisk._client.Client.mkdir:18 yadisk._client.Client.move:24
#: yadisk._client.Client.patch:17 yadisk._client.Client.public_exists:15
#: yadisk._client.Client.public_listdir:24 yadisk._client.Client.publish:16
#: yadisk._client.Client.remove:24 yadisk._client.Client.remove_trash:21
#: yadisk._client.Client.rename:25 yadisk._client.Client.restore_trash:25
#: yadisk._client.Client.save_to_disk:26 yadisk._client.Client.trash_exists:14
#: yadisk._client.Client.trash_listdir:21 yadisk._client.Client.unpublish:16
#: yadisk._client.Client.upload:21 yadisk._client.Client.upload_url:24
#: yadisk.objects._resources.AsyncTrashResourceObject.exists:13
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:20
#: yadisk.objects._resources.AsyncTrashResourceObject.get_type:14
#: yadisk.objects._resources.AsyncTrashResourceObject.is_dir:13
#: yadisk.objects._resources.AsyncTrashResourceObject.is_file:13
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir:20
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:20
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:29
#: yadisk.objects._resources.SyncTrashResourceObject.exists:14
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:21
#: yadisk.objects._resources.SyncTrashResourceObject.get_type:15
#: yadisk.objects._resources.SyncTrashResourceObject.is_dir:14
#: yadisk.objects._resources.SyncTrashResourceObject.is_file:14
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:21
#: yadisk.objects._resources.SyncTrashResourceObject.remove:21
#: yadisk.objects._resources.SyncTrashResourceObject.restore:30
msgid "application doesn't have enough rights for this request"
msgstr "у приложения не хватает прав, чтобы выполнить данный запрос"

#: of yadisk._async_client.AsyncClient.copy:27 yadisk._client.Client.copy:28
msgid "cannot complete request due to lack of storage space"
msgstr "невозможно выполнить запрос из-за нехватки свободного места на Диске"

#: of yadisk._async_client.AsyncClient.copy:28
#: yadisk._async_client.AsyncClient.download:16
#: yadisk._async_client.AsyncClient.download_public:17
#: yadisk._async_client.AsyncClient.get_download_link:15
#: yadisk._async_client.AsyncClient.get_public_download_link:16
#: yadisk._async_client.AsyncClient.get_upload_link:17
#: yadisk._async_client.AsyncClient.get_upload_link_object:21
#: yadisk._async_client.AsyncClient.makedirs:18
#: yadisk._async_client.AsyncClient.mkdir:18
#: yadisk._async_client.AsyncClient.move:24
#: yadisk._async_client.AsyncClient.patch:17
#: yadisk._async_client.AsyncClient.publish:16
#: yadisk._async_client.AsyncClient.remove:25
#: yadisk._async_client.AsyncClient.remove_trash:21
#: yadisk._async_client.AsyncClient.rename:25
#: yadisk._async_client.AsyncClient.restore_trash:25
#: yadisk._async_client.AsyncClient.save_to_disk:26
#: yadisk._async_client.AsyncClient.unpublish:16
#: yadisk._async_client.AsyncClient.upload:20
#: yadisk._async_client.AsyncClient.upload_url:24 yadisk._client.Client.copy:29
#: yadisk._client.Client.download:17 yadisk._client.Client.download_public:18
#: yadisk._client.Client.get_download_link:16
#: yadisk._client.Client.get_public_download_link:17
#: yadisk._client.Client.get_upload_link:18
#: yadisk._client.Client.get_upload_link_object:22
#: yadisk._client.Client.makedirs:19 yadisk._client.Client.mkdir:19
#: yadisk._client.Client.move:25 yadisk._client.Client.patch:18
#: yadisk._client.Client.publish:17 yadisk._client.Client.remove:26
#: yadisk._client.Client.remove_trash:22 yadisk._client.Client.rename:26
#: yadisk._client.Client.restore_trash:26 yadisk._client.Client.save_to_disk:27
#: yadisk._client.Client.unpublish:17 yadisk._client.Client.upload:22
#: yadisk._client.Client.upload_url:25
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:21
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:30
#: yadisk.objects._resources.SyncTrashResourceObject.remove:22
#: yadisk.objects._resources.SyncTrashResourceObject.restore:31
msgid "resource is locked by another request"
msgstr "запрашиваемый ресурс заблокирован другой операцией"

#: of yadisk._async_client.AsyncClient.copy:29
#: yadisk._async_client.AsyncClient.get_upload_link:19
#: yadisk._async_client.AsyncClient.get_upload_link_object:23
#: yadisk._async_client.AsyncClient.save_to_disk:28
#: yadisk._async_client.AsyncClient.upload:21
#: yadisk._async_client.AsyncClient.upload_url:25 yadisk._client.Client.copy:30
#: yadisk._client.Client.get_upload_link:20
#: yadisk._client.Client.get_upload_link_object:24
#: yadisk._client.Client.save_to_disk:29 yadisk._client.Client.upload:23
#: yadisk._client.Client.upload_url:26
msgid "upload limit has been exceeded"
msgstr "достигнут лимит на загрузку файлов"

#: of yadisk._async_client.AsyncClient.copy:30
#: yadisk._async_client.AsyncClient.get_operation_status:13
#: yadisk._async_client.AsyncClient.move:25
#: yadisk._async_client.AsyncClient.remove:26
#: yadisk._async_client.AsyncClient.remove_trash:22
#: yadisk._async_client.AsyncClient.rename:27
#: yadisk._async_client.AsyncClient.restore_trash:26
#: yadisk._async_client.AsyncClient.save_to_disk:29
#: yadisk._async_client.AsyncClient.upload_url:26
#: yadisk._async_client.AsyncClient.wait_for_operation:17
#: yadisk._client.Client.copy:31 yadisk._client.Client.get_operation_status:14
#: yadisk._client.Client.move:26 yadisk._client.Client.remove:27
#: yadisk._client.Client.remove_trash:23 yadisk._client.Client.rename:28
#: yadisk._client.Client.restore_trash:27 yadisk._client.Client.save_to_disk:30
#: yadisk._client.Client.upload_url:27
#: yadisk._client.Client.wait_for_operation:18
#: yadisk.objects._operations.AsyncOperationLinkObject.get_status:12
#: yadisk.objects._operations.AsyncOperationLinkObject.wait:16
#: yadisk.objects._operations.SyncOperationLinkObject.get_status:13
#: yadisk.objects._operations.SyncOperationLinkObject.wait:17
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:22
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:31
#: yadisk.objects._resources.SyncTrashResourceObject.remove:23
#: yadisk.objects._resources.SyncTrashResourceObject.restore:32
msgid "requested operation was not found"
msgstr "указанная операция не найдена"

#: of yadisk._async_client.AsyncClient.copy:31
#: yadisk._async_client.AsyncClient.move:26
#: yadisk._async_client.AsyncClient.remove:27
#: yadisk._async_client.AsyncClient.remove_trash:23
#: yadisk._async_client.AsyncClient.rename:28
#: yadisk._async_client.AsyncClient.restore_trash:27
#: yadisk._async_client.AsyncClient.save_to_disk:30
#: yadisk._async_client.AsyncClient.upload_url:27
#: yadisk._async_client.AsyncClient.wait_for_operation:18
#: yadisk._client.Client.copy:32 yadisk._client.Client.move:27
#: yadisk._client.Client.remove:28 yadisk._client.Client.remove_trash:24
#: yadisk._client.Client.rename:29 yadisk._client.Client.restore_trash:28
#: yadisk._client.Client.save_to_disk:31 yadisk._client.Client.upload_url:28
#: yadisk._client.Client.wait_for_operation:19
#: yadisk.objects._operations.AsyncOperationLinkObject.wait:17
#: yadisk.objects._operations.SyncOperationLinkObject.wait:18
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:23
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:32
#: yadisk.objects._resources.SyncTrashResourceObject.remove:24
#: yadisk.objects._resources.SyncTrashResourceObject.restore:33
msgid "requested operation failed"
msgstr "не удалось совершить операцию"

#: of yadisk._async_client.AsyncClient.copy:32
#: yadisk._async_client.AsyncClient.move:27
#: yadisk._async_client.AsyncClient.remove:28
#: yadisk._async_client.AsyncClient.remove_trash:24
#: yadisk._async_client.AsyncClient.rename:29
#: yadisk._async_client.AsyncClient.restore_trash:28
#: yadisk._async_client.AsyncClient.save_to_disk:31
#: yadisk._async_client.AsyncClient.upload_url:28
#: yadisk._async_client.AsyncClient.wait_for_operation:19
#: yadisk._client.Client.copy:33 yadisk._client.Client.move:28
#: yadisk._client.Client.remove:29 yadisk._client.Client.remove_trash:25
#: yadisk._client.Client.rename:30 yadisk._client.Client.restore_trash:29
#: yadisk._client.Client.save_to_disk:32 yadisk._client.Client.upload_url:29
#: yadisk._client.Client.wait_for_operation:20
#: yadisk.objects._operations.AsyncOperationLinkObject.wait:18
#: yadisk.objects._operations.SyncOperationLinkObject.wait:19
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:24
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:33
#: yadisk.objects._resources.SyncTrashResourceObject.remove:25
#: yadisk.objects._resources.SyncTrashResourceObject.restore:34
msgid ""
"requested operation did not complete in specified time (when "
"`poll_timeout` is not `None`)"
msgstr ""
"указанная операция не завершилась в указанное время (когда `poll_timeout`"
" не `None`)"

#: of yadisk._async_client.AsyncClient.copy:36
#: yadisk._async_client.AsyncClient.move:31
#: yadisk._async_client.AsyncClient.rename:33
#: yadisk._async_client.AsyncClient.restore_trash:32
#: yadisk._async_client.AsyncClient.save_to_disk:35
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:37
msgid ":any:`AsyncResourceLinkObject` or :any:`AsyncOperationLinkObject`"
msgstr ":any:`AsyncResourceLinkObject` или :any:`AsyncOperationLinkObject`"

#: of yadisk._async_client.AsyncClient.download:1
#: yadisk._client.Client.download:1
msgid "Download the file."
msgstr "Скачивает файл."

#: of yadisk._async_client.AsyncClient.download:4
#: yadisk._async_client.AsyncClient.download_by_link:4
#: yadisk._async_client.AsyncClient.download_public:4
#: yadisk._client.Client.download:4 yadisk._client.Client.download_by_link:4
#: yadisk._client.Client.download_public:4
msgid "destination path or file-like object"
msgstr "путь назначения или файл-подобный объект"

#: of yadisk._async_client.AsyncClient.download:18
msgid ":any:`AsyncResourceLinkObject`, link to the source resource"
msgstr ":any:`AsyncResourceLinkObject`, ссылка на исходный ресурс"

#: of yadisk._async_client.AsyncClient.download_by_link:1
#: yadisk._client.Client.download_by_link:1
msgid "Download the file from the link."
msgstr "Скачивает файл по уже полученной ссылке."

#: of yadisk._async_client.AsyncClient.download_by_link:3
#: yadisk._client.Client.download_by_link:3
msgid "download link"
msgstr "ссылка для скачивания"

#: of yadisk._async_client.AsyncClient.download_public:1
#: yadisk._client.Client.download_public:1
msgid "Download the public resource."
msgstr "Скачивает публичный ресурс."

#: of yadisk._async_client.AsyncClient.download_public:3
#: yadisk._async_client.AsyncClient.get_public_download_link:3
#: yadisk._async_client.AsyncClient.get_public_meta:3
#: yadisk._async_client.AsyncClient.get_public_type:3
#: yadisk._async_client.AsyncClient.is_public_dir:3
#: yadisk._async_client.AsyncClient.is_public_file:3
#: yadisk._async_client.AsyncClient.public_exists:3
#: yadisk._async_client.AsyncClient.public_listdir:3
#: yadisk._async_client.AsyncClient.save_to_disk:5
msgid "public key or public URL of the resource"
msgstr "публичный ключ или URL к ресурсу"

#: of yadisk._async_client.AsyncClient.download_public:5
#: yadisk._async_client.AsyncClient.get_public_download_link:4
#: yadisk._async_client.AsyncClient.get_public_type:4
#: yadisk._async_client.AsyncClient.is_public_dir:4
#: yadisk._async_client.AsyncClient.is_public_file:4
#: yadisk._async_client.AsyncClient.public_exists:4
#: yadisk._client.Client.download_public:5
#: yadisk._client.Client.get_public_download_link:4
#: yadisk._client.Client.get_public_type:4
#: yadisk._client.Client.is_public_dir:4 yadisk._client.Client.is_public_file:4
#: yadisk._client.Client.public_exists:4
msgid "relative path to the resource within the public folder"
msgstr "относительный путь к ресурсу внутри публичной папки"

#: of yadisk._async_client.AsyncClient.download_public:19
msgid ":any:`AsyncPublicResourceLinkObject`"
msgstr ":any:`AsyncPublicResourceLinkObject`"

#: of yadisk._async_client.AsyncClient.exists:1 yadisk._client.Client.exists:1
msgid "Check whether `path` exists."
msgstr "Проверяет, существует ли `path`."

#: of yadisk._async_client.AsyncClient.exists:3
#: yadisk._async_client.AsyncClient.get_download_link:3
#: yadisk._async_client.AsyncClient.get_meta:3
#: yadisk._async_client.AsyncClient.get_type:3
#: yadisk._async_client.AsyncClient.is_dir:3
#: yadisk._async_client.AsyncClient.is_file:3
#: yadisk._async_client.AsyncClient.patch:3 yadisk._client.Client.exists:3
#: yadisk._client.Client.get_download_link:3 yadisk._client.Client.get_meta:3
#: yadisk._client.Client.get_type:3 yadisk._client.Client.is_dir:3
#: yadisk._client.Client.is_file:3 yadisk._client.Client.patch:3
msgid "path to the resource"
msgstr "путь к ресурсу"

#: of yadisk._async_client.AsyncClient.get_all_public_resources:1
#: yadisk._client.Client.get_all_public_resources:1
msgid "Get a list of all public resources."
msgstr "Получает список всех публичных ресурсов."

#: of yadisk._async_client.AsyncClient.get_all_public_resources:3
#: yadisk._async_client.AsyncClient.get_files:4
#: yadisk._async_client.AsyncClient.listdir:4
#: yadisk._async_client.AsyncClient.public_listdir:7
#: yadisk._async_client.AsyncClient.trash_listdir:4
#: yadisk._client.Client.get_all_public_resources:3
#: yadisk._client.Client.get_files:4 yadisk._client.Client.listdir:4
#: yadisk._client.Client.public_listdir:7 yadisk._client.Client.trash_listdir:4
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir:4
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:4
msgid "`int` or `None`, maximum number of returned items (`None` means unlimited)"
msgstr ""
"`int` или `None`, максимальное число возвращаемых элементов в списке "
"(`None` означает неограниченное число)"

#: of yadisk._async_client.AsyncClient.get_all_public_resources:4
#: yadisk._async_client.AsyncClient.get_files:3
#: yadisk._async_client.AsyncClient.get_public_resources:3
#: yadisk._client.Client.get_all_public_resources:4
#: yadisk._client.Client.get_files:3
#: yadisk._client.Client.get_public_resources:3
msgid "offset from the beginning of the list"
msgstr "отступ от начала списка"

#: of yadisk._async_client.AsyncClient.get_all_public_resources:5
#: yadisk._async_client.AsyncClient.get_last_uploaded:3
#: yadisk._async_client.AsyncClient.get_public_resources:4
#: yadisk._client.Client.get_all_public_resources:5
#: yadisk._client.Client.get_last_uploaded:3
#: yadisk._client.Client.get_public_resources:4
msgid "maximum number of elements in the list"
msgstr "максимальное число элементов в списке"

#: of yadisk._async_client.AsyncClient.get_all_public_resources:6
#: yadisk._async_client.AsyncClient.get_files:8
#: yadisk._async_client.AsyncClient.get_last_uploaded:5
#: yadisk._async_client.AsyncClient.get_meta:6
#: yadisk._async_client.AsyncClient.get_public_resources:5
#: yadisk._async_client.AsyncClient.get_trash_meta:6
#: yadisk._async_client.AsyncClient.listdir:7
#: yadisk._async_client.AsyncClient.public_listdir:10
#: yadisk._async_client.AsyncClient.trash_listdir:7
#: yadisk._client.Client.get_all_public_resources:6
#: yadisk._client.Client.get_files:8 yadisk._client.Client.get_last_uploaded:5
#: yadisk._client.Client.get_meta:6
#: yadisk._client.Client.get_public_resources:5
#: yadisk._client.Client.get_trash_meta:6 yadisk._client.Client.listdir:7
#: yadisk._client.Client.public_listdir:10
#: yadisk._client.Client.trash_listdir:7
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:6
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir:7
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:6
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:7
msgid "size of the file preview"
msgstr "размер превью файла"

#: of yadisk._async_client.AsyncClient.get_all_public_resources:7
#: yadisk._async_client.AsyncClient.get_files:9
#: yadisk._async_client.AsyncClient.get_last_uploaded:6
#: yadisk._async_client.AsyncClient.get_meta:7
#: yadisk._async_client.AsyncClient.get_public_resources:6
#: yadisk._async_client.AsyncClient.get_trash_meta:7
#: yadisk._async_client.AsyncClient.listdir:8
#: yadisk._async_client.AsyncClient.public_listdir:11
#: yadisk._async_client.AsyncClient.trash_listdir:8
#: yadisk._client.Client.get_all_public_resources:7
#: yadisk._client.Client.get_files:9 yadisk._client.Client.get_last_uploaded:6
#: yadisk._client.Client.get_meta:7
#: yadisk._client.Client.get_public_resources:6
#: yadisk._client.Client.get_trash_meta:7 yadisk._client.Client.listdir:8
#: yadisk._client.Client.public_listdir:11
#: yadisk._client.Client.trash_listdir:8
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:7
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir:8
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:7
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:8
msgid "`bool`, cut the preview to the size specified in the `preview_size`"
msgstr "`bool`, обрезает превью согласно размеру, заданному в `preview_size`"

#: of yadisk._async_client.AsyncClient.get_all_public_resources:8
#: yadisk._async_client.AsyncClient.get_public_resources:7
#: yadisk._client.Client.get_all_public_resources:8
#: yadisk._client.Client.get_public_resources:7
msgid "filter based on type of resources (\"file\" or \"dir\")"
msgstr "фильтр по типу ресурса (\"file\" или \"dir\")"

#: of yadisk._async_client.AsyncClient.get_all_public_resources:10
#: yadisk._async_client.AsyncClient.get_token_from_device_code:7
#: yadisk._async_client.AsyncClient.get_upload_link_object:9
#: yadisk._async_client.AsyncClient.wait_for_operation:8
#: yadisk._client.Client.check_token:4 yadisk._client.Client.copy:15
#: yadisk._client.Client.download:5 yadisk._client.Client.download_by_link:5
#: yadisk._client.Client.download_public:6 yadisk._client.Client.exists:4
#: yadisk._client.Client.get_all_public_resources:10
#: yadisk._client.Client.get_device_code:11
#: yadisk._client.Client.get_disk_info:4
#: yadisk._client.Client.get_download_link:4 yadisk._client.Client.get_files:11
#: yadisk._client.Client.get_last_uploaded:8 yadisk._client.Client.get_meta:10
#: yadisk._client.Client.get_operation_status:4
#: yadisk._client.Client.get_public_download_link:5
#: yadisk._client.Client.get_public_meta:13
#: yadisk._client.Client.get_public_resources:9
#: yadisk._client.Client.get_public_type:5 yadisk._client.Client.get_token:7
#: yadisk._client.Client.get_token_from_device_code:6
#: yadisk._client.Client.get_trash_meta:10
#: yadisk._client.Client.get_trash_type:4 yadisk._client.Client.get_type:4
#: yadisk._client.Client.get_upload_link:5
#: yadisk._client.Client.get_upload_link_object:9
#: yadisk._client.Client.is_dir:4 yadisk._client.Client.is_file:4
#: yadisk._client.Client.is_public_dir:5 yadisk._client.Client.is_public_file:5
#: yadisk._client.Client.is_trash_dir:4 yadisk._client.Client.is_trash_file:4
#: yadisk._client.Client.listdir:10 yadisk._client.Client.makedirs:6
#: yadisk._client.Client.mkdir:5 yadisk._client.Client.move:12
#: yadisk._client.Client.patch:6 yadisk._client.Client.public_exists:5
#: yadisk._client.Client.public_listdir:13 yadisk._client.Client.publish:5
#: yadisk._client.Client.refresh_token:4 yadisk._client.Client.remove:13
#: yadisk._client.Client.remove_trash:10 yadisk._client.Client.rename:13
#: yadisk._client.Client.restore_trash:13 yadisk._client.Client.revoke_token:4
#: yadisk._client.Client.save_to_disk:15 yadisk._client.Client.trash_exists:4
#: yadisk._client.Client.trash_listdir:10 yadisk._client.Client.unpublish:5
#: yadisk._client.Client.upload:8 yadisk._client.Client.upload_by_link:8
#: yadisk._client.Client.upload_url:11
#: yadisk._client.Client.wait_for_operation:8
#: yadisk.objects._operations.AsyncOperationLinkObject.get_status:3
#: yadisk.objects._operations.AsyncOperationLinkObject.wait:7
#: yadisk.objects._operations.SyncOperationLinkObject.get_status:3
#: yadisk.objects._operations.SyncOperationLinkObject.wait:7
#: yadisk.objects._resources.AsyncTrashResourceObject.exists:4
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:10
#: yadisk.objects._resources.AsyncTrashResourceObject.get_type:4
#: yadisk.objects._resources.AsyncTrashResourceObject.is_dir:4
#: yadisk.objects._resources.AsyncTrashResourceObject.is_file:4
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir:10
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:10
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:18
#: yadisk.objects._resources.SyncTrashResourceObject.exists:4
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:10
#: yadisk.objects._resources.SyncTrashResourceObject.get_type:4
#: yadisk.objects._resources.SyncTrashResourceObject.is_dir:4
#: yadisk.objects._resources.SyncTrashResourceObject.is_file:4
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:10
#: yadisk.objects._resources.SyncTrashResourceObject.remove:10
#: yadisk.objects._resources.SyncTrashResourceObject.restore:18
msgid "`float` or `tuple`, request timeout"
msgstr "`float` или `tuple`, таймаут запроса"

#: of yadisk._async_client.AsyncClient.get_all_public_resources:15
#: yadisk._client.Client.check_token:9 yadisk._client.Client.copy:20
#: yadisk._client.Client.download:10 yadisk._client.Client.download_by_link:10
#: yadisk._client.Client.download_public:11 yadisk._client.Client.exists:9
#: yadisk._client.Client.get_all_public_resources:15
#: yadisk._client.Client.get_device_code:16
#: yadisk._client.Client.get_disk_info:9
#: yadisk._client.Client.get_download_link:9 yadisk._client.Client.get_files:16
#: yadisk._client.Client.get_last_uploaded:13 yadisk._client.Client.get_meta:15
#: yadisk._client.Client.get_operation_status:9
#: yadisk._client.Client.get_public_download_link:10
#: yadisk._client.Client.get_public_meta:18
#: yadisk._client.Client.get_public_resources:14
#: yadisk._client.Client.get_public_type:10 yadisk._client.Client.get_token:12
#: yadisk._client.Client.get_token_from_device_code:11
#: yadisk._client.Client.get_trash_meta:15
#: yadisk._client.Client.get_trash_type:9 yadisk._client.Client.get_type:9
#: yadisk._client.Client.get_upload_link:10
#: yadisk._client.Client.get_upload_link_object:14
#: yadisk._client.Client.is_dir:9 yadisk._client.Client.is_file:9
#: yadisk._client.Client.is_public_dir:10
#: yadisk._client.Client.is_public_file:10 yadisk._client.Client.is_trash_dir:9
#: yadisk._client.Client.is_trash_file:9 yadisk._client.Client.listdir:15
#: yadisk._client.Client.makedirs:11 yadisk._client.Client.mkdir:10
#: yadisk._client.Client.move:17 yadisk._client.Client.patch:11
#: yadisk._client.Client.public_exists:10
#: yadisk._client.Client.public_listdir:18 yadisk._client.Client.publish:10
#: yadisk._client.Client.refresh_token:9 yadisk._client.Client.remove:18
#: yadisk._client.Client.remove_trash:15 yadisk._client.Client.rename:18
#: yadisk._client.Client.restore_trash:18 yadisk._client.Client.revoke_token:9
#: yadisk._client.Client.save_to_disk:20 yadisk._client.Client.trash_exists:9
#: yadisk._client.Client.trash_listdir:15 yadisk._client.Client.unpublish:10
#: yadisk._client.Client.upload:13 yadisk._client.Client.upload_by_link:13
#: yadisk._client.Client.upload_url:16
#: yadisk._client.Client.wait_for_operation:13
#: yadisk.objects._operations.SyncOperationLinkObject.get_status:8
#: yadisk.objects._operations.SyncOperationLinkObject.wait:12
#: yadisk.objects._resources.SyncTrashResourceObject.exists:9
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:15
#: yadisk.objects._resources.SyncTrashResourceObject.get_type:9
#: yadisk.objects._resources.SyncTrashResourceObject.is_dir:9
#: yadisk.objects._resources.SyncTrashResourceObject.is_file:9
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:15
#: yadisk.objects._resources.SyncTrashResourceObject.remove:15
#: yadisk.objects._resources.SyncTrashResourceObject.restore:23
msgid "`dict`, additional parameters for :any:`RequestsSession`"
msgstr "`dict`, Дополнительные параметры для :any:`RequestsSession`"

#: of yadisk._async_client.AsyncClient.get_all_public_resources:16
#: yadisk._client.Client.check_token:10 yadisk._client.Client.copy:21
#: yadisk._client.Client.download:11 yadisk._client.Client.download_by_link:11
#: yadisk._client.Client.download_public:12 yadisk._client.Client.exists:10
#: yadisk._client.Client.get_all_public_resources:16
#: yadisk._client.Client.get_device_code:17
#: yadisk._client.Client.get_disk_info:10
#: yadisk._client.Client.get_download_link:10
#: yadisk._client.Client.get_files:17
#: yadisk._client.Client.get_last_uploaded:14 yadisk._client.Client.get_meta:16
#: yadisk._client.Client.get_operation_status:10
#: yadisk._client.Client.get_public_download_link:11
#: yadisk._client.Client.get_public_meta:19
#: yadisk._client.Client.get_public_resources:15
#: yadisk._client.Client.get_public_type:11 yadisk._client.Client.get_token:13
#: yadisk._client.Client.get_token_from_device_code:12
#: yadisk._client.Client.get_trash_meta:16
#: yadisk._client.Client.get_trash_type:10 yadisk._client.Client.get_type:10
#: yadisk._client.Client.get_upload_link:11
#: yadisk._client.Client.get_upload_link_object:15
#: yadisk._client.Client.is_dir:10 yadisk._client.Client.is_file:10
#: yadisk._client.Client.is_public_dir:11
#: yadisk._client.Client.is_public_file:11
#: yadisk._client.Client.is_trash_dir:10 yadisk._client.Client.is_trash_file:10
#: yadisk._client.Client.listdir:16 yadisk._client.Client.makedirs:12
#: yadisk._client.Client.mkdir:11 yadisk._client.Client.move:18
#: yadisk._client.Client.patch:12 yadisk._client.Client.public_exists:11
#: yadisk._client.Client.public_listdir:19 yadisk._client.Client.publish:11
#: yadisk._client.Client.refresh_token:10 yadisk._client.Client.remove:19
#: yadisk._client.Client.remove_trash:16 yadisk._client.Client.rename:19
#: yadisk._client.Client.restore_trash:19 yadisk._client.Client.revoke_token:10
#: yadisk._client.Client.save_to_disk:21 yadisk._client.Client.trash_exists:10
#: yadisk._client.Client.trash_listdir:16 yadisk._client.Client.unpublish:11
#: yadisk._client.Client.upload:14 yadisk._client.Client.upload_by_link:14
#: yadisk._client.Client.upload_url:17
#: yadisk._client.Client.wait_for_operation:14
#: yadisk.objects._operations.SyncOperationLinkObject.get_status:9
#: yadisk.objects._operations.SyncOperationLinkObject.wait:13
#: yadisk.objects._resources.SyncTrashResourceObject.exists:10
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:16
#: yadisk.objects._resources.SyncTrashResourceObject.get_type:10
#: yadisk.objects._resources.SyncTrashResourceObject.is_dir:10
#: yadisk.objects._resources.SyncTrashResourceObject.is_file:10
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:16
#: yadisk.objects._resources.SyncTrashResourceObject.remove:16
#: yadisk.objects._resources.SyncTrashResourceObject.restore:24
msgid "`dict`, additional parameters for :any:`HTTPXSession`"
msgstr "`dict`, дополнительные параметры для :any:`HTTPXSession`"

#: of yadisk._async_client.AsyncClient.get_all_public_resources:17
#: yadisk._client.Client.check_token:11 yadisk._client.Client.copy:22
#: yadisk._client.Client.download:12 yadisk._client.Client.download_by_link:12
#: yadisk._client.Client.download_public:13 yadisk._client.Client.exists:11
#: yadisk._client.Client.get_all_public_resources:17
#: yadisk._client.Client.get_device_code:18
#: yadisk._client.Client.get_disk_info:11
#: yadisk._client.Client.get_download_link:11
#: yadisk._client.Client.get_files:18
#: yadisk._client.Client.get_last_uploaded:15 yadisk._client.Client.get_meta:17
#: yadisk._client.Client.get_operation_status:11
#: yadisk._client.Client.get_public_download_link:12
#: yadisk._client.Client.get_public_meta:20
#: yadisk._client.Client.get_public_resources:16
#: yadisk._client.Client.get_public_type:12 yadisk._client.Client.get_token:14
#: yadisk._client.Client.get_token_from_device_code:13
#: yadisk._client.Client.get_trash_meta:17
#: yadisk._client.Client.get_trash_type:11 yadisk._client.Client.get_type:11
#: yadisk._client.Client.get_upload_link:12
#: yadisk._client.Client.get_upload_link_object:16
#: yadisk._client.Client.is_dir:11 yadisk._client.Client.is_file:11
#: yadisk._client.Client.is_public_dir:12
#: yadisk._client.Client.is_public_file:12
#: yadisk._client.Client.is_trash_dir:11 yadisk._client.Client.is_trash_file:11
#: yadisk._client.Client.listdir:17 yadisk._client.Client.makedirs:13
#: yadisk._client.Client.mkdir:12 yadisk._client.Client.move:19
#: yadisk._client.Client.patch:13 yadisk._client.Client.public_exists:12
#: yadisk._client.Client.public_listdir:20 yadisk._client.Client.publish:12
#: yadisk._client.Client.refresh_token:11 yadisk._client.Client.remove:20
#: yadisk._client.Client.remove_trash:17 yadisk._client.Client.rename:20
#: yadisk._client.Client.restore_trash:20 yadisk._client.Client.revoke_token:11
#: yadisk._client.Client.save_to_disk:22 yadisk._client.Client.trash_exists:11
#: yadisk._client.Client.trash_listdir:17 yadisk._client.Client.unpublish:12
#: yadisk._client.Client.upload:15 yadisk._client.Client.upload_by_link:15
#: yadisk._client.Client.upload_url:18
#: yadisk._client.Client.wait_for_operation:15
#: yadisk.objects._operations.SyncOperationLinkObject.get_status:10
#: yadisk.objects._operations.SyncOperationLinkObject.wait:14
#: yadisk.objects._resources.SyncTrashResourceObject.exists:11
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:17
#: yadisk.objects._resources.SyncTrashResourceObject.get_type:11
#: yadisk.objects._resources.SyncTrashResourceObject.is_dir:11
#: yadisk.objects._resources.SyncTrashResourceObject.is_file:11
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:17
#: yadisk.objects._resources.SyncTrashResourceObject.remove:17
#: yadisk.objects._resources.SyncTrashResourceObject.restore:25
msgid "`dict`, additional options for :any:`PycURLSession`"
msgstr "`duct`, дополнительные опции для :any:`PycURLSession`"

#: of yadisk._async_client.AsyncClient.get_all_public_resources:22
#: yadisk._async_client.AsyncClient.public_listdir:26
msgid "async generator of :any:`AsyncPublicResourceObject`"
msgstr "асинхронный генератор :any:`AsyncPublicResourceObject`"

#: of yadisk._async_client.AsyncClient.get_auth_url:1
#: yadisk._client.Client.get_auth_url:1
msgid ""
"Get authentication URL for the user to go to. This method doesn't send "
"any HTTP requests and merely constructs the URL."
msgstr ""
"Получает URL для аутентификации для пользователя. Данный метод не "
"отправляет никаких HTTP запросов."

#: of yadisk._async_client.AsyncClient.get_auth_url:4
#: yadisk._client.Client.get_auth_url:4
msgid ""
"response type (\"code\" to get the confirmation code or \"token\" to get "
"the token automatically)"
msgstr ""
"тип ответа (\"code\", чтобы получить код подтверждения или \"token\", "
"чтобы получить токен автоматически)"

#: of yadisk._async_client.AsyncClient.get_auth_url:5
#: yadisk._async_client.AsyncClient.get_code_url:5
#: yadisk._client.Client.get_auth_url:5 yadisk._client.Client.get_code_url:5
msgid "unique device ID, must be between 6 and 50 characters"
msgstr "уникальный идентификатор устройства, от 6 до 50 символов"

#: of yadisk._async_client.AsyncClient.get_auth_url:6
#: yadisk._async_client.AsyncClient.get_code_url:6
#: yadisk._async_client.AsyncClient.get_device_code:9
#: yadisk._async_client.AsyncClient.get_token_from_device_code:5
#: yadisk._client.Client.get_auth_url:6 yadisk._client.Client.get_code_url:6
#: yadisk._client.Client.get_device_code:8 yadisk._client.Client.get_token:5
#: yadisk._client.Client.get_token_from_device_code:5
msgid "device name, should not be longer than 100 characters"
msgstr "имя устройства, не более 100 символов"

#: of yadisk._async_client.AsyncClient.get_auth_url:7
#: yadisk._async_client.AsyncClient.get_code_url:7
#: yadisk._client.Client.get_auth_url:7 yadisk._client.Client.get_code_url:7
msgid ""
"the URL to redirect the user to after they allow access to the app, by "
"default, the first redirect URI specified in the app settings is used"
msgstr ""
"URL на который пользователь будет перенаправлен после предоставления "
"доступа приложению, по умолчанию используется первый URI, указанный в "
"настройках приложения"

#: of yadisk._async_client.AsyncClient.get_auth_url:10
#: yadisk._async_client.AsyncClient.get_code_url:10
#: yadisk._client.Client.get_auth_url:10 yadisk._client.Client.get_code_url:10
msgid "doesn't do anything, kept for compatibility"
msgstr "ничего не делает, оставлен для совместимости"

#: of yadisk._async_client.AsyncClient.get_auth_url:11
#: yadisk._async_client.AsyncClient.get_code_url:11
#: yadisk._client.Client.get_auth_url:11 yadisk._client.Client.get_code_url:11
msgid "username or email for the account the token is being requested for"
msgstr "username или email аккаунта, для которого будет получен токен"

#: of yadisk._async_client.AsyncClient.get_auth_url:12
#: yadisk._async_client.AsyncClient.get_code_url:12
#: yadisk._async_client.AsyncClient.get_device_code:10
#: yadisk._client.Client.get_auth_url:12 yadisk._client.Client.get_code_url:12
#: yadisk._client.Client.get_device_code:9
msgid "`str`, list of permissions for the application"
msgstr "`str`, список разрешений для приложения"

#: of yadisk._async_client.AsyncClient.get_auth_url:13
#: yadisk._async_client.AsyncClient.get_code_url:13
#: yadisk._async_client.AsyncClient.get_device_code:11
#: yadisk._client.Client.get_auth_url:13 yadisk._client.Client.get_code_url:13
#: yadisk._client.Client.get_device_code:10
msgid "`str`, list of optional permissions for the application"
msgstr "`str`, список опциональных разрешений для приложения"

#: of yadisk._async_client.AsyncClient.get_auth_url:14
#: yadisk._async_client.AsyncClient.get_code_url:14
#: yadisk._client.Client.get_auth_url:14 yadisk._client.Client.get_code_url:14
msgid ""
"if True, user will be required to confirm access to the account even if "
"the user has already granted access for the application"
msgstr ""
"Если `True`, пользователь должен будет разрешить доступ к аккаунту, даже "
"если он уже это сделал до этого"

#: of yadisk._async_client.AsyncClient.get_auth_url:16
#: yadisk._async_client.AsyncClient.get_code_url:16
#: yadisk._client.Client.get_auth_url:16 yadisk._client.Client.get_code_url:16
msgid ""
"The state string, which Yandex.OAuth returns without any changes (<= 1024"
" characters)"
msgstr ""
"Строка состояния, которую Яндекс.OAuth возвращает без изменений (<= 1024 "
"символов)"

#: of yadisk._async_client.AsyncClient.get_auth_url:17
#: yadisk._async_client.AsyncClient.get_code_url:17
#: yadisk._client.Client.get_auth_url:17 yadisk._client.Client.get_code_url:17
msgid ""
"string derived from the generated :code:`code_verifier` value using one "
"of the two possible transformations (plain or S256)"
msgstr ""
"строка, полученная из сгенерированного значения :code:`code_verifier` с "
"помощью одного из двух возможных преобразований (plain или S256)"

#: of yadisk._async_client.AsyncClient.get_auth_url:19
#: yadisk._async_client.AsyncClient.get_code_url:19
#: yadisk._client.Client.get_auth_url:19 yadisk._client.Client.get_code_url:19
msgid ""
"specifies what function was used to transform the :code:`code_verifier` "
"value to :code:`code_challenge`, allowed values are :code:`\"plain\"` and"
" :code:`\"S256\"` (recommended). If :code:`\"S256\"` is used, "
":code:`code_challenge` must be produced by hashing the "
":code:`code_verifier` value and encoding it to base64"
msgstr ""
"Указывает функцию, которая будет использована для преобразования значения"
" :code:`code_verifier`, возможные значения: :code:`\"plain\"` и "
":code:`\"S256\"` (рекомендуется). Если используется :code:`\"S256\"`, "
"значение :code:`code_challenge` должно быть получено путём хэширования "
"значения :code:`code_verifier` и кодирования в base64"

#: of yadisk._async_client.AsyncClient.get_auth_url:25
#: yadisk._async_client.AsyncClient.get_code_url:25
#: yadisk._client.Client.get_auth_url:25 yadisk._client.Client.get_code_url:25
msgid "invalid arguments were passed"
msgstr "были переданы неправильные аргументы"

#: of yadisk._async_client.AsyncClient.get_auth_url:27
#: yadisk._async_client.AsyncClient.get_code_url:27
#: yadisk._client.Client.get_auth_url:27 yadisk._client.Client.get_code_url:27
msgid "authentication URL"
msgstr "URL для аутентификации"

#: of yadisk._async_client.AsyncClient.get_code_url:1
#: yadisk._client.Client.get_code_url:1
msgid ""
"Get the URL for the user to get the confirmation code. The confirmation "
"code can later be used to get the token. This method doesn't send any "
"HTTP requests and merely constructs the URL."
msgstr ""
"Получает URL для получения пользователем кода подтверждения. Он может "
"быть использован для получения токена. Данный метод не отправляет никаких"
" HTTP запросов."

#: of yadisk._async_client.AsyncClient.get_device_code:1
msgid ""
"This request is used for authorization using the Yandex OAuth page. In "
"this case the user must enter the verification code (:code:`user_code`) "
"in the browser on the Yandex OAuth page. After the user has entered the "
"code on the OAuth page, the application can exchange the "
":code:`device_code` for the token using the "
":any:`AsyncClient.get_token_from_device_code()`."
msgstr ""
"Данный запрос используется для авторизации с помощью страницы Яндекс "
"OAuth. В данном случае пользователь должен ввести код подтверждения "
"(:code:`user_code`) в браузере на странице Яндекс OAuth. После того как "
"пользователь ввёл код, приложение может обменять :code:`device_code` на "
"токен с помощью метода :any:`AsyncClient.get_token_from_device_code()`."

#: of yadisk._async_client.AsyncClient.get_device_code:8
#: yadisk._async_client.AsyncClient.get_token:4
#: yadisk._async_client.AsyncClient.get_token_from_device_code:4
#: yadisk._client.Client.get_device_code:7 yadisk._client.Client.get_token:4
#: yadisk._client.Client.get_token_from_device_code:4
msgid "unique device ID (between 6 and 50 characters)"
msgstr "уникальный идентификатор устройства (между 6 и 50 символами)"

#: of yadisk._async_client.AsyncClient.get_device_code:21
#: yadisk._async_client.AsyncClient.get_token:17
#: yadisk._async_client.AsyncClient.get_token_from_device_code:19
#: yadisk._async_client.AsyncClient.refresh_token:15
#: yadisk._async_client.AsyncClient.revoke_token:14
#: yadisk._client.Client.get_token:19
#: yadisk._client.Client.get_token_from_device_code:19
#: yadisk._client.Client.refresh_token:16 yadisk._client.Client.revoke_token:15
msgid "invalid client ID or client secret"
msgstr "неправильный идентификатор или пароль приложения"

#: of yadisk._async_client.AsyncClient.get_device_code:22
#: yadisk._async_client.AsyncClient.get_token:18
#: yadisk._async_client.AsyncClient.get_token_from_device_code:20
#: yadisk._async_client.AsyncClient.refresh_token:16
#: yadisk._async_client.AsyncClient.revoke_token:17
#: yadisk._client.Client.get_device_code:22 yadisk._client.Client.get_token:20
#: yadisk._client.Client.get_token_from_device_code:20
#: yadisk._client.Client.refresh_token:17 yadisk._client.Client.revoke_token:18
msgid "invalid request parameters"
msgstr "неправильные параметры запроса"

#: of yadisk._async_client.AsyncClient.get_device_code:24
#: yadisk._client.Client.get_device_code:24
msgid ""
":any:`DeviceCodeObject` containing :code:`user_code` and "
":code:`device_code`"
msgstr ""
":any:`DeviceCodeObject`, содержащий :code:`user_code` и "
":code:`device_code`"

#: of yadisk._async_client.AsyncClient.get_disk_info:1
#: yadisk._client.Client.get_disk_info:1
msgid "Get disk information."
msgstr "Получает информацию о диске."

#: of yadisk._async_client.AsyncClient.get_disk_info:15
#: yadisk._client.Client.get_disk_info:16
msgid ":any:`DiskInfoObject`"
msgstr ":any:`DiskInfoObject`"

#: of yadisk._async_client.AsyncClient.get_download_link:1
#: yadisk._client.Client.get_download_link:1
msgid "Get a download link for a file (or a directory)."
msgstr "Получает ссылку на скачивание файла (или папки)."

#: of yadisk._async_client.AsyncClient.get_download_link:17
#: yadisk._async_client.AsyncClient.get_public_download_link:18
#: yadisk._async_client.AsyncClient.get_upload_link:21
#: yadisk._client.Client.get_download_link:18
#: yadisk._client.Client.get_public_download_link:19
#: yadisk._client.Client.get_upload_link:22
#: yadisk.objects._yadisk_object.YaDiskObject.remove_alias:3
#: yadisk.objects._yadisk_object.YaDiskObject.remove_field:3
#: yadisk.objects._yadisk_object.YaDiskObject.set_field_type:3
msgid "`str`"
msgstr "`str`"

#: of yadisk._async_client.AsyncClient.get_files:1
#: yadisk._client.Client.get_files:1
msgid "Get a flat list of all files (that doesn't include directories)."
msgstr "Получить плоский список всех файлов (без папок)."

#: of yadisk._async_client.AsyncClient.get_files:5
#: yadisk._client.Client.get_files:5
msgid "number of list elements to be included in each response"
msgstr "максимальное количество элементов списка в каждом запросе"

#: of yadisk._async_client.AsyncClient.get_files:6
#: yadisk._async_client.AsyncClient.get_last_uploaded:4
#: yadisk._client.Client.get_files:6 yadisk._client.Client.get_last_uploaded:4
msgid "type of files to include in the list"
msgstr "тип файлов, которые будут включены в список"

#: of yadisk._async_client.AsyncClient.get_files:7
#: yadisk._async_client.AsyncClient.get_meta:8
#: yadisk._async_client.AsyncClient.get_public_meta:9
#: yadisk._async_client.AsyncClient.get_trash_meta:8
#: yadisk._client.Client.get_files:7 yadisk._client.Client.get_meta:8
#: yadisk._client.Client.get_public_meta:9
#: yadisk._client.Client.get_trash_meta:8
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:8
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:8
msgid "`str`, field to be used as a key to sort children resources"
msgstr "`str`, поле используемое для сортировки вложенных ресурсов"

#: of yadisk._async_client.AsyncClient.get_files:22
#: yadisk._async_client.AsyncClient.get_last_uploaded:19
#: yadisk._async_client.AsyncClient.listdir:23
msgid "async generator of :any:`AsyncResourceObject`"
msgstr "асинхронный генератор :any:`AsyncResourceObject`"

#: of yadisk._async_client.AsyncClient.get_last_uploaded:1
#: yadisk._client.Client.get_last_uploaded:1
msgid "Get the list of latest uploaded files sorted by upload date."
msgstr ""
"Получает список последних загруженных файлов, отсортированный по дате "
"загрузки."

#: of yadisk._async_client.AsyncClient.get_meta:1
#: yadisk._client.Client.get_meta:1
msgid "Get meta information about a file/directory."
msgstr "Получает мета-информацию о ресурсе."

#: of yadisk._async_client.AsyncClient.get_meta:4
#: yadisk._async_client.AsyncClient.get_trash_meta:4
#: yadisk._async_client.AsyncClient.listdir:5
#: yadisk._async_client.AsyncClient.public_listdir:8
#: yadisk._async_client.AsyncClient.trash_listdir:5
#: yadisk._client.Client.get_meta:4 yadisk._client.Client.get_trash_meta:4
#: yadisk._client.Client.listdir:5 yadisk._client.Client.public_listdir:8
#: yadisk._client.Client.trash_listdir:5
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:4
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir:5
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:4
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:5
msgid "number of children resources to be included in the response"
msgstr "количество ресурсов в папке, которые будут включены в ответ"

#: of yadisk._async_client.AsyncClient.get_meta:5
#: yadisk._async_client.AsyncClient.get_trash_meta:5
#: yadisk._async_client.AsyncClient.listdir:6
#: yadisk._async_client.AsyncClient.public_listdir:9
#: yadisk._async_client.AsyncClient.trash_listdir:6
#: yadisk._client.Client.get_meta:5 yadisk._client.Client.get_trash_meta:5
#: yadisk._client.Client.listdir:6 yadisk._client.Client.public_listdir:9
#: yadisk._client.Client.trash_listdir:6
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:5
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir:6
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:5
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:6
msgid "number of children resources to be skipped in the response"
msgstr "количество ресурсов в папке, которые будут пропущены"

#: of yadisk._async_client.AsyncClient.get_meta:22
#: yadisk._async_client.AsyncClient.patch:19
msgid ":any:`AsyncResourceObject`"
msgstr ":any:`AsyncResourceObject`"

#: of yadisk._async_client.AsyncClient.get_operation_status:1
#: yadisk._client.Client.get_operation_status:1
#: yadisk.objects._operations.AsyncOperationLinkObject.get_status:1
#: yadisk.objects._operations.SyncOperationLinkObject.get_status:1
msgid "Get operation status."
msgstr "Получает статус операции."

#: of yadisk._async_client.AsyncClient.get_operation_status:3
#: yadisk._async_client.AsyncClient.wait_for_operation:4
#: yadisk._client.Client.get_operation_status:3
#: yadisk._client.Client.wait_for_operation:4
msgid "ID of the operation or a link"
msgstr "идентификатор операции или ссылка на нее"

#: of yadisk._async_client.AsyncClient.get_operation_status:15
#: yadisk._client.Client.get_operation_status:16
#: yadisk.objects._operations.AsyncOperationLinkObject.get_status:14
#: yadisk.objects._operations.SyncOperationLinkObject.get_status:15
msgid ""
"`str`, :code:`\"in-progress\"` indicates that the operation is currently "
"running, :code:`\"success\"` indicates that the operation was successful,"
" :code:`\"failed\"` means that the operation failed"
msgstr ""
"`str`, :code:`\"in-progress\"` означает, что операция в процессе, "
":code:`\"success\"` означает, что операция успешно завершилась, "
":code:`\"failed\"` означает, что операция завершилась с ошибкой"

#: of yadisk._async_client.AsyncClient.get_public_download_link:1
#: yadisk._client.Client.get_public_download_link:1
msgid "Get a download link for a public resource."
msgstr "Получает ссылку на скачивание публичного ресурса."

#: of yadisk._async_client.AsyncClient.get_public_meta:1
#: yadisk._client.Client.get_public_meta:1
msgid "Get meta-information about a public resource."
msgstr "Получает мета-информацию о публичном ресурсе."

#: of yadisk._async_client.AsyncClient.get_public_meta:4
#: yadisk._client.Client.get_public_meta:4
msgid ""
"relative path to a resource in a public folder. By specifying the key of "
"the published folder in `public_key`, you can request metainformation for"
" any resource in the folder."
msgstr ""
"относительный путь к ресурсу внутри публичной папки. Указывая ключ "
"опубликованной папки через `public_key`, вы можете запросить "
"метаинформацию любого ресурса внутри неё."

#: of yadisk._async_client.AsyncClient.get_public_meta:7
#: yadisk._client.Client.get_public_meta:7
msgid "offset from the beginning of the list of nested resources"
msgstr "отступ от начала списка вложенных ресурсов"

#: of yadisk._async_client.AsyncClient.get_public_meta:8
#: yadisk._client.Client.get_public_meta:8
msgid "maximum number of nested elements to be included in the list"
msgstr "максимальное количество элементов списка вложенных ресурсов"

#: of yadisk._async_client.AsyncClient.get_public_meta:10
#: yadisk._client.Client.get_public_meta:10
msgid "file preview size"
msgstr "размер превью файла"

#: of yadisk._async_client.AsyncClient.get_public_meta:11
#: yadisk._client.Client.get_public_meta:11
msgid "`bool`, allow preview crop"
msgstr "`bool`, разрешить обрезку превью"

#: of yadisk._async_client.AsyncClient.get_public_meta:25
msgid ":any:`AsyncPublicResourceObject`"
msgstr ":any:`AsyncPublicResourceObject`"

#: of yadisk._async_client.AsyncClient.get_public_resources:1
#: yadisk._client.Client.get_public_resources:1
msgid "Get a list of public resources."
msgstr "Получает список публичных ресурсов."

#: of yadisk._async_client.AsyncClient.get_public_resources:20
msgid ":any:`AsyncPublicResourcesListObject`"
msgstr ":any:`AsyncPublicResourcesListObject`"

#: of yadisk._async_client.AsyncClient.get_public_type:1
#: yadisk._client.Client.get_public_type:1
msgid "Get public resource type."
msgstr "Получает тип публичного ресурса."

#: of yadisk._async_client.AsyncClient.get_public_type:17
#: yadisk._async_client.AsyncClient.get_trash_type:16
#: yadisk._async_client.AsyncClient.get_type:16
#: yadisk._client.Client.get_public_type:18
#: yadisk._client.Client.get_trash_type:17 yadisk._client.Client.get_type:17
#: yadisk.objects._resources.AsyncTrashResourceObject.get_type:16
#: yadisk.objects._resources.SyncTrashResourceObject.get_type:17
msgid "\"file\" or \"dir\""
msgstr "\"file\" или \"dir\""

#: of yadisk._async_client.AsyncClient.get_token:1
#: yadisk._client.Client.get_token:1
msgid "Get a new token."
msgstr "Получает новый токен."

#: of yadisk._async_client.AsyncClient.get_token:3
#: yadisk._client.Client.get_token:3
msgid "confirmation code"
msgstr "код подтверждения"

#: of yadisk._async_client.AsyncClient.get_token:5
#: yadisk._async_client.AsyncClient.get_token_from_device_code:6
#: yadisk._client.Client.get_token:6
msgid "`str`, verifier code, used with the PKCE authorization flow"
msgstr "`str`, код верификатора, используемый при авторизации с PKCE"

#: of yadisk._async_client.AsyncClient.get_token:15
#: yadisk._client.Client.get_token:17
msgid "confirmation code has invalid format"
msgstr "неправильный формат кода подтверждения"

#: of yadisk._async_client.AsyncClient.get_token:16
#: yadisk._client.Client.get_token:18
msgid "invalid or expired confirmation code"
msgstr "неправильный или истекший код"

#: of yadisk._async_client.AsyncClient.get_token:20
#: yadisk._async_client.AsyncClient.get_token_from_device_code:22
#: yadisk._async_client.AsyncClient.refresh_token:18
#: yadisk._client.Client.get_token:22
#: yadisk._client.Client.get_token_from_device_code:22
#: yadisk._client.Client.refresh_token:19
msgid ":any:`TokenObject`"
msgstr ":any:`TokenObject`"

#: of yadisk._async_client.AsyncClient.get_token_from_device_code:1
msgid ""
"Get a new token from a device code, previously obtained with "
":any:`AsyncClient.get_device_code()`."
msgstr ""
"Получает новый токен с помощью кода устройства (device_code), полученного"
" с помощью :any:`AsyncClient.get_device_code()`"

#: of yadisk._async_client.AsyncClient.get_token_from_device_code:3
msgid "device code, obtained from :any:`AsyncClient.get_device_code()`"
msgstr "код устройства, полученный с помощью :any:`AsyncClient.get_device_code()`"

#: of yadisk._async_client.AsyncClient.get_token_from_device_code:16
#: yadisk._client.Client.get_token_from_device_code:16
msgid "user has not authorized the application yet"
msgstr "пользователь ещё не авторизовал приложение"

#: of yadisk._async_client.AsyncClient.get_token_from_device_code:17
#: yadisk._client.Client.get_token_from_device_code:17
msgid ":code:`device_code` has invalid format"
msgstr "неправильный формат :code:`device_code`"

#: of yadisk._async_client.AsyncClient.get_token_from_device_code:18
#: yadisk._client.Client.get_token_from_device_code:18
msgid "invalid or expired :code:`device_code`"
msgstr "неправильный или истекший :code:`device_code`"

#: of yadisk._async_client.AsyncClient.get_trash_meta:1
#: yadisk._client.Client.get_trash_meta:1
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:1
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:1
msgid "Get meta information about a trash resource."
msgstr "Получает мета-информацию о ресурсе корзины."

#: of yadisk._async_client.AsyncClient.get_trash_meta:3
#: yadisk._async_client.AsyncClient.get_trash_type:3
#: yadisk._async_client.AsyncClient.is_trash_dir:3
#: yadisk._async_client.AsyncClient.is_trash_file:3
#: yadisk._async_client.AsyncClient.trash_exists:3
#: yadisk._client.Client.get_trash_meta:3
#: yadisk._client.Client.get_trash_type:3 yadisk._client.Client.is_trash_dir:3
#: yadisk._client.Client.is_trash_file:3 yadisk._client.Client.trash_exists:3
msgid "path to the trash resource"
msgstr "путь к ресурсу корзины"

#: of yadisk._async_client.AsyncClient.get_trash_meta:22
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:22
msgid ":any:`AsyncTrashResourceObject`"
msgstr ":any:`AsyncTrashResourceObject`"

#: of yadisk._async_client.AsyncClient.get_trash_type:1
#: yadisk._client.Client.get_trash_type:1
#: yadisk.objects._resources.AsyncTrashResourceObject.get_type:1
#: yadisk.objects._resources.SyncTrashResourceObject.get_type:1
msgid "Get trash resource type."
msgstr "Получает тип ресурса корзины."

#: of yadisk._async_client.AsyncClient.get_type:1
#: yadisk._client.Client.get_type:1
msgid "Get resource type."
msgstr "Получает тип ресурса"

#: of yadisk._async_client.AsyncClient.get_upload_link:1
#: yadisk._client.Client.get_upload_link:1
msgid "Get a link to upload the file using the PUT request."
msgstr "Получает ссылку для загрузки файла на диск при помощи PUT запроса."

#: of yadisk._async_client.AsyncClient.get_upload_link:4
#: yadisk._async_client.AsyncClient.get_upload_link_object:7
#: yadisk._async_client.AsyncClient.move:5
#: yadisk._async_client.AsyncClient.rename:6
#: yadisk._client.Client.get_upload_link:4
#: yadisk._client.Client.get_upload_link_object:7 yadisk._client.Client.move:5
#: yadisk._client.Client.rename:6
msgid "`bool`, determines whether to overwrite the destination"
msgstr "`bool`, определяет, перезаписывать путь назначения или нет"

#: of yadisk._async_client.AsyncClient.get_upload_link:14
#: yadisk._async_client.AsyncClient.get_upload_link_object:18
#: yadisk._async_client.AsyncClient.mkdir:14
#: yadisk._async_client.AsyncClient.upload:16
#: yadisk._async_client.AsyncClient.upload_url:20
#: yadisk._client.Client.get_upload_link:15
#: yadisk._client.Client.get_upload_link_object:19
#: yadisk._client.Client.mkdir:15 yadisk._client.Client.upload:18
#: yadisk._client.Client.upload_url:21
msgid "parent directory doesn't exist"
msgstr "родительская папка не существует"

#: of yadisk._async_client.AsyncClient.get_upload_link:18
#: yadisk._async_client.AsyncClient.get_upload_link_object:22
#: yadisk._async_client.AsyncClient.save_to_disk:27
#: yadisk._async_client.AsyncClient.upload:18
#: yadisk._async_client.AsyncClient.upload_by_link:16
#: yadisk._async_client.AsyncClient.upload_url:22
#: yadisk._client.Client.get_upload_link:19
#: yadisk._client.Client.get_upload_link_object:23
#: yadisk._client.Client.save_to_disk:28 yadisk._client.Client.upload:20
#: yadisk._client.Client.upload_by_link:18 yadisk._client.Client.upload_url:23
msgid "cannot upload file due to lack of storage space"
msgstr "невозможно загрузить файл из-за нехватки места на Диске"

#: of yadisk._async_client.AsyncClient.get_upload_link_object:1
msgid ""
"Get a link to upload the file using the PUT request. This is similar to "
":any:`AsyncClient.get_upload_link()`, except it returns an instance of "
":any:`ResourceUploadLinkObject` which also contains an asynchronous "
"operation ID."
msgstr ""
"Получает ссылку для загрузки файла на диск при помощи PUT запроса. Этот "
"метод аналогичен :any:`AsyncClient.get_upload_link()`, но возвращает "
"объект :any:`ResourceUploadLinkObject`, который также содержит "
"идентификатор асинхронной операции."

#: of yadisk._async_client.AsyncClient.get_upload_link_object:25
#: yadisk._client.Client.get_upload_link_object:26
msgid ":any:`ResourceUploadLinkObject`"
msgstr ":any:`ResourceUploadLinkObject`"

#: of yadisk._async_client.AsyncClient.is_dir:1 yadisk._client.Client.is_dir:1
msgid "Check whether `path` is a directory."
msgstr "Проверяет, является ли `path` папкой."

#: of yadisk._async_client.AsyncClient.is_dir:15
#: yadisk._async_client.AsyncClient.is_trash_dir:15
#: yadisk._async_client.AsyncClient.is_trash_file:15
#: yadisk._client.Client.is_dir:16 yadisk._client.Client.is_trash_dir:16
#: yadisk.objects._resources.AsyncTrashResourceObject.is_dir:15
#: yadisk.objects._resources.SyncTrashResourceObject.is_dir:16
msgid ""
"`True` if `path` is a directory, `False` otherwise (even if it doesn't "
"exist)"
msgstr ""
"`True`, если `path` является папкой, `False`, в остальных случаях (даже "
"если ресурс не существует)"

#: of yadisk._async_client.AsyncClient.is_file:1
#: yadisk._client.Client.is_file:1
msgid "Check whether `path` is a file."
msgstr "Проверяет, является ли `path` файлом."

#: of yadisk._async_client.AsyncClient.is_file:15
#: yadisk._client.Client.is_file:16 yadisk._client.Client.is_trash_file:16
#: yadisk.objects._resources.AsyncTrashResourceObject.is_file:15
#: yadisk.objects._resources.SyncTrashResourceObject.is_file:16
msgid "`True` if `path` is a file, `False` otherwise (even if it doesn't exist)"
msgstr ""
"`True`, если `path` является файлом, `False`, в остальных случаях (даже "
"если ресурс не существует)"

#: of yadisk._async_client.AsyncClient.is_public_dir:1
msgid "Check whether `public_key` is a public directory."
msgstr "Проверяет, является ли `public_key` публичной папкой."

#: of yadisk._async_client.AsyncClient.is_public_dir:16
#: yadisk._client.Client.is_public_dir:17
msgid ""
"`True` if `public_key` is a directory, `False` otherwise (even if it "
"doesn't exist)"
msgstr ""
"`True`, если `public_key` является папкой, `False`, в остальных случаях "
"(даже если ресурс не существует)"

#: of yadisk._async_client.AsyncClient.is_public_file:1
msgid "Check whether `public_key` is a public file."
msgstr "Проверяет, является ли `public_key` публичным файлом."

#: of yadisk._async_client.AsyncClient.is_public_file:16
#: yadisk._client.Client.is_public_file:17
msgid ""
"`True` if `public_key` is a file, `False` otherwise (even if it doesn't "
"exist)"
msgstr ""
"`True`, если `public_key` является файлом, `False`, в остальных случаях "
"(даже если ресурс не существует)"

#: of yadisk._async_client.AsyncClient.is_trash_dir:1
#: yadisk._client.Client.is_trash_dir:1
msgid "Check whether `path` is a trash directory."
msgstr "Проверяет, является ли `path` папкой в корзине."

#: of yadisk._async_client.AsyncClient.is_trash_file:1
#: yadisk._client.Client.is_trash_file:1
msgid "Check whether `path` is a trash file."
msgstr "Проверяет, является ли `path` файлом в корзине."

#: of yadisk._async_client.AsyncClient.listdir:1
#: yadisk._client.Client.listdir:1
msgid "Get contents of `path`."
msgstr "Получает содержимое `path`."

#: of yadisk._async_client.AsyncClient.listdir:3
#: yadisk._client.Client.listdir:3
msgid "path to the directory"
msgstr "путь к папке"

#: of yadisk._async_client.AsyncClient.listdir:21
#: yadisk._async_client.AsyncClient.public_listdir:24
#: yadisk._async_client.AsyncClient.trash_listdir:21
#: yadisk._client.Client.listdir:22 yadisk._client.Client.public_listdir:25
#: yadisk._client.Client.trash_listdir:22
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir:21
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:22
msgid "resource is not a directory"
msgstr "указанный ресурс не является папкой"

#: of yadisk._async_client.AsyncClient.makedirs:1
#: yadisk._client.Client.makedirs:1
msgid ""
"Create a new directory at `path`. If its parent directory doesn't exist "
"it will also be created recursively."
msgstr "Создаёт новую папку. Если родительская папка не сущсетвует, то она"
"будет также создана рекурсивно."

#: of yadisk._async_client.AsyncClient.makedirs:4
#: yadisk._async_client.AsyncClient.mkdir:3 yadisk._client.Client.makedirs:4
#: yadisk._client.Client.mkdir:3
msgid "path to the directory to be created"
msgstr "путь к папке, подлежащей созданию"

#: of yadisk._async_client.AsyncClient.makedirs:16
#: yadisk._async_client.AsyncClient.mkdir:16 yadisk._client.Client.makedirs:17
#: yadisk._client.Client.mkdir:17
msgid "cannot create directory due to lack of storage space"
msgstr "невозможно создать папку из-за нехватки места на Диске"

#: of yadisk._async_client.AsyncClient.makedirs:20
#: yadisk._async_client.AsyncClient.mkdir:20
#: yadisk._async_client.AsyncClient.unpublish:18
msgid ":any:`AsyncResourceLinkObject`"
msgstr ":any:`AsyncResourceLinkObject`"

#: of yadisk._async_client.AsyncClient.mkdir:1 yadisk._client.Client.mkdir:1
msgid "Create a new directory."
msgstr "Создаёт новую папку."

#: of yadisk._async_client.AsyncClient.move:1 yadisk._client.Client.move:1
msgid "Move `src_path` to `dst_path`."
msgstr "Перемещает `src_path` в `dst_path`."

#: of yadisk._async_client.AsyncClient.move:3
#: yadisk._async_client.AsyncClient.rename:4 yadisk._client.Client.move:3
#: yadisk._client.Client.rename:4
msgid "source path to be moved"
msgstr "исходный путь, подлежащий перемещению"

#: of yadisk._async_client.AsyncClient.patch:1 yadisk._client.Client.patch:1
msgid "Update custom properties of a resource."
msgstr "Обновляет пользовательские свойства ресурса."

#: of yadisk._async_client.AsyncClient.patch:4 yadisk._client.Client.patch:4
msgid "`dict`, custom properties to update"
msgstr "`dict`, новые пользовательские свойства ресурса"

#: of yadisk._async_client.AsyncClient.public_exists:1
#: yadisk._client.Client.public_exists:1
msgid "Check whether the public resource exists."
msgstr "Проверяет, существует ли публичный ресурс."

#: of yadisk._async_client.AsyncClient.public_listdir:1
#: yadisk._client.Client.public_listdir:1
msgid "Get contents of a public directory."
msgstr "Получает содержимое публичной папки."

#: of yadisk._async_client.AsyncClient.public_listdir:4
#: yadisk._client.Client.public_listdir:4
msgid ""
"relative path to the resource in the public folder. By specifying the key"
" of the published folder in `public_key`, you can request contents of any"
" nested folder."
msgstr ""
"относительный путь к ресурсу в публичной папке. Указывая ключ "
"опубликованной папки через `public_key`, вы можете запросить содержимое "
"любой вложенной папки."

#: of yadisk._async_client.AsyncClient.publish:1
#: yadisk._client.Client.publish:1
msgid "Make a resource public."
msgstr "Делает ресурс публичным."

#: of yadisk._async_client.AsyncClient.publish:3
#: yadisk._client.Client.publish:3
msgid "path to the resource to be published"
msgstr "путь к публикуемому ресурсу"

#: of yadisk._async_client.AsyncClient.publish:18
msgid ":any:`AsyncResourceLinkObject`, link to the resource"
msgstr ":any:`AsyncResourceLinkObject`, ссылка на ресурс"

#: of yadisk._async_client.AsyncClient.refresh_token:1
#: yadisk._client.Client.refresh_token:1
msgid "Refresh an existing token."
msgstr "Обновляет существующий токен."

#: of yadisk._async_client.AsyncClient.refresh_token:3
#: yadisk._client.Client.refresh_token:3
msgid "the refresh token that was received with the token"
msgstr "refresh-токен, полученный вместе с токеном"

#: of yadisk._async_client.AsyncClient.refresh_token:13
#: yadisk._client.Client.refresh_token:14
msgid "invalid or expired refresh token or it doesn't belong to this application"
msgstr ""
"неправильный или истекший refresh-токен или он не принадлежит этому "
"приложению"

#: of yadisk._async_client.AsyncClient.remove:1 yadisk._client.Client.remove:1
msgid "Remove the resource."
msgstr "Удаляет ресурс."

#: of yadisk._async_client.AsyncClient.remove:3 yadisk._client.Client.remove:3
msgid "path to the resource to be removed"
msgstr "путь к удаляемому ресурсу"

#: of yadisk._async_client.AsyncClient.remove:4 yadisk._client.Client.remove:4
msgid ""
"if `True`, the resource will be removed permanently, otherwise, it will "
"be just moved to the trash"
msgstr ""
"если `True`, ресурс будет безвозвратно удалён, иначе ресурс будет "
"перемещён в корзину"

#: of yadisk._async_client.AsyncClient.remove:6 yadisk._client.Client.remove:6
msgid "`str`, MD5 hash of the file to remove"
msgstr "`str`, MD5 хэш файла, подлежащего удалению"

#: of yadisk._async_client.AsyncClient.remove:24
#: yadisk._client.Client.remove:25
msgid "MD5 check is only available for files"
msgstr "проверка MD5 доступна только для файлов"

#: of yadisk._async_client.AsyncClient.remove:32
#: yadisk._async_client.AsyncClient.remove_trash:28
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:28
msgid ""
":any:`AsyncOperationLinkObject` if the operation is performed "
"asynchronously, `None` otherwise"
msgstr ""
":any:`AsyncOperationLinkObject`, если операция выполняется асинхронно, "
"иначе `None`"

#: of yadisk._async_client.AsyncClient.remove_trash:1
#: yadisk._client.Client.remove_trash:1
#: yadisk.objects._resources.AsyncTrashResourceObject.remove:1
#: yadisk.objects._resources.SyncTrashResourceObject.remove:1
msgid "Remove a trash resource."
msgstr "Удаляет ресурс корзины."

#: of yadisk._async_client.AsyncClient.remove_trash:3
#: yadisk._client.Client.remove_trash:3
msgid "path to the trash resource to be deleted"
msgstr "путь к ресурсу корзины, подлежащий удалению"

#: of yadisk._async_client.AsyncClient.rename:1 yadisk._client.Client.rename:1
msgid ""
"Rename `src_path` to have filename `new_name`. Does the same as `move()` "
"but changes only the filename."
msgstr ""
"Переименовывает `src_path` в `new_name`. Делает то же самое, что и "
"`move()`, за исключением того, что меняет только имя файла."

#: of yadisk._async_client.AsyncClient.rename:5 yadisk._client.Client.rename:5
msgid "target filename to rename to"
msgstr "новое имя файла, в которое следует переименовать ресурс"

#: of yadisk._async_client.AsyncClient.rename:26
#: yadisk._client.Client.rename:27
msgid "`new_name` is not a valid filename or `src_path` is root"
msgstr "`new_name` не является допустимым именем файла или `src_path` - корень диска"

#: of yadisk._async_client.AsyncClient.restore_trash:1
#: yadisk._client.Client.restore_trash:1
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:1
#: yadisk.objects._resources.SyncTrashResourceObject.restore:1
msgid ""
"Restore a trash resource. Returns a link to the newly created resource or"
" a link to the asynchronous operation."
msgstr ""
"Восстанавливает ресурс корзины. Возвращает ссылку на новый ресурс или "
"ссылку на асинхронную операцию."

#: of yadisk._async_client.AsyncClient.restore_trash:4
msgid "path to the trash resource to restore"
msgstr "путь к восстанавливаему ресурсу"

#: of yadisk._async_client.AsyncClient.restore_trash:6
#: yadisk._client.Client.restore_trash:6
#: yadisk.objects._resources.AsyncTrashResourceObject.restore:11
#: yadisk.objects._resources.SyncTrashResourceObject.restore:11
msgid "`bool`, determines whether the destination can be overwritten"
msgstr "`bool`, определяет может ли путь назначения быть перезаписан"

#: of yadisk._async_client.AsyncClient.revoke_token:1
#: yadisk._client.Client.revoke_token:1
msgid "Revoke the token."
msgstr "Отзывает токен."

#: of yadisk._async_client.AsyncClient.revoke_token:3
msgid "token to revoke, equivalent to `self.token` if `None`"
msgstr "токен, подлежащий отзыву, то же самое, что `self.token`, если `None`"

#: of yadisk._async_client.AsyncClient.revoke_token:13
#: yadisk._client.Client.revoke_token:14
msgid "specified token doesn't belong to this application"
msgstr "указанный токен не принадлежит данному приложению"

#: of yadisk._async_client.AsyncClient.revoke_token:15
#: yadisk._client.Client.revoke_token:16
msgid "token could not be revoked because it doesn't have a :code:`device_id`"
msgstr "не удалось отозвать токен, потому что у него нет :code:`device_id`"

#: of yadisk._async_client.AsyncClient.revoke_token:19
#: yadisk._client.Client.revoke_token:20
msgid ":any:`TokenRevokeStatusObject`"
msgstr ":any:`TokenRevokeStatusObject`"

#: of yadisk._async_client.AsyncClient.save_to_disk:1
#: yadisk._client.Client.save_to_disk:1
msgid ""
"Saves a public resource to the disk. Returns the link to the operation if"
" it's performed asynchronously, or a link to the resource otherwise."
msgstr ""
"Сохраняет публичный ресурс на диск. Возвращает ссылку на операцию, если "
"сохранение выполняется асинхронно, или возвращает ссылку на ресурс."

#: of yadisk._async_client.AsyncClient.save_to_disk:6
#: yadisk._client.Client.save_to_disk:6
msgid "filename of the saved resource"
msgstr "имя файла/папки, под которым будет сохранён ресурс"

#: of yadisk._async_client.AsyncClient.save_to_disk:7
#: yadisk._client.Client.save_to_disk:7
msgid "path to the copied resource in the public folder"
msgstr "путь к копируемому ресурсу в публичной папке"

#: of yadisk._async_client.AsyncClient.save_to_disk:8
#: yadisk._client.Client.save_to_disk:8
msgid "path to the destination directory (downloads directory by default)"
msgstr "путь к папке назначения (загрузки по умолчанию)"

#: of yadisk._async_client.AsyncClient.trash_exists:1
#: yadisk._client.Client.trash_exists:1
msgid "Check whether the trash resource at `path` exists."
msgstr "Проверяет, существует ли `path` в корзине."

#: of yadisk._async_client.AsyncClient.trash_listdir:1
#: yadisk._client.Client.trash_listdir:1
#: yadisk.objects._resources.AsyncTrashResourceObject.listdir:1
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:1
msgid "Get contents of a trash resource."
msgstr "Получает содержимое папки в корзине."

#: of yadisk._async_client.AsyncClient.trash_listdir:3
#: yadisk._client.Client.trash_listdir:3
msgid "path to the directory in the trash bin"
msgstr "путь к папке в корзине"

#: of yadisk._async_client.AsyncClient.trash_listdir:23
msgid "async generator of :any:`AsyncTrashResourceObject`"
msgstr "асинхронный генератор :any:`AsyncTrashResourceObject`"

#: of yadisk._async_client.AsyncClient.unpublish:1
#: yadisk._client.Client.unpublish:1
msgid "Make a public resource private."
msgstr "Делает публичный ресурс приватным."

#: of yadisk._async_client.AsyncClient.unpublish:3
#: yadisk._client.Client.unpublish:3
msgid "path to the resource to be unpublished"
msgstr "путь к ресурсу, подлежащему депубликации"

#: of yadisk._async_client.AsyncClient.upload:1 yadisk._client.Client.upload:1
msgid "Upload a file to disk."
msgstr "Загружает файл на диск."

#: of yadisk._async_client.AsyncClient.upload:3
#: yadisk._async_client.AsyncClient.upload_by_link:3
msgid "path, file-like object or an async generator function to be uploaded"
msgstr ""
"путь к файлу, файл-подобный объект или функция, возвращающая асинхронный "
"генератор для загрузки"

#: of yadisk._async_client.AsyncClient.upload:5
#: yadisk._async_client.AsyncClient.upload_by_link:5
#: yadisk._client.Client.upload:6 yadisk._client.Client.upload_by_link:6
msgid ""
"if `True`, the resource will be overwritten if it already exists, an "
"error will be raised otherwise"
msgstr ""
"если `True`, путь назначения может быть перезаписан, иначе будет вызвана "
"ошибка"

#: of yadisk._async_client.AsyncClient.upload:23
msgid ":any:`AsyncResourceLinkObject`, link to the destination resource"
msgstr ":any:`AsyncResourceLinkObject`, ссылка на загруженный ресурс"

#: of yadisk._async_client.AsyncClient.upload_by_link:1
#: yadisk._client.Client.upload_by_link:1
msgid "Upload a file to disk using an upload link."
msgstr "Загружает файл на диск по уже полученной ссылке."

#: of yadisk._async_client.AsyncClient.upload_by_link:4
#: yadisk._client.Client.upload_by_link:5
msgid "upload link"
msgstr "ссылка для загрузки файла"

#: of yadisk._async_client.AsyncClient.upload_url:1
#: yadisk._client.Client.upload_url:1
msgid "Upload a file from URL."
msgstr "Загружает файл на диск по URL."

#: of yadisk._async_client.AsyncClient.upload_url:3
#: yadisk._client.Client.upload_url:3
msgid "source URL"
msgstr "исходный URL"

#: of yadisk._async_client.AsyncClient.upload_url:5
#: yadisk._client.Client.upload_url:5
msgid "`bool`, forbid redirects"
msgstr "`bool`, запретить делать перенаправления"

#: of yadisk._async_client.AsyncClient.upload_url:32
msgid ":any:`AsyncOperationLinkObject`, link to the asynchronous operation"
msgstr ":any:`AsyncOperationLinkObject`, ссылка на асинхронную операцию"

#: of yadisk._async_client.AsyncClient.wait_for_operation:1
#: yadisk.objects._operations.AsyncOperationLinkObject.wait:1
msgid ""
"Wait until an operation is completed. If the operation fails, an "
"exception is raised. Waiting is performed by calling "
":any:`asyncio.sleep`."
msgstr ""
"Ждёт, пока операция не будет выполнена. Если выполнение операции не "
"удалось, вызывается исключение. Ожидание осуществляется с помощью вызова "
":any:`asyncio.sleep`."

#: ../../api_reference/exceptions.rst:2
msgid "Exceptions"
msgstr "Исключения"

#: of yadisk.exceptions.AsyncOperationFailedError:1
#: yadisk.exceptions.BadGatewayError:1 yadisk.exceptions.GatewayTimeoutError:1
#: yadisk.exceptions.InternalServerError:1 yadisk.exceptions.UnavailableError:1
#: yadisk.exceptions.UnknownYaDiskError:1
msgid "Bases: :py:class:`~yadisk.exceptions.RetriableYaDiskError`"
msgstr "Базовые классы: :py:class:`~yadisk.exceptions.RetriableYaDiskError`"

#: of yadisk.exceptions.AsyncOperationFailedError:1
msgid "Raised when an asynchronous operation fails"
msgstr "Вызывается, когда асинхронная операция завершается с ошибкой"

#: of yadisk.exceptions.AsyncOperationPollingTimeoutError:1
#: yadisk.exceptions.BadRequestError:1 yadisk.exceptions.ConflictError:1
#: yadisk.exceptions.ForbiddenError:1 yadisk.exceptions.GoneError:1
#: yadisk.exceptions.InsufficientStorageError:1
#: yadisk.exceptions.InvalidResponseError:1 yadisk.exceptions.LockedError:1
#: yadisk.exceptions.NotAcceptableError:1 yadisk.exceptions.NotFoundError:1
#: yadisk.exceptions.PayloadTooLargeError:1 yadisk.exceptions.RequestError:1
#: yadisk.exceptions.RetriableYaDiskError:1
#: yadisk.exceptions.TooManyRequestsError:1
#: yadisk.exceptions.UnauthorizedError:1
#: yadisk.exceptions.UnsupportedMediaError:1
#: yadisk.exceptions.WrongResourceTypeError:1
msgid "Bases: :py:class:`~yadisk.exceptions.YaDiskError`"
msgstr "Базовые классы: :py:class:`~yadisk.exceptions.YaDiskError`"

#: of yadisk.exceptions.AsyncOperationPollingTimeoutError:1
msgid ""
"Raised when a polling timeout occured while waiting for an asynchronous "
"operation"
msgstr "Вызывается, когда произошёл таймаут во время ожидания асинхронной операции"

#: of yadisk.exceptions.AuthorizationPendingError:1
#: yadisk.exceptions.BadVerificationCodeError:1
#: yadisk.exceptions.FieldValidationError:1
#: yadisk.exceptions.InvalidClientError:1 yadisk.exceptions.InvalidGrantError:1
#: yadisk.exceptions.UnsupportedTokenTypeError:1
msgid "Bases: :py:class:`~yadisk.exceptions.BadRequestError`"
msgstr "Базовые классы: :py:class:`~yadisk.exceptions.BadRequestError`"

#: of yadisk.exceptions.AuthorizationPendingError:1
msgid ""
"Thrown when authorization is currently pending, the application has to "
"wait."
msgstr ""
"Вызывается, когда авторизация находится в процессе, приложение должно "
"подождать."

#: of yadisk.exceptions.BadGatewayError:1
msgid "Thrown when the server returns code 502"
msgstr "Вызывается, когда сервер вернул код 502."

#: of yadisk.exceptions.BadRequestError:1
msgid "Thrown when the server returns code 400."
msgstr "Вызывается, когда сервер вернул код 400."

#: of yadisk.exceptions.BadVerificationCodeError:1
msgid "Thrown when a verification code has invalid format"
msgstr "Вызывается, когда у кода подтверждения неправильный формат"

#: of yadisk.exceptions.ConflictError:1
msgid "Thrown when the server returns code 409."
msgstr "Вызывается, когда сервер вернул код 409."

#: of yadisk.exceptions.DirectoryExistsError:1
msgid "Bases: :py:class:`~yadisk.exceptions.PathExistsError`"
msgstr "Базовые классы: :py:class:`~yadisk.exceptions.PathExistsError`"

#: of yadisk.exceptions.DirectoryExistsError:1
msgid "Thrown when the directory already exists."
msgstr "Вызывается, когда папка уже существует."

#: of yadisk.exceptions.FieldValidationError:1
msgid "Thrown when the request contains fields with invalid data."
msgstr "Вызывается, когда запрос содежит поля с некорректными данными."

#: of yadisk.exceptions.ForbiddenError:1
msgid "Thrown when the server returns code 403."
msgstr "Вызывается, когда сервер вернул код 403."

#: of yadisk.exceptions.GatewayTimeoutError:1
msgid "Thrown when the server returns code 504"
msgstr "Вызывается, когда сервер вернул код 504."

#: of yadisk.exceptions.GoneError:1
msgid "Raised when the server returns code 410."
msgstr "Вызывается, когда сервер вернул код 410."

#: of yadisk.exceptions.InsufficientStorageError:1
msgid "Thrown when the server returns code 507."
msgstr "Вызывается, когда сервер вернул код 507."

#: of yadisk.exceptions.InternalServerError:1
msgid "Thrown when the server returns code 500."
msgstr "Вызывается, когда сервер вернул код 500."

#: of yadisk.exceptions.InvalidClientError:1
msgid "Thrown when an invalid client ID or client secret was provided"
msgstr ""
"Вызывается, когда был указан неправильный идентификатор или пароль "
"приложения"

#: of yadisk.exceptions.InvalidGrantError:1
msgid "Thrown when a verification code is expired or invalid"
msgstr "Вызывается при неверном или просроченном коде подтверждения"

#: of yadisk.exceptions.InvalidResponseError:1
msgid "Thrown when Yandex.Disk did not return a JSON response or if it's invalid."
msgstr "Вызывается, когда Яндекс.Диск не вернул JSON ответ или он неправильный."

#: of yadisk.exceptions.LockedError:1
msgid "Thrown when the server returns code 423."
msgstr "Вызывается, когда сервер вернул код 423."

#: of yadisk.exceptions.MD5DifferError:1
#: yadisk.exceptions.ParentNotFoundError:1 yadisk.exceptions.PathExistsError:1
msgid "Bases: :py:class:`~yadisk.exceptions.ConflictError`"
msgstr "Базовые классы: :py:class:`~yadisk.exceptions.ConflictError`"

#: of yadisk.exceptions.MD5DifferError:1
msgid ""
"Thrown when the MD5 hash of the file to be deleted doesn't match with the"
" actual one."
msgstr "Вызывается, когда MD5 хэш удаляемого ресурса не совпадает с указанным."

#: of yadisk.exceptions.NotAcceptableError:1
msgid "Thrown when the server returns code 406."
msgstr "Вызывается, когда сервер вернул код 406."

#: of yadisk.exceptions.NotFoundError:1
msgid "Thrown when the server returns code 404."
msgstr "Вызывается, когда сервер вернул код 404."

#: of yadisk.exceptions.OperationNotFoundError:1
#: yadisk.exceptions.PathNotFoundError:1
msgid "Bases: :py:class:`~yadisk.exceptions.NotFoundError`"
msgstr "Базовые классы: :py:class:`~yadisk.exceptions.NotFoundError`"

#: of yadisk.exceptions.OperationNotFoundError:1
msgid "Thrown by `get_operation_status()` when the operation doesn't exist."
msgstr ""
"Вызывается, когда операция, переденная `get_operation_status()` не "
"существует."

#: of yadisk.exceptions.ParentNotFoundError:1
msgid "Thrown by `mkdir`, `upload`, etc. when the parent directory doesn't exist."
msgstr ""
"Вызывается `mkdir`, `upload` и т.д. когда родительская папка не "
"существует."

#: of yadisk.exceptions.PathExistsError:1
msgid "Thrown when the requested path already exists."
msgstr "Вызывается, когда запрашиваемый путь уже существует."

#: of yadisk.exceptions.PathNotFoundError:1
msgid "Thrown when the requested path does not exist."
msgstr "Вызывается, когда запрашиваемый путь не существует."

#: of yadisk.exceptions.PayloadTooLargeError:1
msgid "Thrown when the server returns code 413."
msgstr "Вызывается, когда сервер вернул код 413."

#: of yadisk.exceptions.RequestError:1
msgid ""
"Generic exception class for cases when a request could not be sent or "
"response could not be received."
msgstr ""
"Общий класс исключения для случаев, когда запросы не удалось отправить "
"или не удалось получить ответ."

#: of yadisk.exceptions.RequestTimeoutError:1
#: yadisk.exceptions.TooManyRedirectsError:1
#: yadisk.exceptions.YaDiskConnectionError:1
msgid "Bases: :py:class:`~yadisk.exceptions.RequestError`"
msgstr "Базовые классы: :py:class:`~yadisk.exceptions.RequestError`"

#: of yadisk.exceptions.RequestTimeoutError:1
msgid "Thrown when a request timed out."
msgstr "Вызывается, когда время ожидания запроса истекло."

#: of yadisk.exceptions.ResourceDownloadLimitExceededError:1
msgid "Bases: :py:class:`~yadisk.exceptions.TooManyRequestsError`"
msgstr "Базовые классы: :py:class:`~yadisk.exceptions.TooManyRequestsError`"

#: of yadisk.exceptions.ResourceDownloadLimitExceededError:1
msgid "Raised when the download limit for a resource is exceeded."
msgstr "Вызывается, когда превышен лимит на скачивание для ресурса."

#: of yadisk.exceptions.ResourceIsLockedError:1
#: yadisk.exceptions.UploadTrafficLimitExceededError:1
msgid "Bases: :py:class:`~yadisk.exceptions.LockedError`"
msgstr "Базовые классы: :py:class:`~yadisk.exceptions.LockedError`"

#: of yadisk.exceptions.ResourceIsLockedError:1
msgid "Thrown when the resource is locked by another operation."
msgstr "Вызывается, когда запрашиваемый ресурс заблокирован другой операцией."

#: of yadisk.exceptions.RetriableYaDiskError:1
msgid ""
"Thrown when there was an error but it would make sense to retry the "
"request."
msgstr ""
"Вызывается в случае, если произошла ошибка, но имеет смысл повторить "
"запрос."

#: of yadisk.exceptions.TooManyRedirectsError:1
msgid "Thrown when there were too many redirects."
msgstr "Вызывается, при слишком большом количестве перенаправлений."

#: of yadisk.exceptions.TooManyRequestsError:1
msgid "Thrown when the server returns code 429."
msgstr "Вызывается, когда сервер вернул код 429."

#: of yadisk.exceptions.UnauthorizedError:1
msgid "Thrown when the server returns code 401."
msgstr "Вызывается, когда сервер вернул код 401."

#: of yadisk.exceptions.UnavailableError:1
msgid "Thrown when the server returns code 503."
msgstr "Вызывается, когда сервер вернул код 503."

#: of yadisk.exceptions.UnknownYaDiskError:1
msgid ""
"Thrown when the request failed but the response does not contain any "
"error info."
msgstr "Вызывается, когда запрос не удался, но не содержит информации об ошибке."

#: of yadisk.exceptions.UnsupportedMediaError:1
msgid "Thrown when the server returns code 415."
msgstr "Вызывается, когда сервер вернул код 415."

#: of yadisk.exceptions.UnsupportedTokenTypeError:1
msgid "Thrown when the specified token cannot be used in a request"
msgstr "Вызывается, когда указанный токен не может быть использован в запросе"

#: of yadisk.exceptions.UploadTrafficLimitExceededError:1
msgid "Thrown when upload limit has been exceeded."
msgstr "Вызывается, когда превышен лимит на загрузку файлов."

#: of yadisk.exceptions.WrongResourceTypeError:1
msgid ""
"Thrown when the resource was expected to be of different type (e.g., file"
" instead of directory)."
msgstr ""
"Вызывается, когда ожидался ресурс другого типа (например, файл вместо "
"папки)."

#: of yadisk.exceptions.YaDiskConnectionError:1
msgid "Thrown when a connection error occured."
msgstr "Вызывается при ошибке соединения."

#: of yadisk.exceptions.YaDiskError:1
msgid "Bases: :py:class:`Exception`"
msgstr "Базовые классы: :py:class:`Exception`"

#: of yadisk.exceptions.YaDiskError:1
msgid "Base class for all exceptions in this library."
msgstr "Базовый класс для всех исключений в этой библиотеке."

#: of yadisk.exceptions.YaDiskError:3 yadisk.exceptions.YaDiskError:8
msgid "`str`, unique error code as returned by API"
msgstr "`str`, уникальный код ошибки, полученный от API"

#: of yadisk.exceptions.YaDiskError:4 yadisk.exceptions.YaDiskError:10
#: yadisk.utils.get_exception:3
msgid "an instance of :any:`Response` or :any:`AsyncResponse`"
msgstr "объект :any:`Response` или :any:`AsyncResponse`"

#: of yadisk.exceptions.YaDiskError:5 yadisk.exceptions.YaDiskError:11
msgid ""
"`bool`, if set to :code:`True`, exception will not trigger a retry in "
":any:`utils.auto_retry()`"
msgstr ""
"`bool`, если :code:`True`, исключение не вызовет повторную попытку в "
":any:`utils.auto_retry()`"

#: of yadisk.exceptions.YaDiskError:9
msgid "`str`, exception message"
msgstr "`str`, сообщение исключения"

#: ../../api_reference/index.rst:4
msgid "Contents:"
msgstr "Содержание:"

#: ../../api_reference/index.rst:2
msgid "API Reference"
msgstr "Справочник API"

#: ../../api_reference/response_objects.rst:2
msgid "Response Objects"
msgstr "Объекты ответов сервера"

#: of yadisk.objects._resources.AsyncFilesResourceListObject:1
#: yadisk.objects._resources.SyncFilesResourceListObject:1
msgid "Bases: :py:class:`~yadisk.objects._resources.FilesResourceListObject`"
msgstr ""
"Базовые классы: "
":py:class:`~yadisk.objects._resources.FilesResourceListObject`"

#: of yadisk.objects._resources.AsyncFilesResourceListObject:1
#: yadisk.objects._resources.FilesResourceListObject:1
#: yadisk.objects._resources.SyncFilesResourceListObject:1
msgid "Flat list of files."
msgstr "Плоский список файлов."

#: of yadisk.objects._auth.DeviceCodeObject:3
#: yadisk.objects._auth.TokenObject:3
#: yadisk.objects._auth.TokenRevokeStatusObject:3
#: yadisk.objects._disk.DiskInfoObject:3
#: yadisk.objects._disk.SystemFoldersObject:3 yadisk.objects._disk.UserObject:3
#: yadisk.objects._disk.UserPublicInfoObject:4
#: yadisk.objects._error_object.ErrorObject:3
#: yadisk.objects._link_object.LinkObject:3
#: yadisk.objects._operations.AsyncOperationLinkObject:3
#: yadisk.objects._operations.OperationLinkObject:3
#: yadisk.objects._operations.OperationStatusObject:3
#: yadisk.objects._operations.SyncOperationLinkObject:3
#: yadisk.objects._resources.AsyncFilesResourceListObject:3
#: yadisk.objects._resources.AsyncLastUploadedResourceListObject:3
#: yadisk.objects._resources.AsyncPublicResourceLinkObject:3
#: yadisk.objects._resources.AsyncPublicResourceListObject:3
#: yadisk.objects._resources.AsyncPublicResourceObject:3
#: yadisk.objects._resources.AsyncPublicResourcesListObject:3
#: yadisk.objects._resources.AsyncResourceLinkObject:3
#: yadisk.objects._resources.AsyncResourceListObject:3
#: yadisk.objects._resources.AsyncResourceObject:3
#: yadisk.objects._resources.AsyncTrashResourceListObject:3
#: yadisk.objects._resources.AsyncTrashResourceObject:3
#: yadisk.objects._resources.CommentIDsObject:3
#: yadisk.objects._resources.EXIFObject:3
#: yadisk.objects._resources.FilesResourceListObject:3
#: yadisk.objects._resources.LastUploadedResourceListObject:3
#: yadisk.objects._resources.PublicResourceLinkObject:3
#: yadisk.objects._resources.PublicResourceListObject:3
#: yadisk.objects._resources.PublicResourceObject:3
#: yadisk.objects._resources.PublicResourcesListObject:3
#: yadisk.objects._resources.ResourceDownloadLinkObject:3
#: yadisk.objects._resources.ResourceLinkObject:3
#: yadisk.objects._resources.ResourceListObject:3
#: yadisk.objects._resources.ResourceObject:3
#: yadisk.objects._resources.ResourceUploadLinkObject:3
#: yadisk.objects._resources.ShareInfoObject:3
#: yadisk.objects._resources.SyncFilesResourceListObject:3
#: yadisk.objects._resources.SyncLastUploadedResourceListObject:3
#: yadisk.objects._resources.SyncPublicResourceLinkObject:3
#: yadisk.objects._resources.SyncPublicResourceListObject:3
#: yadisk.objects._resources.SyncPublicResourceObject:3
#: yadisk.objects._resources.SyncPublicResourcesListObject:3
#: yadisk.objects._resources.SyncResourceLinkObject:3
#: yadisk.objects._resources.SyncResourceListObject:3
#: yadisk.objects._resources.SyncResourceObject:3
#: yadisk.objects._resources.SyncTrashResourceListObject:3
#: yadisk.objects._resources.SyncTrashResourceObject:3
#: yadisk.objects._resources.TrashResourceListObject:3
#: yadisk.objects._resources.TrashResourceObject:3
#: yadisk.objects._yadisk_object.YaDiskObject:5
msgid "`dict` or `None`"
msgstr "`dict` или `None`"

#: of yadisk.objects._operations.AsyncOperationLinkObject:4
#: yadisk.objects._resources.AsyncFilesResourceListObject:4
#: yadisk.objects._resources.AsyncLastUploadedResourceListObject:4
#: yadisk.objects._resources.AsyncPublicResourceLinkObject:4
#: yadisk.objects._resources.AsyncPublicResourceListObject:4
#: yadisk.objects._resources.AsyncPublicResourceObject:4
#: yadisk.objects._resources.AsyncPublicResourcesListObject:4
#: yadisk.objects._resources.AsyncResourceLinkObject:4
#: yadisk.objects._resources.AsyncResourceListObject:4
#: yadisk.objects._resources.AsyncResourceObject:4
#: yadisk.objects._resources.AsyncTrashResourceListObject:4
#: yadisk.objects._resources.AsyncTrashResourceObject:4
msgid ":any:`AsyncClient` or `None`, `YaDisk` object"
msgstr ":any:`AsyncClient` или `None`, объект `YaDisk`"

#: of yadisk.objects._resources.AsyncFilesResourceListObject:6
msgid "`list`, flat list of files (:any:`AsyncResourceObject`)"
msgstr "`list`, плоский список файлов (:any:`AsyncResourceObject`)"

#: of yadisk.objects._resources.AsyncFilesResourceListObject:7
#: yadisk.objects._resources.AsyncLastUploadedResourceListObject:7
#: yadisk.objects._resources.AsyncPublicResourceListObject:8
#: yadisk.objects._resources.AsyncPublicResourcesListObject:8
#: yadisk.objects._resources.AsyncResourceListObject:8
#: yadisk.objects._resources.AsyncTrashResourceListObject:8
#: yadisk.objects._resources.FilesResourceListObject:7
#: yadisk.objects._resources.LastUploadedResourceListObject:7
#: yadisk.objects._resources.PublicResourceListObject:8
#: yadisk.objects._resources.PublicResourcesListObject:8
#: yadisk.objects._resources.ResourceListObject:8
#: yadisk.objects._resources.SyncFilesResourceListObject:7
#: yadisk.objects._resources.SyncLastUploadedResourceListObject:7
#: yadisk.objects._resources.SyncPublicResourceListObject:8
#: yadisk.objects._resources.SyncPublicResourcesListObject:8
#: yadisk.objects._resources.SyncResourceListObject:8
#: yadisk.objects._resources.SyncTrashResourceListObject:8
#: yadisk.objects._resources.TrashResourceListObject:8
msgid "`int`, maximum number of elements in the list"
msgstr "`int`, максимальное число элементов в списке"

#: of yadisk.objects._resources.AsyncFilesResourceListObject:8
#: yadisk.objects._resources.AsyncPublicResourceListObject:9
#: yadisk.objects._resources.AsyncPublicResourcesListObject:9
#: yadisk.objects._resources.AsyncResourceListObject:9
#: yadisk.objects._resources.AsyncTrashResourceListObject:9
#: yadisk.objects._resources.FilesResourceListObject:8
#: yadisk.objects._resources.PublicResourceListObject:9
#: yadisk.objects._resources.PublicResourcesListObject:9
#: yadisk.objects._resources.ResourceListObject:9
#: yadisk.objects._resources.SyncFilesResourceListObject:8
#: yadisk.objects._resources.SyncPublicResourceListObject:9
#: yadisk.objects._resources.SyncPublicResourcesListObject:9
#: yadisk.objects._resources.SyncResourceListObject:9
#: yadisk.objects._resources.SyncTrashResourceListObject:9
#: yadisk.objects._resources.TrashResourceListObject:9
msgid "`int`, offset from the beginning of the list"
msgstr "`int`, отступ от начала списка"

#: of yadisk.objects._resources.AsyncLastUploadedResourceListObject:1
#: yadisk.objects._resources.SyncLastUploadedResourceListObject:1
msgid ""
"Bases: "
":py:class:`~yadisk.objects._resources.LastUploadedResourceListObject`"
msgstr ""
"Базовые классы: "
":py:class:`~yadisk.objects._resources.LastUploadedResourceListObject`"

#: of yadisk.objects._resources.AsyncLastUploadedResourceListObject:1
#: yadisk.objects._resources.LastUploadedResourceListObject:1
#: yadisk.objects._resources.SyncLastUploadedResourceListObject:1
msgid "List of last uploaded resources."
msgstr "Список последних загруженных файлов."

#: of yadisk.objects._resources.AsyncLastUploadedResourceListObject:6
#: yadisk.objects._resources.AsyncPublicResourceListObject:7
#: yadisk.objects._resources.AsyncResourceListObject:7
msgid "`list`, list of resources (:any:`AsyncResourceObject`)"
msgstr "`list`, список ресурсов (:any:`AsyncResourceObject`)"

#: of yadisk.objects._operations.AsyncOperationLinkObject:1
#: yadisk.objects._operations.SyncOperationLinkObject:1
msgid "Bases: :py:class:`~yadisk.objects._operations.OperationLinkObject`"
msgstr ""
"Базовые классы: "
":py:class:`~yadisk.objects._operations.OperationLinkObject`"

#: of yadisk.objects._operations.AsyncOperationLinkObject:1
#: yadisk.objects._operations.OperationLinkObject:1
#: yadisk.objects._operations.SyncOperationLinkObject:1
msgid "Operation link object."
msgstr "Объект ссылки на операцию."

#: of yadisk.objects._link_object.LinkObject:6
#: yadisk.objects._operations.AsyncOperationLinkObject:6
#: yadisk.objects._operations.OperationLinkObject:6
#: yadisk.objects._operations.SyncOperationLinkObject:6
#: yadisk.objects._resources.AsyncPublicResourceLinkObject:6
#: yadisk.objects._resources.AsyncResourceLinkObject:6
#: yadisk.objects._resources.PublicResourceLinkObject:6
#: yadisk.objects._resources.ResourceDownloadLinkObject:6
#: yadisk.objects._resources.ResourceLinkObject:6
#: yadisk.objects._resources.ResourceUploadLinkObject:7
#: yadisk.objects._resources.SyncPublicResourceLinkObject:6
#: yadisk.objects._resources.SyncResourceLinkObject:6
msgid "`str`, link URL"
msgstr "`str`, URL ссылки"

#: of yadisk._async_session.AsyncSession.send_request:10
#: yadisk._session.Session.send_request:10
#: yadisk.objects._link_object.LinkObject:7
#: yadisk.objects._operations.AsyncOperationLinkObject:7
#: yadisk.objects._operations.OperationLinkObject:7
#: yadisk.objects._operations.SyncOperationLinkObject:7
#: yadisk.objects._resources.AsyncPublicResourceLinkObject:7
#: yadisk.objects._resources.AsyncResourceLinkObject:7
#: yadisk.objects._resources.PublicResourceLinkObject:7
#: yadisk.objects._resources.ResourceDownloadLinkObject:7
#: yadisk.objects._resources.ResourceLinkObject:7
#: yadisk.objects._resources.ResourceUploadLinkObject:8
#: yadisk.objects._resources.SyncPublicResourceLinkObject:7
#: yadisk.objects._resources.SyncResourceLinkObject:7
msgid "`str`, HTTP method"
msgstr "`str`, HTTP метод"

#: of yadisk.objects._link_object.LinkObject:8
#: yadisk.objects._operations.AsyncOperationLinkObject:8
#: yadisk.objects._operations.OperationLinkObject:8
#: yadisk.objects._operations.SyncOperationLinkObject:8
#: yadisk.objects._resources.AsyncPublicResourceLinkObject:8
#: yadisk.objects._resources.AsyncResourceLinkObject:8
#: yadisk.objects._resources.PublicResourceLinkObject:8
#: yadisk.objects._resources.ResourceDownloadLinkObject:8
#: yadisk.objects._resources.ResourceLinkObject:8
#: yadisk.objects._resources.ResourceUploadLinkObject:9
#: yadisk.objects._resources.SyncPublicResourceLinkObject:8
#: yadisk.objects._resources.SyncResourceLinkObject:8
msgid "`bool`, tells whether the URL is templated"
msgstr "`bool`, признак шаблонизированного URL"

#: of yadisk.objects._resources.AsyncPublicResourceLinkObject:1
msgid ""
"Bases: :py:class:`~yadisk.objects._resources.PublicResourceLinkObject`, "
":py:class:`~yadisk.objects._resources.AsyncResourceObjectMethodsMixin`"
msgstr ""
"Базовые классы: "
":py:class:`~yadisk.objects._resources.PublicResourceLinkObject`, "
":py:class:`~yadisk.objects._resources.AsyncResourceObjectMethodsMixin`"

#: of yadisk.objects._resources.AsyncPublicResourceLinkObject:1
#: yadisk.objects._resources.PublicResourceLinkObject:1
#: yadisk.objects._resources.SyncPublicResourceLinkObject:1
msgid "Public resource link object."
msgstr "Объект ссылки на публичный ресурс."

#: of yadisk.objects._resources.AsyncPublicResourceLinkObject:9
#: yadisk.objects._resources.AsyncPublicResourceListObject:12
#: yadisk.objects._resources.PublicResourceLinkObject:9
#: yadisk.objects._resources.PublicResourceListObject:12
#: yadisk.objects._resources.SyncPublicResourceLinkObject:9
#: yadisk.objects._resources.SyncPublicResourceListObject:12
msgid "`str`, public key of the resource"
msgstr "`str`, публичный ключ к ресурсу"

#: of yadisk.objects._resources.AsyncPublicResourceLinkObject:10
#: yadisk.objects._resources.PublicResourceLinkObject:10
#: yadisk.objects._resources.SyncPublicResourceLinkObject:10
msgid "`str`, public URL of the resource"
msgstr "`str`, публичный URL ресурса"

#: of yadisk.objects._resources.AsyncPublicResourceListObject:1
#: yadisk.objects._resources.SyncPublicResourceListObject:1
msgid "Bases: :py:class:`~yadisk.objects._resources.PublicResourceListObject`"
msgstr ""
"Базовые классы: "
":py:class:`~yadisk.objects._resources.PublicResourceListObject`"

#: of yadisk.objects._resources.AsyncPublicResourceListObject:1
#: yadisk.objects._resources.AsyncPublicResourcesListObject:1
#: yadisk.objects._resources.PublicResourceListObject:1
#: yadisk.objects._resources.PublicResourcesListObject:1
#: yadisk.objects._resources.SyncPublicResourceListObject:1
#: yadisk.objects._resources.SyncPublicResourcesListObject:1
msgid "List of public resources."
msgstr "Список публичных ресурсов."

#: of yadisk.objects._resources.AsyncPublicResourceListObject:6
#: yadisk.objects._resources.AsyncResourceListObject:6
#: yadisk.objects._resources.AsyncTrashResourceListObject:6
#: yadisk.objects._resources.PublicResourceListObject:6
#: yadisk.objects._resources.ResourceListObject:6
#: yadisk.objects._resources.SyncPublicResourceListObject:6
#: yadisk.objects._resources.SyncResourceListObject:6
#: yadisk.objects._resources.SyncTrashResourceListObject:6
#: yadisk.objects._resources.TrashResourceListObject:6
msgid "`str`, sort type"
msgstr "`str`, тип сортировки"

#: of yadisk.objects._resources.AsyncPublicResourceListObject:10
#: yadisk.objects._resources.AsyncResourceListObject:10
#: yadisk.objects._resources.AsyncTrashResourceListObject:10
#: yadisk.objects._resources.PublicResourceListObject:10
#: yadisk.objects._resources.ResourceListObject:10
#: yadisk.objects._resources.SyncPublicResourceListObject:10
#: yadisk.objects._resources.SyncResourceListObject:10
#: yadisk.objects._resources.SyncTrashResourceListObject:10
#: yadisk.objects._resources.TrashResourceListObject:10
msgid "`str`, path to the directory that contains the elements of the list"
msgstr "`str`, путь к папке, содержащей элементы списка"

#: of yadisk.objects._resources.AsyncPublicResourceListObject:11
#: yadisk.objects._resources.AsyncResourceListObject:11
#: yadisk.objects._resources.AsyncTrashResourceListObject:11
#: yadisk.objects._resources.PublicResourceListObject:11
#: yadisk.objects._resources.ResourceListObject:11
#: yadisk.objects._resources.SyncPublicResourceListObject:11
#: yadisk.objects._resources.SyncResourceListObject:11
#: yadisk.objects._resources.SyncTrashResourceListObject:11
#: yadisk.objects._resources.TrashResourceListObject:11
msgid "`int`, number of elements in the list"
msgstr "`int`, количество элементов списка"

#: of yadisk.objects._resources.AsyncPublicResourceObject:1
msgid ""
"Bases: :py:class:`~yadisk.objects._resources.PublicResourceObject`, "
":py:class:`~yadisk.objects._resources.AsyncResourceObjectMethodsMixin`"
msgstr ""
"Базовые классы: "
":py:class:`~yadisk.objects._resources.PublicResourceObject`, "
":py:class:`~yadisk.objects._resources.AsyncResourceObjectMethodsMixin`"

#: of yadisk.objects._resources.AsyncPublicResourceObject:1
#: yadisk.objects._resources.PublicResourceObject:1
#: yadisk.objects._resources.SyncPublicResourceObject:1
msgid "Public resource object."
msgstr "Объект публичного ресурса."

#: of yadisk.objects._resources.AsyncPublicResourceObject:6
#: yadisk.objects._resources.AsyncResourceObject:6
#: yadisk.objects._resources.AsyncTrashResourceObject:6
#: yadisk.objects._resources.PublicResourceObject:6
#: yadisk.objects._resources.ResourceObject:6
#: yadisk.objects._resources.SyncPublicResourceObject:6
#: yadisk.objects._resources.SyncResourceObject:6
#: yadisk.objects._resources.SyncTrashResourceObject:6
#: yadisk.objects._resources.TrashResourceObject:6
msgid "`str`, antivirus check status"
msgstr "`str`, статус проверки антивирусом"

#: of yadisk.objects._resources.AsyncPublicResourceObject:7
#: yadisk.objects._resources.AsyncResourceObject:7
#: yadisk.objects._resources.AsyncTrashResourceObject:7
#: yadisk.objects._resources.PublicResourceObject:7
#: yadisk.objects._resources.ResourceObject:7
#: yadisk.objects._resources.SyncPublicResourceObject:7
#: yadisk.objects._resources.SyncResourceObject:7
#: yadisk.objects._resources.SyncTrashResourceObject:7
#: yadisk.objects._resources.TrashResourceObject:7
msgid "`str`, download URL"
msgstr "`str`, URL для скачивания файла"

#: of yadisk.objects._resources.AsyncPublicResourceObject:8
#: yadisk.objects._resources.AsyncResourceObject:8
#: yadisk.objects._resources.AsyncTrashResourceObject:8
#: yadisk.objects._resources.PublicResourceObject:8
#: yadisk.objects._resources.ResourceObject:8
#: yadisk.objects._resources.SyncPublicResourceObject:8
#: yadisk.objects._resources.SyncResourceObject:8
#: yadisk.objects._resources.SyncTrashResourceObject:8
#: yadisk.objects._resources.TrashResourceObject:8
msgid "`int`, file size"
msgstr "`int`, размер файла"

#: of yadisk.objects._resources.AsyncPublicResourceObject:9
#: yadisk.objects._resources.AsyncResourceObject:9
#: yadisk.objects._resources.AsyncTrashResourceObject:9
#: yadisk.objects._resources.PublicResourceObject:9
#: yadisk.objects._resources.ResourceObject:9
#: yadisk.objects._resources.SyncPublicResourceObject:9
#: yadisk.objects._resources.SyncResourceObject:9
#: yadisk.objects._resources.SyncTrashResourceObject:9
#: yadisk.objects._resources.TrashResourceObject:9
msgid "`str`, public resource key"
msgstr "`str`, публичный ключ"

#: of yadisk.objects._resources.AsyncPublicResourceObject:10
#: yadisk.objects._resources.AsyncResourceObject:10
#: yadisk.objects._resources.AsyncTrashResourceObject:10
#: yadisk.objects._resources.PublicResourceObject:10
#: yadisk.objects._resources.ResourceObject:10
#: yadisk.objects._resources.SyncPublicResourceObject:10
#: yadisk.objects._resources.SyncResourceObject:10
#: yadisk.objects._resources.SyncTrashResourceObject:10
#: yadisk.objects._resources.TrashResourceObject:10
msgid "`str`, SHA256 hash"
msgstr "`str`, SHA256 хэш"

#: of yadisk.objects._resources.AsyncPublicResourceObject:11
#: yadisk.objects._resources.AsyncResourceObject:11
#: yadisk.objects._resources.AsyncTrashResourceObject:11
#: yadisk.objects._resources.PublicResourceObject:11
#: yadisk.objects._resources.ResourceObject:11
#: yadisk.objects._resources.SyncPublicResourceObject:11
#: yadisk.objects._resources.SyncResourceObject:11
#: yadisk.objects._resources.SyncTrashResourceObject:11
#: yadisk.objects._resources.TrashResourceObject:11
msgid "`str`, MD5 hash"
msgstr "`str`, MD5 хэш"

#: of yadisk.objects._resources.AsyncPublicResourceObject:12
msgid ":any:`AsyncPublicResourceObject`, list of nested resources"
msgstr ":any:`AsyncPublicResourceObject`, список вложенных ресурсов"

#: of yadisk.objects._resources.AsyncPublicResourceObject:13
#: yadisk.objects._resources.AsyncResourceObject:13
#: yadisk.objects._resources.AsyncTrashResourceObject:13
#: yadisk.objects._resources.PublicResourceObject:13
#: yadisk.objects._resources.ResourceObject:13
#: yadisk.objects._resources.SyncPublicResourceObject:13
#: yadisk.objects._resources.SyncResourceObject:13
#: yadisk.objects._resources.SyncTrashResourceObject:13
#: yadisk.objects._resources.TrashResourceObject:13
msgid "`str`, filename"
msgstr "`str`, имя файла"

#: of yadisk.objects._resources.AsyncPublicResourceObject:14
#: yadisk.objects._resources.AsyncResourceObject:14
#: yadisk.objects._resources.AsyncTrashResourceObject:14
#: yadisk.objects._resources.PublicResourceObject:14
#: yadisk.objects._resources.ResourceObject:14
#: yadisk.objects._resources.SyncPublicResourceObject:14
#: yadisk.objects._resources.SyncResourceObject:14
#: yadisk.objects._resources.SyncTrashResourceObject:14
#: yadisk.objects._resources.TrashResourceObject:14
msgid ":any:`EXIFObject`, EXIF metadata"
msgstr ":any:`EXIFObject`, метаданные EXIF"

#: of yadisk.objects._resources.AsyncPublicResourceObject:15
#: yadisk.objects._resources.AsyncResourceObject:15
#: yadisk.objects._resources.AsyncTrashResourceObject:15
#: yadisk.objects._resources.PublicResourceObject:15
#: yadisk.objects._resources.ResourceObject:15
#: yadisk.objects._resources.SyncPublicResourceObject:15
#: yadisk.objects._resources.SyncResourceObject:15
#: yadisk.objects._resources.SyncTrashResourceObject:15
#: yadisk.objects._resources.TrashResourceObject:15
msgid "`str`, resource ID"
msgstr "`str`, идентификатор ресурса"

#: of yadisk.objects._resources.AsyncPublicResourceObject:16
#: yadisk.objects._resources.AsyncResourceObject:16
#: yadisk.objects._resources.AsyncTrashResourceObject:16
#: yadisk.objects._resources.PublicResourceObject:16
#: yadisk.objects._resources.ResourceObject:16
#: yadisk.objects._resources.SyncPublicResourceObject:16
#: yadisk.objects._resources.SyncResourceObject:16
#: yadisk.objects._resources.SyncTrashResourceObject:16
#: yadisk.objects._resources.TrashResourceObject:16
msgid "`dict`, custom resource properties"
msgstr "`dict`, пользовательские свойства ресурса"

#: of yadisk.objects._resources.AsyncPublicResourceObject:17
#: yadisk.objects._resources.AsyncResourceObject:17
#: yadisk.objects._resources.AsyncTrashResourceObject:17
#: yadisk.objects._resources.PublicResourceObject:17
#: yadisk.objects._resources.ResourceObject:17
#: yadisk.objects._resources.SyncPublicResourceObject:17
#: yadisk.objects._resources.SyncResourceObject:17
#: yadisk.objects._resources.SyncTrashResourceObject:17
#: yadisk.objects._resources.TrashResourceObject:17
msgid "`str`, public URL"
msgstr "`str`, публичный URL"

#: of yadisk.objects._resources.AsyncPublicResourceObject:18
#: yadisk.objects._resources.AsyncResourceObject:18
#: yadisk.objects._resources.AsyncTrashResourceObject:18
#: yadisk.objects._resources.PublicResourceObject:18
#: yadisk.objects._resources.ResourceObject:18
#: yadisk.objects._resources.SyncPublicResourceObject:18
#: yadisk.objects._resources.SyncResourceObject:18
#: yadisk.objects._resources.SyncTrashResourceObject:18
#: yadisk.objects._resources.TrashResourceObject:18
msgid ":any:`ShareInfoObject`, shared folder information"
msgstr ":any:`ShareInfoObject`, информация об общей папке"

#: of yadisk.objects._resources.AsyncPublicResourceObject:19
#: yadisk.objects._resources.AsyncResourceObject:19
#: yadisk.objects._resources.AsyncTrashResourceObject:19
#: yadisk.objects._resources.PublicResourceObject:19
#: yadisk.objects._resources.ResourceObject:19
#: yadisk.objects._resources.SyncPublicResourceObject:19
#: yadisk.objects._resources.SyncResourceObject:19
#: yadisk.objects._resources.SyncTrashResourceObject:19
#: yadisk.objects._resources.TrashResourceObject:19
msgid ":any:`datetime.datetime`, date of last modification"
msgstr ":any:`datetime.datetime`, дата последнего изменения"

#: of yadisk.objects._resources.AsyncPublicResourceObject:20
#: yadisk.objects._resources.AsyncResourceObject:20
#: yadisk.objects._resources.AsyncTrashResourceObject:20
#: yadisk.objects._resources.PublicResourceObject:20
#: yadisk.objects._resources.ResourceObject:20
#: yadisk.objects._resources.SyncPublicResourceObject:20
#: yadisk.objects._resources.SyncResourceObject:20
#: yadisk.objects._resources.SyncTrashResourceObject:20
#: yadisk.objects._resources.TrashResourceObject:20
msgid ":any:`datetime.datetime`, date of creation"
msgstr ":any:`datetime.datetime`, дата создания"

#: of yadisk.objects._resources.AsyncPublicResourceObject:21
#: yadisk.objects._resources.AsyncResourceObject:21
#: yadisk.objects._resources.AsyncTrashResourceObject:21
#: yadisk.objects._resources.PublicResourceObject:21
#: yadisk.objects._resources.ResourceObject:21
#: yadisk.objects._resources.SyncPublicResourceObject:21
#: yadisk.objects._resources.SyncResourceObject:21
#: yadisk.objects._resources.SyncTrashResourceObject:21
#: yadisk.objects._resources.TrashResourceObject:21
msgid ":any:`datetime.datetime`, photo/video creation date"
msgstr ":any:`datetime.datetime`, дата создания фото/видео"

#: of yadisk.objects._resources.AsyncPublicResourceObject:22
#: yadisk.objects._resources.AsyncResourceObject:22
#: yadisk.objects._resources.AsyncTrashResourceObject:22
#: yadisk.objects._resources.PublicResourceObject:22
#: yadisk.objects._resources.ResourceObject:22
#: yadisk.objects._resources.SyncPublicResourceObject:22
#: yadisk.objects._resources.SyncResourceObject:22
#: yadisk.objects._resources.SyncTrashResourceObject:22
#: yadisk.objects._resources.TrashResourceObject:22
msgid "`str`, MIME type"
msgstr "`str`, MIME-тип"

#: of yadisk.objects._resources.AsyncPublicResourceObject:23
#: yadisk.objects._resources.AsyncResourceLinkObject:9
#: yadisk.objects._resources.AsyncResourceObject:23
#: yadisk.objects._resources.AsyncTrashResourceObject:23
#: yadisk.objects._resources.PublicResourceObject:23
#: yadisk.objects._resources.ResourceLinkObject:9
#: yadisk.objects._resources.ResourceObject:23
#: yadisk.objects._resources.SyncPublicResourceObject:23
#: yadisk.objects._resources.SyncResourceLinkObject:9
#: yadisk.objects._resources.SyncResourceObject:23
#: yadisk.objects._resources.SyncTrashResourceObject:23
#: yadisk.objects._resources.TrashResourceObject:23
msgid "`str`, path to the resource"
msgstr "`str`, путь к ресурсу"

#: of yadisk.objects._resources.AsyncPublicResourceObject:24
#: yadisk.objects._resources.AsyncResourceObject:24
#: yadisk.objects._resources.AsyncTrashResourceObject:24
#: yadisk.objects._resources.PublicResourceObject:24
#: yadisk.objects._resources.ResourceObject:24
#: yadisk.objects._resources.SyncPublicResourceObject:24
#: yadisk.objects._resources.SyncResourceObject:24
#: yadisk.objects._resources.SyncTrashResourceObject:24
#: yadisk.objects._resources.TrashResourceObject:24
msgid "`str`, file preview URL"
msgstr "`str`, URL превью файла"

#: of yadisk.objects._resources.AsyncPublicResourceObject:25
#: yadisk.objects._resources.AsyncResourceObject:25
#: yadisk.objects._resources.AsyncTrashResourceObject:25
#: yadisk.objects._resources.PublicResourceObject:25
#: yadisk.objects._resources.ResourceObject:25
#: yadisk.objects._resources.SyncPublicResourceObject:25
#: yadisk.objects._resources.SyncResourceObject:25
#: yadisk.objects._resources.SyncTrashResourceObject:25
#: yadisk.objects._resources.TrashResourceObject:25
msgid ":any:`CommentIDsObject`, comment IDs"
msgstr ":any:`CommentIDsObject`, идентификаторы комментариев"

#: of yadisk.objects._resources.AsyncPublicResourceObject:26
#: yadisk.objects._resources.AsyncResourceObject:26
#: yadisk.objects._resources.AsyncTrashResourceObject:26
#: yadisk.objects._resources.PublicResourceObject:26
#: yadisk.objects._resources.ResourceObject:26
#: yadisk.objects._resources.SyncPublicResourceObject:26
#: yadisk.objects._resources.SyncResourceObject:26
#: yadisk.objects._resources.SyncTrashResourceObject:26
#: yadisk.objects._resources.TrashResourceObject:26
msgid "`str`, type (\"file\" or \"dir\")"
msgstr "`str`, тип (\"file\" или \"dir\")"

#: of yadisk.objects._resources.AsyncPublicResourceObject:27
#: yadisk.objects._resources.AsyncResourceObject:27
#: yadisk.objects._resources.AsyncTrashResourceObject:27
#: yadisk.objects._resources.PublicResourceObject:27
#: yadisk.objects._resources.ResourceObject:27
#: yadisk.objects._resources.SyncPublicResourceObject:27
#: yadisk.objects._resources.SyncResourceObject:27
#: yadisk.objects._resources.SyncTrashResourceObject:27
#: yadisk.objects._resources.TrashResourceObject:27
msgid "`str`, file type as determined by Yandex.Disk"
msgstr "`str`, тип файла, согласно Яндекс.Диску"

#: of yadisk.objects._resources.AsyncPublicResourceObject:28
#: yadisk.objects._resources.AsyncResourceObject:28
#: yadisk.objects._resources.AsyncTrashResourceObject:28
#: yadisk.objects._resources.PublicResourceObject:28
#: yadisk.objects._resources.ResourceObject:28
#: yadisk.objects._resources.SyncPublicResourceObject:28
#: yadisk.objects._resources.SyncResourceObject:28
#: yadisk.objects._resources.SyncTrashResourceObject:28
#: yadisk.objects._resources.TrashResourceObject:28
msgid "`int`, Yandex.Disk revision at the time of last modification"
msgstr "`int`, ревизия Яндекс.Диска на момент последнего изменения"

#: of yadisk.objects._resources.AsyncPublicResourceObject:29
#: yadisk.objects._resources.PublicResourceObject:29
#: yadisk.objects._resources.SyncPublicResourceObject:29
msgid "`int`, number of times the public resource was viewed"
msgstr "`int`, количество просмотров публичного ресурса"

#: of yadisk.objects._resources.AsyncPublicResourceObject:30
#: yadisk.objects._resources.PublicResourceObject:30
#: yadisk.objects._resources.SyncPublicResourceObject:30
msgid ":any:`UserPublicInfoObject`, owner of the public resource"
msgstr ":any:`UserPublicInfoObject`, владелец публичного ресурса"

#: of yadisk.objects._resources.AsyncPublicResourcesListObject:1
#: yadisk.objects._resources.SyncPublicResourcesListObject:1
msgid "Bases: :py:class:`~yadisk.objects._resources.PublicResourcesListObject`"
msgstr ""
"Базовые классы: "
":py:class:`~yadisk.objects._resources.PublicResourcesListObject`"

#: of yadisk.objects._resources.AsyncPublicResourcesListObject:6
msgid "`list`, list of public resources (:any:`AsyncPublicResourceObject`)"
msgstr "`list`, список публичных ресурсов (:any:`AsyncPublicResourceObject`)"

#: of yadisk.objects._resources.AsyncPublicResourcesListObject:7
#: yadisk.objects._resources.PublicResourcesListObject:7
#: yadisk.objects._resources.SyncPublicResourcesListObject:7
msgid "`str`, resource type to filter by"
msgstr "`str`, тип ресурса по которому фильтровать"

#: of yadisk.objects._resources.AsyncResourceLinkObject:1
msgid ""
"Bases: :py:class:`~yadisk.objects._resources.ResourceLinkObject`, "
":py:class:`~yadisk.objects._resources.AsyncResourceObjectMethodsMixin`"
msgstr ""
"Базовые классы: "
":py:class:`~yadisk.objects._resources.ResourceLinkObject`, "
":py:class:`~yadisk.objects._resources.AsyncResourceObjectMethodsMixin`"

#: of yadisk.objects._resources.AsyncResourceLinkObject:1
#: yadisk.objects._resources.ResourceLinkObject:1
#: yadisk.objects._resources.SyncResourceLinkObject:1
msgid "Resource link object."
msgstr "Объект ссылки на ресурс."

#: of yadisk.objects._resources.AsyncResourceListObject:1
#: yadisk.objects._resources.PublicResourceListObject:1
#: yadisk.objects._resources.SyncResourceListObject:1
#: yadisk.objects._resources.TrashResourceListObject:1
msgid "Bases: :py:class:`~yadisk.objects._resources.ResourceListObject`"
msgstr "Базовые классы: :py:class:`~yadisk.objects._resources.ResourceListObject`"

#: of yadisk.objects._resources.AsyncResourceListObject:1
#: yadisk.objects._resources.ResourceListObject:1
#: yadisk.objects._resources.SyncResourceListObject:1
msgid "List of resources."
msgstr "Список ресурсов."

#: of yadisk.objects._resources.AsyncResourceObject:1
msgid ""
"Bases: :py:class:`~yadisk.objects._resources.ResourceObject`, "
":py:class:`~yadisk.objects._resources.AsyncResourceObjectMethodsMixin`"
msgstr ""
"Базовые классы: :py:class:`~yadisk.objects._resources.ResourceObject`, "
":py:class:`~yadisk.objects._resources.AsyncResourceObjectMethodsMixin`"

#: of yadisk.objects._resources.AsyncResourceObject:1
#: yadisk.objects._resources.ResourceObject:1
#: yadisk.objects._resources.SyncResourceObject:1
msgid "Resource object."
msgstr "Объект ресурса."

#: of yadisk.objects._resources.AsyncResourceObject:12
msgid ":any:`AsyncResourceListObject`, list of nested resources"
msgstr ":any:`AsyncResourceListObject`, список вложенных ресурсов"

#: of yadisk.objects._resources.AsyncResourceObject:29
#: yadisk.objects._resources.AsyncTrashResourceObject:31
#: yadisk.objects._resources.ResourceObject:29
#: yadisk.objects._resources.SyncResourceObject:29
#: yadisk.objects._resources.SyncTrashResourceObject:31
#: yadisk.objects._resources.TrashResourceObject:31
msgid ""
"`dict[str, str]`, mapping of all preview sizes, where keys are names and "
"values are download links"
msgstr "`dict[str, str]`, соответствие всех размеров превью, где ключи - "
"названия размеров, а значения - ссылки для скачивания превью"

#: of yadisk.objects._resources.AsyncTrashResourceListObject:1
#: yadisk.objects._resources.SyncTrashResourceListObject:1
msgid "Bases: :py:class:`~yadisk.objects._resources.TrashResourceListObject`"
msgstr ""
"Базовые классы: "
":py:class:`~yadisk.objects._resources.TrashResourceListObject`"

#: of yadisk.objects._resources.AsyncTrashResourceListObject:1
#: yadisk.objects._resources.SyncTrashResourceListObject:1
#: yadisk.objects._resources.TrashResourceListObject:1
msgid "List of trash resources."
msgstr "Список ресурсов корзины."

#: of yadisk.objects._resources.AsyncTrashResourceListObject:7
msgid "`list`, list of resources (:any:`AsyncTrashResourceObject`)"
msgstr "`list`, список ресурсов (:any:`AsyncTrashResourceObject`)"

#: of yadisk.objects._resources.AsyncTrashResourceObject:1
#: yadisk.objects._resources.SyncTrashResourceObject:1
msgid "Bases: :py:class:`~yadisk.objects._resources.TrashResourceObject`"
msgstr "Базовые классы: :py:class:`~yadisk.objects._resources.TrashResourceObject`"

#: of yadisk.objects._resources.AsyncTrashResourceObject:1
#: yadisk.objects._resources.SyncTrashResourceObject:1
#: yadisk.objects._resources.TrashResourceObject:1
msgid "Trash resource object."
msgstr "Объект ресурса корзины."

#: of yadisk.objects._resources.AsyncTrashResourceObject:12
msgid ":any:`AsyncTrashResourceListObject`, list of nested resources"
msgstr ":any:`AsyncTrashResourceListObject`, список вложенных ресурсов"

#: of yadisk.objects._resources.AsyncTrashResourceObject:29
#: yadisk.objects._resources.SyncTrashResourceObject:29
#: yadisk.objects._resources.TrashResourceObject:29
msgid "`str`, original path"
msgstr "`str`, оригинальный путь"

#: of yadisk.objects._resources.AsyncTrashResourceObject:30
#: yadisk.objects._resources.SyncTrashResourceObject:30
#: yadisk.objects._resources.TrashResourceObject:30
msgid ":any:`datetime.datetime`, date of deletion"
msgstr ":any:`datetime.datetime`, дата удаления"

#: of yadisk.objects._resources.AsyncTrashResourceObject.exists:1
#: yadisk.objects._resources.SyncTrashResourceObject.exists:1
msgid "Check whether the trash resource exists."
msgstr "Проверяет, существует ли ресурс в корзине."

#: of yadisk.objects._resources.AsyncTrashResourceObject.exists:3
#: yadisk.objects._resources.AsyncTrashResourceObject.get_meta:3
#: yadisk.objects._resources.AsyncTrashResourceObject.get_type:3
#: yadisk.objects._resources.AsyncTrashResourceObject.is_dir:3
#: yadisk.objects._resources.AsyncTrashResourceObject.is_file:3
#: yadisk.objects._resources.SyncTrashResourceObject.exists:3
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:3
#: yadisk.objects._resources.SyncTrashResourceObject.get_type:3
#: yadisk.objects._resources.SyncTrashResourceObject.is_dir:3
#: yadisk.objects._resources.SyncTrashResourceObject.is_file:3
msgid "`str` or `None`, relative path to the trash resource"
msgstr "`str` или `None`, относительный путь к ресурсу"

#: of yadisk.objects._resources.AsyncTrashResourceObject.is_dir:1
#: yadisk.objects._resources.SyncTrashResourceObject.is_dir:1
msgid "Check whether resource is a trash directory."
msgstr "Проверяет, является ли ресурс папкой в корзине."

#: of yadisk.objects._resources.AsyncTrashResourceObject.is_file:1
#: yadisk.objects._resources.SyncTrashResourceObject.is_file:1
msgid "Check whether resource is a trash file."
msgstr "Проверяет, является ли ресурс файлом в корзине."

#: of yadisk.objects._resources.AsyncTrashResourceObject.listdir:3
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:3
msgid "`str` or `None`, relative path to the directory in the trash bin"
msgstr "`str` или `None`, относительный путь к папке в корзине"

#: of yadisk.objects._resources.AsyncTrashResourceObject.listdir:23
msgid "generator of :any:`AsyncTrashResourceObject`"
msgstr "генератор :any:`AsyncTrashResourceObject`"

#: of yadisk.objects._resources.AsyncTrashResourceObject.remove:3
#: yadisk.objects._resources.SyncTrashResourceObject.remove:3
msgid "`str` or `None`, relative path to the trash resource to be deleted"
msgstr ""
"`str` или `None`, относительный путь к ресурсу корзины, подлежащий "
"удалению"

#: of yadisk.objects._resources.AsyncTrashResourceObject.restore:4
#: yadisk.objects._resources.SyncTrashResourceObject.restore:4
msgid "This method takes 1 or 2 positional arguments:"
msgstr "Данный метод принимает 1 или 2 позиционных аргумента:"

#: of yadisk.objects._resources.AsyncTrashResourceObject.restore:6
#: yadisk.objects._resources.SyncTrashResourceObject.restore:6
msgid ":code:`restore(dst_path, /, **kwargs)`"
msgstr ":code:`restore(dst_path, /, **kwargs)`"

#: of yadisk.objects._resources.AsyncTrashResourceObject.restore:7
#: yadisk.objects._resources.SyncTrashResourceObject.restore:7
msgid ":code:`restore(relative_path=None, dst_path, /, **kwargs)`"
msgstr ":code:`restore(relative_path=None, dst_path, /, **kwargs)`"

#: of yadisk.objects._resources.AsyncTrashResourceObject.restore:9
#: yadisk.objects._resources.SyncTrashResourceObject.restore:9
msgid "`str` or `None`, relative path to the trash resource to be restored"
msgstr "`str` или `None`, относительный путь к восстанавливаему ресурсу"

#: of yadisk.objects._auth.DeviceCodeObject:1
#: yadisk.objects._auth.TokenObject:1
#: yadisk.objects._auth.TokenRevokeStatusObject:1
#: yadisk.objects._disk.DiskInfoObject:1
#: yadisk.objects._disk.SystemFoldersObject:1 yadisk.objects._disk.UserObject:1
#: yadisk.objects._error_object.ErrorObject:1
#: yadisk.objects._link_object.LinkObject:1
#: yadisk.objects._operations.OperationStatusObject:1
#: yadisk.objects._resources.CommentIDsObject:1
#: yadisk.objects._resources.EXIFObject:1
#: yadisk.objects._resources.FilesResourceListObject:1
#: yadisk.objects._resources.LastUploadedResourceListObject:1
#: yadisk.objects._resources.PublicResourcesListObject:1
#: yadisk.objects._resources.ResourceListObject:1
#: yadisk.objects._resources.ResourceObject:1
#: yadisk.objects._resources.ShareInfoObject:1
msgid "Bases: :py:class:`~yadisk.objects._yadisk_object.YaDiskObject`"
msgstr "Базовые классы: :py:class:`~yadisk.objects._yadisk_object.YaDiskObject`"

#: of yadisk.objects._resources.CommentIDsObject:1
msgid "Comment IDs object."
msgstr "Список идентификаторов комментариев."

#: of yadisk.objects._link_object.LinkObject:4
#: yadisk.objects._operations.OperationLinkObject:4
#: yadisk.objects._resources.CommentIDsObject:4
#: yadisk.objects._resources.EXIFObject:4
#: yadisk.objects._resources.FilesResourceListObject:4
#: yadisk.objects._resources.LastUploadedResourceListObject:4
#: yadisk.objects._resources.PublicResourceLinkObject:4
#: yadisk.objects._resources.PublicResourceListObject:4
#: yadisk.objects._resources.PublicResourceObject:4
#: yadisk.objects._resources.PublicResourcesListObject:4
#: yadisk.objects._resources.ResourceDownloadLinkObject:4
#: yadisk.objects._resources.ResourceLinkObject:4
#: yadisk.objects._resources.ResourceListObject:4
#: yadisk.objects._resources.ResourceObject:4
#: yadisk.objects._resources.ResourceUploadLinkObject:4
#: yadisk.objects._resources.ShareInfoObject:4
#: yadisk.objects._resources.TrashResourceListObject:4
#: yadisk.objects._resources.TrashResourceObject:4
msgid ":any:`Client`/:any:`AsyncClient` or `None`, `YaDisk` object"
msgstr ":any:`Client`/:any:`AsyncClient` или `None`, объект `YaDisk`"

#: of yadisk.objects._resources.CommentIDsObject:6
msgid "`str`, comment ID for private resources"
msgstr "`str`, идентификатор комментария для приватных ресурсов"

#: of yadisk.objects._resources.CommentIDsObject:7
msgid "`str`, comment ID for public resources"
msgstr "`str`, идентификатор комментария для публичных ресурсов"

#: of yadisk.objects._auth.DeviceCodeObject:1
msgid ""
"Result of :any:`Client.get_device_code()` / "
":any:`AsyncClient.get_device_code()`."
msgstr ""
"Результат :any:`Client.get_device_code()` / "
":any:`AsyncClient.get_device_code()`."

#: of yadisk.objects._auth.DeviceCodeObject:4
#: yadisk.objects._auth.TokenObject:4
#: yadisk.objects._auth.TokenRevokeStatusObject:4
#: yadisk.objects._disk.DiskInfoObject:4
#: yadisk.objects._disk.SystemFoldersObject:4 yadisk.objects._disk.UserObject:4
#: yadisk.objects._disk.UserPublicInfoObject:5
#: yadisk.objects._operations.OperationStatusObject:4
#: yadisk.objects._yadisk_object.YaDiskObject:6
msgid ":any:`YaDisk` or `None`, `YaDisk` object"
msgstr ":any:`YaDisk` или `None`, объект `YaDisk`"

#: of yadisk.objects._auth.DeviceCodeObject:6
msgid "`str`, device code that can be used for obtaining the token"
msgstr "`str`, код устройства, который может быть использован для получения токена"

#: of yadisk.objects._auth.DeviceCodeObject:7
msgid "`str`, code that the user should enter on the OAuth page"
msgstr "`str`, код, который пользователь должен ввести на странице OAuth"

#: of yadisk.objects._auth.DeviceCodeObject:8
msgid ""
"`str`, URL of the OAuth page where user is expected to enter the "
":code:`user_code`"
msgstr ""
"`str`, URL страницы OAuth, на которой пользователь должен ввести "
":code:`user_code`"

#: of yadisk.objects._auth.DeviceCodeObject:10
msgid ""
"`int`, the minimum interval (in seconds) with which the app must request "
"an OAuth token. If requests come more often, Yandex OAuth may respond "
"with an error"
msgstr ""
"`int`, минимальный интервал времени (в секундах), с которым приложение "
"должно запрашивать OAuth токен. Если запросы будут поступать чаще, Яндекс"
" OAuth может вернуть ошибку"

#: of yadisk.objects._auth.DeviceCodeObject:13
msgid "`int`, amount of time before the codes expire"
msgstr "`int`, количество времени, после которого коды истекают"

#: of yadisk.objects._disk.DiskInfoObject:1
msgid "Disk information object."
msgstr "Объект информации о диске."

#: of yadisk.objects._disk.DiskInfoObject:6
msgid "`int`, maximum supported file size for a paid account (bytes)"
msgstr ""
"`int`, максимальный поддерживаемый размер файла для платного аккаунта (в "
"байтах)"

#: of yadisk.objects._disk.DiskInfoObject:7
msgid "`int`, maximum supported file size (bytes)"
msgstr "`int`, максимальный поддерживаемый размер файла (в байтах)"

#: of yadisk.objects._disk.DiskInfoObject:8
msgid "`int`, total disk size (bytes)"
msgstr "`int`, общий размер диска (в байтах)"

#: of yadisk.objects._disk.DiskInfoObject:9
msgid "`int`, amount of space used by trash (bytes), part of `used_space`"
msgstr "`int`, размер, занятый мусором (в байтах), часть `used_space`"

#: of yadisk.objects._disk.DiskInfoObject:10
msgid "`int`, amount of space used (bytes)"
msgstr "`int`, количество занятого места (в байтах)"

#: of yadisk.objects._disk.DiskInfoObject:11
msgid "`bool`, tells if the account is paid or not"
msgstr "`bool`, признак платного аккаунта"

#: of yadisk.objects._disk.DiskInfoObject:12
#: yadisk.objects._disk.DiskInfoObject:16
msgid "`bool`, not clear what this is for"
msgstr "`bool`, не ясно, для чего это"

#: of yadisk.objects._disk.DiskInfoObject:13 yadisk.objects._disk.UserObject:6
msgid ":any:`datetime.datetime`, Disk registration date"
msgstr ":any:`datetime.datetime`, дата регистрации"

#: of yadisk.objects._disk.DiskInfoObject:14
msgid ":any:`SystemFoldersObject`, paths to the system folders"
msgstr ":any:`SystemFoldersObject`, пути к системным папкам"

#: of yadisk.objects._disk.DiskInfoObject:15
msgid ":any:`UserObject`, owner of the disk"
msgstr ":any:`UserObject`, владелец диска"

#: of yadisk.objects._disk.DiskInfoObject:17
msgid "`bool`, tells whether unlimited autoupload from mobile devices is enabled"
msgstr "`bool`, признак включенной безлимитной автозагрузки с мобильных устройств"

#: of yadisk.objects._disk.DiskInfoObject:19
msgid "`int`, current revision of Yandex.Disk"
msgstr "`int`, текущая ревизия Яндекс.Диска"

#: of yadisk.objects._disk.DiskInfoObject:20
msgid "`int`, total file size in unlimited photos"
msgstr "`int`, общий размер файлов в фотобезлимите"

#: of yadisk.objects._disk.DiskInfoObject:21
msgid ""
"`bool`, tells if the user will be in overdraft upon reaching "
"`free_photounlim_end_date`"
msgstr "`bool`, признак - будет ли пользователь в овердрафте по достижении free_photounlim_end_date"

#: of yadisk.objects._disk.DiskInfoObject:23
msgid "`int`, timestamp in ms of expiration date of unlimited photo upload"
msgstr "`int`, timestamp в мс окончания бесплатного места в фотобезлимите"

#: of yadisk.objects._disk.DiskInfoObject:25
msgid "`bool`, tells if the user is involved in `payment_flow`"
msgstr "`bool`, признак причастности пользователя к payment_flow"

#: of yadisk.objects._resources.EXIFObject:1
msgid "EXIF metadata object."
msgstr "Объект метаданных EXIF."

#: of yadisk.objects._resources.EXIFObject:6
msgid ":any:`datetime.datetime`, capture date"
msgstr ":any:`datetime.datetime`, дата съёмки"

#: of yadisk.objects._resources.EXIFObject:7
msgid "`float`, longitude of the photo's location"
msgstr "`str`, координата съёмки (долгота)"

#: of yadisk.objects._resources.EXIFObject:8
msgid "`float`, latitude of the photo's location"
msgstr "`str`, координата съёмки (широта)"

#: of yadisk.objects._error_object.ErrorObject:1
msgid "Mirrors Yandex.Disk REST API error object."
msgstr "Реализует объект ошибки REST API Яндекс.Диска."

#: of yadisk.objects._error_object.ErrorObject:4
msgid "`YaDisk` or `None`, `YaDisk` object"
msgstr "`YaDisk` или `None`, объект `YaDisk`"

#: of yadisk.objects._error_object.ErrorObject:6
msgid "`str`, human-readable error message"
msgstr "`str`, человеко-читаемое сообщение ошибки"

#: of yadisk.objects._error_object.ErrorObject:7
msgid "`str`, technical error description"
msgstr "`str`, техническое описание ошибки"

#: of yadisk.objects._error_object.ErrorObject:8
msgid "`str`, error code"
msgstr "`str`, уникальный код ошибки"

#: of yadisk.objects._resources.FilesResourceListObject:6
msgid "`list`, flat list of files (:any:`ResourceObject`)"
msgstr "`list`, плоский список файлов (:any:`ResourceObject`)"

#: of yadisk.objects._resources.LastUploadedResourceListObject:6
#: yadisk.objects._resources.PublicResourceListObject:7
#: yadisk.objects._resources.ResourceListObject:7
msgid "`list`, list of resources (:any:`ResourceObject`)"
msgstr "`list`, список ресурсов (:any:`ResourceObject`)"

#: of yadisk.objects._link_object.LinkObject:1
msgid "Link object."
msgstr "Объект ссылки."

#: of yadisk.objects._operations.OperationLinkObject:1
#: yadisk.objects._resources.PublicResourceLinkObject:1
#: yadisk.objects._resources.ResourceDownloadLinkObject:1
#: yadisk.objects._resources.ResourceLinkObject:1
#: yadisk.objects._resources.ResourceUploadLinkObject:1
msgid "Bases: :py:class:`~yadisk.objects._link_object.LinkObject`"
msgstr "Базовые классы: :py:class:`~yadisk.objects._link_object.LinkObject`"

#: of yadisk.objects._operations.OperationStatusObject:1
msgid "Operation status object."
msgstr "Объект статуса операции."

#: of yadisk.objects._auth.TokenRevokeStatusObject:6
#: yadisk.objects._operations.OperationStatusObject:6
msgid "`str`, status of the operation"
msgstr "`str`, статус операции"

#: of yadisk.objects._resources.PublicResourceObject:1
#: yadisk.objects._resources.TrashResourceObject:1
msgid "Bases: :py:class:`~yadisk.objects._resources.ResourceObject`"
msgstr "Базовые классы: :py:class:`~yadisk.objects._resources.ResourceObject`"

#: of yadisk.objects._resources.PublicResourceObject:12
msgid ":any:`PublicResourceObject`, list of nested resources"
msgstr ":any:`PublicResourceObject`, список вложенных ресурсов"

#: of yadisk.objects._resources.PublicResourcesListObject:6
msgid "`list`, list of public resources (:any:`PublicResourceObject`)"
msgstr "`list`, список публичных ресурсов (:any:`PublicResourceObject`)"

#: of yadisk.objects._resources.ResourceDownloadLinkObject:1
msgid "Resource download link."
msgstr "Ссылка для скачивания ресурса."

#: of yadisk.objects._resources.ResourceObject:12
msgid ":any:`ResourceListObject`, list of nested resources"
msgstr ":any:`ResourceListObject`, список вложенных ресурсов"

#: of yadisk.objects._resources.ResourceUploadLinkObject:1
msgid "Resource upload link."
msgstr "Ссылка для загрузки файла."

#: of yadisk.objects._resources.ResourceUploadLinkObject:6
msgid "`str`, ID of the upload operation"
msgstr "`str`, идентификатор операции по загрузке файла"

#: of yadisk.objects._resources.ShareInfoObject:1
msgid "Shared folder information object."
msgstr "Объект информации об общей папке."

#: of yadisk.objects._resources.ShareInfoObject:6
msgid "`bool`, tells whether the folder is root"
msgstr "`bool`, признак того, что папка является корневой"

#: of yadisk.objects._resources.ShareInfoObject:7
msgid "`bool`, tells whether the user is the owner of this directory"
msgstr "`bool`, признак того, что пользователь является владельцем этой папки"

#: of yadisk.objects._resources.ShareInfoObject:8
msgid "`str`, access rights"
msgstr "`str`, права доступа"

#: of yadisk.objects._operations.SyncOperationLinkObject:4
#: yadisk.objects._resources.SyncFilesResourceListObject:4
#: yadisk.objects._resources.SyncLastUploadedResourceListObject:4
#: yadisk.objects._resources.SyncPublicResourceLinkObject:4
#: yadisk.objects._resources.SyncPublicResourceListObject:4
#: yadisk.objects._resources.SyncPublicResourceObject:4
#: yadisk.objects._resources.SyncPublicResourcesListObject:4
#: yadisk.objects._resources.SyncResourceLinkObject:4
#: yadisk.objects._resources.SyncResourceListObject:4
#: yadisk.objects._resources.SyncResourceObject:4
#: yadisk.objects._resources.SyncTrashResourceListObject:4
#: yadisk.objects._resources.SyncTrashResourceObject:4
msgid ":any:`Client` or `None`, `YaDisk` object"
msgstr ":any:`Client` или `None`, объект `YaDisk`"

#: of yadisk.objects._resources.SyncFilesResourceListObject:6
msgid "`list`, flat list of files (:any:`SyncResourceObject`)"
msgstr "`list`, плоский список файлов (:any:`SyncResourceObject`)"

#: of yadisk.objects._resources.SyncLastUploadedResourceListObject:6
#: yadisk.objects._resources.SyncPublicResourceListObject:7
#: yadisk.objects._resources.SyncResourceListObject:7
msgid "`list`, list of resources (:any:`SyncResourceObject`)"
msgstr "`list`, список ресурсов (:any:`SyncResourceObject`)"

#: of yadisk._client.Client.wait_for_operation:1
#: yadisk.objects._operations.SyncOperationLinkObject.wait:1
msgid ""
"Wait until an operation is completed. If the operation fails, an "
"exception is raised. Waiting is performed by calling :any:`time.sleep`."
msgstr ""
"Ждёт, пока операция не будет выполнена. Если операция не удалась, "
"вызывает исключение. Ожидание осуществляется с помощью вызова "
":any:`time.sleep`."

#: of yadisk.objects._resources.SyncPublicResourceLinkObject:1
msgid ""
"Bases: :py:class:`~yadisk.objects._resources.PublicResourceLinkObject`, "
":py:class:`~yadisk.objects._resources.ResourceObjectMethodsMixin`"
msgstr ""
"Базовые классы: "
":py:class:`~yadisk.objects._resources.PublicResourceLinkObject`, "
":py:class:`~yadisk.objects._resources.ResourceObjectMethodsMixin`"

#: of yadisk.objects._resources.SyncPublicResourceObject:1
msgid ""
"Bases: :py:class:`~yadisk.objects._resources.PublicResourceObject`, "
":py:class:`~yadisk.objects._resources.ResourceObjectMethodsMixin`"
msgstr ""
"Базовые классы: "
":py:class:`~yadisk.objects._resources.PublicResourceObject`, "
":py:class:`~yadisk.objects._resources.ResourceObjectMethodsMixin`"

#: of yadisk.objects._resources.SyncPublicResourceObject:12
msgid ":any:`SyncPublicResourceObject`, list of nested resources"
msgstr ":any:`SyncPublicResourceObject`, список вложенных ресурсов"

#: of yadisk.objects._resources.SyncPublicResourcesListObject:6
msgid "`list`, list of public resources (:any:`SyncPublicResourceObject`)"
msgstr "`list`, список публичных ресурсов (:any:`SyncPublicResourceObject`)"

#: of yadisk.objects._resources.SyncResourceLinkObject:1
msgid ""
"Bases: :py:class:`~yadisk.objects._resources.ResourceLinkObject`, "
":py:class:`~yadisk.objects._resources.ResourceObjectMethodsMixin`"
msgstr ""
"Базовые классы: "
":py:class:`~yadisk.objects._resources.ResourceLinkObject`, "
":py:class:`~yadisk.objects._resources.ResourceObjectMethodsMixin`"

#: of yadisk.objects._resources.SyncResourceObject:1
msgid ""
"Bases: :py:class:`~yadisk.objects._resources.ResourceObject`, "
":py:class:`~yadisk.objects._resources.ResourceObjectMethodsMixin`"
msgstr ""
"Базовые классы: :py:class:`~yadisk.objects._resources.ResourceObject`, "
":py:class:`~yadisk.objects._resources.ResourceObjectMethodsMixin`"

#: of yadisk.objects._resources.SyncResourceObject:12
msgid ":any:`SyncResourceListObject`, list of nested resources"
msgstr ":any:`SyncResourceListObject`, список вложенных ресурсов"

#: of yadisk.objects._resources.SyncTrashResourceListObject:7
msgid "`list`, list of resources (:any:`SyncTrashResourceObject`)"
msgstr "`list`, список ресурсов (:any:`SyncTrashResourceObject`)"

#: of yadisk.objects._resources.SyncTrashResourceObject:12
msgid ":any:`SyncTrashResourceListObject`, list of nested resources"
msgstr ":any:`SyncTrashResourceListObject`, список вложенных ресурсов"

#: of yadisk._client.Client.get_trash_meta:23
#: yadisk.objects._resources.SyncTrashResourceObject.get_meta:23
msgid ":any:`SyncTrashResourceObject`"
msgstr ":any:`SyncTrashResourceObject`"

#: of yadisk._client.Client.trash_listdir:24
#: yadisk.objects._resources.SyncTrashResourceObject.listdir:24
msgid "generator of :any:`SyncTrashResourceObject`"
msgstr "генератор :any:`SyncTrashResourceObject`"

#: of yadisk._client.Client.remove:33 yadisk._client.Client.remove_trash:29
#: yadisk.objects._resources.SyncTrashResourceObject.remove:29
msgid ""
":any:`SyncOperationLinkObject` if the operation is performed "
"asynchronously, `None` otherwise"
msgstr ""
":any:`SyncOperationLinkObject`, если операция выполняется асинхронно, "
"иначе `None`"

#: of yadisk._client.Client.copy:37 yadisk._client.Client.move:32
#: yadisk._client.Client.rename:34 yadisk._client.Client.restore_trash:33
#: yadisk._client.Client.save_to_disk:36
#: yadisk.objects._resources.SyncTrashResourceObject.restore:38
msgid ":any:`SyncResourceLinkObject` or :any:`SyncOperationLinkObject`"
msgstr ":any:`SyncResourceLinkObject` или :any:`SyncOperationLinkObject`"

#: of yadisk.objects._disk.SystemFoldersObject:1
msgid "Object, containing paths to system folders."
msgstr "Объект, содержащий пути к системным папкам."

#: of yadisk.objects._disk.SystemFoldersObject:6
msgid "`str`, path to the Odnoklassniki folder"
msgstr "`str`, путь к папке Одноклассников"

#: of yadisk.objects._disk.SystemFoldersObject:7
msgid "`str`, path to the Google+ folder"
msgstr "`str`, путь к папке Google+"

#: of yadisk.objects._disk.SystemFoldersObject:8
msgid "`str`, path to the Instagram folder"
msgstr "`str`, путь к папке Instagram"

#: of yadisk.objects._disk.SystemFoldersObject:9
msgid "`str`, path to the VKontakte folder"
msgstr "`str`, путь к папке ВКонтакте"

#: of yadisk.objects._disk.SystemFoldersObject:10
msgid "`str`, path to the mail attachments folder"
msgstr "`str`, путь к папке \"Почтовые вложения\""

#: of yadisk.objects._disk.SystemFoldersObject:11
msgid "`str`, path to the My World folder"
msgstr "`str`, путь к папке Моего Мира"

#: of yadisk.objects._disk.SystemFoldersObject:12
msgid "`str`, path to the Downloads folder"
msgstr "`str`, путь к папке \"Загрузки\""

#: of yadisk.objects._disk.SystemFoldersObject:13
msgid "`str` path to the Applications folder"
msgstr "`str`, путь к папке \"Приложения\""

#: of yadisk.objects._disk.SystemFoldersObject:14
msgid "`str`, path to the Facebook folder"
msgstr "`str`, путь к папке Facebook"

#: of yadisk.objects._disk.SystemFoldersObject:15
msgid "`str`, path to the social networks folder"
msgstr "`str`, путь к папке социальных сетей"

#: of yadisk.objects._disk.SystemFoldersObject:16
msgid "`str`, path to the Messenger Files folder"
msgstr "`str`, путь к папке \"Файлы Мессенджера\""

#: of yadisk.objects._disk.SystemFoldersObject:17
msgid "`str`, path to the Meeting Materials folder"
msgstr "`str`, путь к папке \"Материалы встреч\""

#: of yadisk.objects._disk.SystemFoldersObject:18
msgid "`str`, path to the camera folder"
msgstr "`str`, путь к папке фотокамеры"

#: of yadisk.objects._disk.SystemFoldersObject:19
msgid "`str`, path to the screenshot folder"
msgstr "`str`, путь к папке скриншотов"

#: of yadisk.objects._disk.SystemFoldersObject:20
msgid "`str`, path to the Scans folder"
msgstr "`str`, путь к папке \"Сканы\""

#: of yadisk.objects._auth.TokenObject:1
msgid "Token object."
msgstr "Объект токена."

#: of yadisk.objects._auth.TokenObject:6
msgid "`str`, token string"
msgstr "`str`, строка токена"

#: of yadisk.objects._auth.TokenObject:7
msgid "`str`, the refresh-token"
msgstr "`str`, refresh-токен"

#: of yadisk.objects._auth.TokenObject:8
msgid "`str`, type of the token"
msgstr "`str`, тип токена"

#: of yadisk.objects._auth.TokenObject:9
msgid "`int`, amount of time before the token expires"
msgstr "`int`, количество времени, на которое выдаётся токен"

#: of yadisk.objects._auth.TokenObject:10
msgid ""
"`str`, list of rights requested by the application, returned only if the "
"token has a smaller set of rights than requested"
msgstr ""
"`str`, список прав, запрашиваемых приложением, возвращается только если "
"токен обладает меньшим набором прав, чем было запрошено"

#: of yadisk.objects._auth.TokenRevokeStatusObject:1
msgid "Result of token revocation request."
msgstr "Результат запроса по отзыву токена."

#: of yadisk.objects._resources.TrashResourceListObject:7
msgid "`list`, list of resources (:any:`TrashResourceObject`)"
msgstr "`list`, список ресурсов (:any:`TrashResourceObject`)"

#: of yadisk.objects._resources.TrashResourceObject:12
msgid ":any:`TrashResourceListObject`, list of nested resources"
msgstr ":any:`ResourceListObject`, список вложенных ресурсов"

#: of yadisk.objects._disk.UserObject:1
msgid "User object."
msgstr "Объект пользователя."

#: of yadisk.objects._disk.UserObject:7
#: yadisk.objects._disk.UserPublicInfoObject:8
msgid "`str`, user's display name"
msgstr "`str`, отображаемое имя пользователя"

#: of yadisk.objects._disk.UserObject:8
#: yadisk.objects._disk.UserPublicInfoObject:9
msgid "`str`, user's UID"
msgstr "`str`, уникальный идентификатор пользователя"

#: of yadisk.objects._disk.UserObject:9
msgid "`str`, user's country"
msgstr "`str`, страна пользователя"

#: of yadisk.objects._disk.UserObject:10
msgid "`bool`, tells whether it's a child account"
msgstr "`bool`, признак того, что аккаунт является детским"

#: of yadisk.objects._disk.UserObject:11
#: yadisk.objects._disk.UserPublicInfoObject:7
msgid "`str`, user's login"
msgstr "`str`, логин пользователя"

#: of yadisk.objects._disk.UserPublicInfoObject:1
msgid "Bases: :py:class:`~yadisk.objects._disk.UserObject`"
msgstr "Базовые классы: :py:class:`~yadisk.objects._disk.UserObject`"

#: of yadisk.objects._disk.UserPublicInfoObject:1
msgid ""
"Public user information object. Inherits from :any:`UserObject` for "
"compatibility."
msgstr ""
"Публичная информация о пользователе. Наследуется от :any:`UserObject` для"
" совместимости."

#: of yadisk.objects._yadisk_object.YaDiskObject:1
msgid "Bases: :py:class:`object`"
msgstr "Базовые классы: :py:class:`object`"

#: of yadisk.objects._yadisk_object.YaDiskObject:1
msgid ""
"Base class for all objects mirroring the ones returned by Yandex.Disk "
"REST API. It must have a fixed number of fields, each field must have a "
"type. It also supports subscripting and access of fields through the . "
"operator."
msgstr ""
"Базовый класс для всех объектов, реализующий объекты, возвращаемые REST "
"API Яндекс.Диска. У наследующего объекта фиксированное количество полей, "
"каждое со своим типом. Поддерживает доступ по индексу и через точку."

#: of yadisk.objects._yadisk_object.YaDiskObject.__matmul__:1
msgid ""
"The :code:`@` operator. Same as :any:`YaDiskObject.field()`. Can be used "
"like this:"
msgstr ""
"Оператор :code:`@`. Делает то же самое, что "
":any:`YaDiskObject.field()`.Может быть использован следующим образом:"

#: of yadisk.objects._yadisk_object.YaDiskObject.__matmul__:10
#: yadisk.objects._yadisk_object.YaDiskObject.field:4
msgid "`str`, name of the field"
msgstr "`str`, имя поля"

#: of yadisk.objects._yadisk_object.YaDiskObject.__matmul__:12
#: yadisk.objects._yadisk_object.YaDiskObject.field:6
msgid "value of the given field is :code:`None`"
msgstr "значение требуемого поля - :code:`None`"

#: of yadisk.objects._yadisk_object.YaDiskObject.__matmul__:14
#: yadisk.objects._yadisk_object.YaDiskObject.field:8
msgid "field's value"
msgstr "значение поля"

#: of yadisk.objects._yadisk_object.YaDiskObject.field:1
msgid ""
"Get value of field `name`, guarantee it's not :code:`None` or raise a "
":any:`ValueError`."
msgstr ""
"Получает значение поля `name`, гарантируя, что оно не :code:`None` или "
"вызывает :any:`ValueError` в противном случае"

#: of yadisk.objects._yadisk_object.YaDiskObject.import_fields:1
msgid ""
"Set all the fields of the object to the values in `source_dict`. All the "
"other fields are ignored"
msgstr ""
"Задаёт значения всех полей объекта из `source_dict`. Все остальные ключи "
"игнорируются."

#: of yadisk.objects._yadisk_object.YaDiskObject.import_fields:4
msgid "`dict` or `None` (nothing will be done in that case)"
msgstr "`dict` или `None` (тогда ничего не будет сделано)"

#: of yadisk.objects._yadisk_object.YaDiskObject.remove_alias:1
msgid "Remove an alias."
msgstr "Удаляет псевдоним."

#: of yadisk.objects._yadisk_object.YaDiskObject.remove_field:1
msgid "Remove field."
msgstr "Удаляет поле."

#: of yadisk.objects._yadisk_object.YaDiskObject.set_alias:1
msgid "Set an alias."
msgstr "Задаёт псевдоним."

#: of yadisk.objects._yadisk_object.YaDiskObject.set_alias:3
msgid "`str`, alias to add"
msgstr "`str`, псевдоним"

#: of yadisk.objects._yadisk_object.YaDiskObject.set_alias:4
msgid "`str`, field name"
msgstr "`str`, имя поля"

#: of yadisk.objects._yadisk_object.YaDiskObject.set_field_type:1
msgid "Set field type."
msgstr "Задаёт тип поля."

#: of yadisk.objects._yadisk_object.YaDiskObject.set_field_type:4
msgid "type or factory"
msgstr "тип данных или factory"

#: of yadisk.objects._yadisk_object.YaDiskObject.set_field_types:1
msgid "Set the field types of the object"
msgstr "Задаёт типы полей объекта"

#: of yadisk.objects._yadisk_object.YaDiskObject.set_field_types:3
msgid "`dict`, where keys are the field names and values are types (or factories)"
msgstr "`dict`, где ключи - это наименования полей, а значения - это типы"

#: ../../api_reference/session_interface.rst:2
msgid "Session Interface"
msgstr "Интерфейс Session"

#: ../../api_reference/session_interface.rst:4
msgid ""
"The :any:`Session` and :any:`AsyncSession` are abstract classes that act "
"as adapters to underlying HTTP client libraries. A session instance is "
"used by :any:`Client` or :any:`AsyncClient` to perform all the HTTP "
"requests to the Yandex.Disk API."
msgstr ""
":any:`Session` и :any:`AsyncSession` - абстрактные классы, которые "
"работают в качестве адаптеров для нижележащих HTTP библиотек. Экземпляр "
"сессии используется в :any:`Client` или :any:`AsyncSession` для "
"выполнения всех HTTP запросов к API Яндекс.Диска."

#: ../../api_reference/session_interface.rst:8
msgid ""
"These interfaces can be implemented to add support for any HTTP library. "
"For a concrete example, see the source code of any existing "
"implementation (e.g. :any:`HTTPXSession`)."
msgstr ""
"Эти интерфейсы могут быть реализованы, чтобы добавить поддержку любой "
"HTTP библиотеки. Для конкретного примера см. исходный код любой из "
"существующих реализаций (например, :any:`HTTPXSession`)."

#: ../../api_reference/session_interface.rst:13
msgid "Synchronous"
msgstr "Синхронный"

#: of yadisk._async_session.AsyncSession:1 yadisk._session.Session:1
msgid ""
"HTTP session class. Maintains open connections, stores headers and some "
"other request parameters."
msgstr ""
"Класс HTTP сессии. Поддерживает открытые соединения, хранит заданные "
"заголовки и некоторые другие параметры запросов."

#: of yadisk._async_session.AsyncSession:4 yadisk._session.Session:4
msgid "Must be explicitly closed (can be done using the `with` statement)."
msgstr ""
"Должен быть явным образом закрыт (может быть сделано с помощью "
"конструкции `with`)."

#: of yadisk._async_session.AsyncSession.close:1
#: yadisk._session.Session.close:1
msgid "Closes the session."
msgstr "Закрывает сессию."

#: of yadisk._async_session.AsyncResponse.close:4
#: yadisk._async_session.AsyncResponse.download:4
#: yadisk._async_session.AsyncResponse.json:4
#: yadisk._async_session.AsyncSession.close:4
#: yadisk._async_session.AsyncSession.send_request:8
#: yadisk._session.Response.close:4 yadisk._session.Response.download:4
#: yadisk._session.Response.json:4 yadisk._session.Session.close:4
#: yadisk._session.Session.send_request:8
msgid "This is an abstract method that needs to be implemented."
msgstr "Это абстрактный метод, который необходимо реализовать."

#: of yadisk._async_session.AsyncSession.send_request:1
#: yadisk._session.Session.send_request:1
msgid ""
"Sends an HTTP request with given parameters. In case an error occurs, the"
" method should throw one of exceptions derived from :any:`YaDiskError`. "
"Additional keyword arguments may be passed, they may be forwarded to the "
"underlying HTTP client without modification."
msgstr ""
"Отправляет HTTP запрос с указанными параметрами. В случае ошибки, метод "
"должен вызвать одно из исключений, основанных на :any:`YaDiskError`. "
"Могут быть указаны дополнительные keyword-аргументы, они могут быть "
"напрямую переданы в нижележащий HTTP клиент без изменений."

#: of yadisk._async_session.AsyncSession.send_request:11
#: yadisk._session.Session.send_request:11
msgid "`str`, URL"
msgstr "`str`, URL"

#: of yadisk._async_session.AsyncSession.send_request:12
#: yadisk._session.Session.send_request:12
msgid "`dict`, GET parameters"
msgstr "`dict`, GET параметры"

#: of yadisk._session.Session.send_request:13
msgid ""
"`bytes`, an iterator or a file-like object, data to be sent in the "
"request body"
msgstr ""
"`bytes`, итератор или файл-подобный объект, данные, которые будут "
"отправлены в теле запроса"

#: of yadisk._async_session.AsyncSession.send_request:15
#: yadisk._session.Session.send_request:14
msgid "`dict`, additional headers to be set"
msgstr "`dict`, дополнительные заголовки"

#: of yadisk._async_session.AsyncSession.send_request:16
#: yadisk._session.Session.send_request:15
msgid ""
"request timeout, a `tuple` of `(read timeout, connect timeout)`, `float` "
"or `None` (no timeout)"
msgstr ""
"таймаут запроса, `tuple` вида `(read timeout, connect timeout)`, `float` "
"или `None` (без таймаута)"

#: of yadisk._async_session.AsyncSession.send_request:18
#: yadisk._session.Session.send_request:17
msgid "`bool`, if `False`, the response content will be immediately downloaded"
msgstr "`bool`, если `False`, содержимое ответа будет сразу целиком скачано"

#: of yadisk._async_session.AsyncSession.send_request:20
#: yadisk._session.Session.send_request:19
msgid ":any:`Response`, response object"
msgstr ":any:`Response`, объект ответа"

#: of yadisk._async_session.AsyncResponse:1 yadisk._session.Response:1
msgid "Represents an HTTP response."
msgstr "Представляет собой ответ HTTP."

#: of yadisk._async_session.AsyncResponse:3 yadisk._session.Response:3
msgid ""
"In case an error occurs, methods of this class should throw one of "
"exceptions derived from :any:`YaDiskError`."
msgstr ""
"В случае, если возникает ошибка, методы данного классы должны вызвать "
"одно из исключений, основанных на :any:`YaDiskError`."

#: of yadisk._async_session.AsyncResponse:6 yadisk._session.Response:6
msgid "`int`, HTTP status code"
msgstr "`int`, HTTP код статуса"

#: of yadisk._session.Response.close:1
msgid "Closes the response and releases the underlying connection into the pool"
msgstr "Закрывает ответ и освобождает лежащее в основе соединение в пул"

#: of yadisk._async_session.AsyncResponse.download:1
#: yadisk._session.Response.download:1
msgid "Downloads response's content."
msgstr "Скачивает содержимое ответа."

#: of yadisk._session.Response.download:6
msgid ""
"function, takes one parameter - chunk of data (bytes), consumes the chunk"
" (e.g. by writing to a file)"
msgstr ""
"функция, принимает 1 параметр - фрагмент данных (bytes), потребляет этот "
"фрагмент (например, записывает его в файл)"

#: of yadisk._async_session.AsyncResponse.download:10
#: yadisk._async_session.AsyncResponse.json:6
#: yadisk._session.Response.download:9 yadisk._session.Response.json:6
msgid "could not receive the response's body"
msgstr "не удалось получить тело ответа"

#: of yadisk._async_session.AsyncResponse.get_exception:1
#: yadisk._session.Response.get_exception:1
msgid "Convenience wrapper for :any:`yadisk.utils.get_exception`."
msgstr "Обёртка над :any:`yadisk.utils.get_exception` для удобства."

#: of yadisk._async_session.AsyncResponse.get_exception:3
#: yadisk._session.Response.get_exception:3
msgid ":any:`YaDiskError`"
msgstr ":any:`YaDiskError`"

#: of yadisk._async_session.AsyncResponse.json:1
#: yadisk._session.Response.json:1
msgid "Returns JSON-content of the response (parses JSON)."
msgstr "Возвращает JSON, содержащийся в ответе (парсит JSON)."

#: of yadisk._async_session.AsyncResponse.json:7
#: yadisk._session.Response.json:7
msgid "could not parse JSON"
msgstr "не удалось обработать JSON"

#: of yadisk._async_session.AsyncResponse.json:9
#: yadisk._session.Response.json:9
msgid "`dict`, `list`, `str`, `int`, `float` or `None`"
msgstr "`dict`, `list`, `str`, `int`, `float` или `None`"

#: ../../api_reference/session_interface.rst:22
msgid "Asynchronous"
msgstr "Асинхронный"

#: of yadisk._async_session.AsyncSession.send_request:13
msgid ""
"`bytes`, iterator (possibly async) or a file-like object (possible "
"async), data to be sent in the request body"
msgstr ""
"`bytes`, итератор (возможно асинхронный) или файл-подобный объект "
"(возможно асинхронный), данные, которые будут отправлены в теле запроса"

#: of yadisk._async_session.AsyncResponse.close:1
msgid "Closes the response and releases the underlying connection into the pool."
msgstr "Закрывает запрос и освобождает лежащее в основе соединение в пул."

#: of yadisk._async_session.AsyncResponse.download:6
msgid ""
"regular or async function, takes one parameter - chunk of data (bytes), "
"consumes the chunk (e.g. by writing to a file)"
msgstr ""
"обычная или асинхронная функция, принимает 1 параметр - фрагмент данных "
"(bytes), потребляет этот фрагмент данных (например, записывает его в "
"файл)"

#: ../../api_reference/sessions.rst:2
msgid "Available Session Implementations"
msgstr "Доступные реализации сессий"

#: ../../api_reference/sessions.rst:4
msgid ""
"You can choose which HTTP library will be used by :any:`Client` and "
":any:`AsyncClient` by specifying the :code:`session` parameter. Below you"
" can see the list of session implementations that are shipped with the "
":code:`yadisk` library."
msgstr ""
"Вы можете выбрать, какая HTTP библиотека будет использоваться в "
":any:`Client` и :any:`AsyncClient`, указав параметр :code:`session`. Ниже"
" вы можете найти список реализаций сессий, поставляемых вместе с "
"библиотекой."

#: ../../api_reference/sessions.rst:8
msgid ""
"Alternatively, you can make your own :any:`Session`/:any:`AsyncSession` "
"implementation. For a concrete example, take a look at the source code of"
" any existing implementations (e.g. :any:`HTTPXSession`)."
msgstr ""
"Вы также можете сделать собственную реализацию "
":any:`Session`/:any:`AsyncSession`. Для конкретного примера, см. исходный"
" код любой из существующих реализаций (например, :any:`HTTPXSession`)."

#: ../../api_reference/sessions.rst:12
msgid "Synchronous Implementations"
msgstr "Синхронные реализации"

#: of yadisk.sessions.httpx_session.HTTPXSession:1
#: yadisk.sessions.pycurl_session.PycURLSession:1
#: yadisk.sessions.requests_session.RequestsSession:1
msgid "Bases: :py:class:`~yadisk._session.Session`"
msgstr "Базовые классы: :py:class:`~yadisk._session.Session`"

#: of yadisk.sessions.requests_session.RequestsSession:3
msgid ":any:`Session` implementation using the `requests`_ library."
msgstr "Реализация :any:`Session` с помощью библиотеки `requests`_."

#: of yadisk.sessions.requests_session.RequestsSession:5
msgid ""
"All arguments passed in the constructor are directly forwared to "
":any:`requests.Session`."
msgstr ""
"Все аргументы, переданные конструкторе напрямую передаются в "
":any:`requests.Session`."

#: of yadisk.sessions.requests_session.RequestsSession:7
msgid "underlying instance of :any:`requests.Session`"
msgstr "лежащий в основе объект :any:`requests.Session`"

#: of yadisk.sessions.requests_session.RequestsSession:10
msgid ""
"Internally, this class creates thread-local instances of "
":any:`requests.Session`, since it is not currently guaranteed to be "
"thread safe. Calling :any:`Session.close()` will close all thread-local "
"sessions managed by this object."
msgstr ""
"Внутри данный класс создаёт локальные для потоков экземпляры "
":any:`requests.Session`, т.к. на данный момент нет гарантии их "
"потокобезопасности. Вызов :any:`Session.close()` закрывает все сессии, "
"управляемые данным объектом."

#: of yadisk.sessions.requests_session.RequestsSession:16
msgid ""
"To pass `requests`-specific arguments from :any:`Client` use "
":code:`requests_args` keyword argument."
msgstr ""
"Для того чтобы передать специфичные для `requests` аргументы из "
":any:`Client` используйте keyword-аргумент :code:`requests_args`."

#: of yadisk.sessions.aiohttp_session.AIOHTTPSession:11
#: yadisk.sessions.async_httpx_session.AsyncHTTPXSession:13
#: yadisk.sessions.httpx_session.HTTPXSession:13
#: yadisk.sessions.pycurl_session.PycURLSession:7
#: yadisk.sessions.requests_session.RequestsSession:18
msgid "Usage example:"
msgstr "Пример использования:"

#: of yadisk.sessions.httpx_session.HTTPXSession:3
msgid ":any:`Session` implementation using the `httpx`_ library."
msgstr "Реализация :any:`Session` с помощью библиотеки `httpx`_."

#: of yadisk.sessions.httpx_session.HTTPXSession:7
msgid ""
"All arguments passed in the constructor are directly forwared to "
"`httpx.Client`_."
msgstr ""
"Все аргументы, переданные конструкторе напрямую передаются в "
"`httpx.Client`_."

#: of yadisk.sessions.httpx_session.HTTPXSession:9
msgid "underlying instance of `httpx.Client`_"
msgstr "лежащий в основе объект `httpx.Client`_"

#: of yadisk.sessions.httpx_session.HTTPXSession:11
msgid ""
"To pass `httpx`-specific arguments from :any:`Client` use "
":code:`httpx_args` keyword argument."
msgstr ""
"Для того чтобы передать специфичные для `httpx` аргументы из "
":any:`Client` используйте keyword-аргумент :code:`httpx_args`."

#: of yadisk.sessions.pycurl_session.PycURLSession:3
msgid ":any:`Session` implementation using the `pycurl`_ library."
msgstr "Реализация :any:`Session` с помощью библиотеки `pycurl`_."

#: of yadisk.sessions.pycurl_session.PycURLSession:5
msgid ""
"To pass `pycurl`-specific arguments from :any:`Client` use "
":code:`curl_options` keyword argument."
msgstr ""
"Для того чтобы передать специфичные для `pycurl` аргументы из "
":any:`Client` используйте keyword-аргумент :code:`curl_options`."

#: ../../api_reference/sessions.rst:24
msgid "Asynchronous Implementations"
msgstr "Асинхронные реализации"

#: of yadisk.sessions.aiohttp_session.AIOHTTPSession:1
#: yadisk.sessions.async_httpx_session.AsyncHTTPXSession:1
msgid "Bases: :py:class:`~yadisk._async_session.AsyncSession`"
msgstr "Базовые классы: :py:class:`~yadisk._async_session.AsyncSession`"

#: of yadisk.sessions.aiohttp_session.AIOHTTPSession:3
msgid ":any:`AsyncSession` implementation using the `aiohttp`_ library."
msgstr "Реализация :any:`AsyncSession` с помощью библиотеки `aiohttp`_."

#: of yadisk.sessions.aiohttp_session.AIOHTTPSession:5
msgid ""
"All arguments passed in the constructor are directly forwared to "
":any:`aiohttp.ClientSession`."
msgstr ""
"Все аргументы, переданные конструкторе напрямую передаются в "
":any:`aiohttp.ClientSession`."

#: of yadisk.sessions.aiohttp_session.AIOHTTPSession:7
msgid "underlying instance of :any:`aiohttp.ClientSession`"
msgstr "лежащий в основе объект :any:`aiohttp.ClientSession`"

#: of yadisk.sessions.aiohttp_session.AIOHTTPSession:9
msgid ""
"To pass `aiohttp`-specific arguments from :any:`AsyncClient` use "
":code:`aiohttp_args` keyword argument."
msgstr ""
"Для того чтобы передать специфичные для `aiohttp` аргументы из "
":any:`Client` используйте keyword-аргумент :code:`aiohttp_args`."

#: of yadisk.sessions.async_httpx_session.AsyncHTTPXSession:3
msgid ":any:`AsyncSession` implementation using the `httpx`_ library."
msgstr "Реализация :any:`AsyncSession` с помощью библиотеки `httpx`_."

#: of yadisk.sessions.async_httpx_session.AsyncHTTPXSession:7
msgid ""
"All arguments passed in the constructor are directly forwared to "
"`httpx.AsyncClient`_."
msgstr ""
"Все аргументы, переданные конструкторе напрямую передаются в "
"`httpx.AsyncClient`_."

#: of yadisk.sessions.async_httpx_session.AsyncHTTPXSession:9
msgid "underlying instance of `httpx.AsyncClient`_"
msgstr "лежащий в основе объект `httpx.AsyncClient`_"

#: of yadisk.sessions.async_httpx_session.AsyncHTTPXSession:11
msgid ""
"To pass `httpx`-specific arguments from :any:`AsyncClient` use "
":code:`httpx_args` keyword argument."
msgstr ""
"Для того чтобы передать специфичные для `httpx` аргументы из "
":any:`AsyncClient` используйте keyword-аргумент :code:`httpx_args`."

#: ../../api_reference/sessions.rst:33
msgid "Importing Session Classes"
msgstr "Импортирование классов сессий"

#: ../../api_reference/sessions.rst:35
msgid "You can use the following functions to import a session class by name:"
msgstr ""
"Вы можете использовать следующие функции, чтобы импортировать класс "
"сессии по именsи:"

#: of yadisk._import_session.import_session:1
msgid "Imports relevant session class based on provided name."
msgstr "Импортирует релевантный класс сессии на основе указанного имени."

#: of yadisk._import_session.import_async_session:5
#: yadisk._import_session.import_session:3
msgid "The following sessions are available:"
msgstr "Доступны следующие сессии:"

#: of yadisk._client.Client:31 yadisk._import_session.import_session:5
msgid ":code:`\"httpx\"` - :any:`HTTPXSession`"
msgstr ":code:`\"httpx\"` - :any:`HTTPXSession`"

#: of yadisk._client.Client:32 yadisk._import_session.import_session:6
msgid ":code:`\"pycurl\"` - :any:`PycURLSession`"
msgstr ":code:`\"pycurl\"` - :any:`PycURLSession`"

#: of yadisk._client.Client:33 yadisk._import_session.import_session:7
msgid ":code:`\"requests\"` - :any:`RequestsSession`"
msgstr ":code:`\"requests\"` - :any:`RequestsSession`"

#: of yadisk._import_session.import_async_session:3
#: yadisk._import_session.import_session:9
msgid "`str`, session name"
msgstr "`str`, имя сессии"

#: of yadisk._import_session.import_async_session:10
#: yadisk._import_session.import_session:11
msgid "could not import module"
msgstr "не удалось импортировать модуль"

#: of yadisk._import_session.import_async_session:11
#: yadisk._import_session.import_session:12
msgid "unknown name"
msgstr "неизвестное имя"

#: of yadisk._import_session.import_session:14
msgid "subclass of :any:`Session`"
msgstr "класс, наследующийся от :any:`Session`"

#: of yadisk._import_session.import_async_session:1
msgid "Imports relevant asynchronous session class based on provided name."
msgstr ""
"Импортирует релевантный класс асинхронной сессии на основе указанного "
"имени."

#: of yadisk._import_session.import_async_session:13
msgid "subclass of :any:`AsyncSession`"
msgstr "класс, наследующийся от :any:`AsyncSession`"

#: ../../api_reference/settings.rst:2
msgid "Settings"
msgstr "Настройки"

#: ../../api_reference/settings.rst:4
msgid ""
"The following settings can be accessed and changed at runtime in "
"`yadisk.settings` module:"
msgstr ""
"Следующие настройки в модуле `yadisk.settings` могут быть получены и "
"изменены:"

#: ../../docstring of yadisk.settings.BASE_API_URL:1
msgid ""
"Base URL for Yandex.Disk's REST API. Can be overriden for testing and "
"other purposes"
msgstr ""
"Базовый URL для REST API Яндекс.Диска. Может быть переопределён для "
"тестирования и прочих целей"

#: ../../docstring of yadisk.settings.BASE_OAUTH_API_URL:1
msgid ""
"Base URL for Yandex.Disk's OAuth API. Can be overriden for testing and "
"other purposes"
msgstr ""
"Базовый URL для OAuth API Яндекс.Диска. Может быть переопределён для "
"тестирования и прочих целей"

#: ../../docstring of yadisk.settings.DEFAULT_N_RETRIES:1
msgid "`int`, default number of retries"
msgstr "`int`, число повторных попыток запроса по умолчанию"

#: ../../docstring of yadisk.settings.DEFAULT_RETRY_INTERVAL:1
msgid "`float`, default retry interval"
msgstr "`float`, стандартная задержка между повторными попытками"

#: ../../docstring of yadisk.settings.DEFAULT_TIMEOUT:1
msgid ""
"`tuple` of 2 numbers (`int` or `float`), default timeout for requests. "
"First number is the connect timeout, the second one is the read timeout."
msgstr ""
"`tuple` из 2-х чисел (`int` или `float`), стандартный таймаут для "
"запросов. Первое число - это таймаут соединения, второе - таймаут чтения."

#: ../../docstring of yadisk.settings.DEFAULT_UPLOAD_RETRY_INTERVAL:1
msgid ""
"Analogous to :any:`settings.DEFAULT_RETRY_INTERVAL` but for "
":any:`Client.upload()`/:any:`AsyncClient.upload()` function"
msgstr ""
"Аналогично :any:`settings.DEFAULT_RETRY_INTERVAL`, но для функции "
":any:`Client.upload()`/:any:`AsyncClient.upload()`"

#: ../../docstring of yadisk.settings.DEFAULT_UPLOAD_TIMEOUT:1
msgid ""
"Analogous to :any:`settings.DEFAULT_TIMEOUT` but for "
":any:`Client.upload()`/:any:`AsyncClient.upload()` function"
msgstr ""
"Аналогично :any:`settings.DEFAULT_TIMEOUT`, но для функции "
":any:`Client.upload()`/:any:`AsyncClient.upload()`"

#: ../../docstring of yadisk.settings.logger:1
msgid ""
"Logger for the library. Logs include information about requests to the "
"API and automatic retry attempts."
msgstr ""
"Логгер библиотеки. Логи включают в себя информацию о запросах к API и "
"автоматических повторных попытках."

#: ../../api_reference/sync_api.rst:2
msgid "Synchronous API"
msgstr "Синхронный API"

#: of yadisk._client.Client:1
msgid "Implements access to Yandex.Disk REST API (provides synchronous API)."
msgstr "Реализует доступ к REST API Яндекс.Диска (предоставляет синхронный API)."

#: of yadisk._client.Client:3
msgid ""
"HTTP client implementation can be specified using the :code:`session` "
"parameter. :any:`RequestsSession` is used by default. For other options, "
"see :doc:`/api_reference/sessions`."
msgstr ""
"Реализация HTTP-клиента может быть указана с помощью параметра `session`."
" По умолчанию используется :any:`RequestsSession`. см. "
":doc:`/api_reference/sessions` для других списка других доступных "
"вариантов."

#: of yadisk._client.Client:7
msgid ""
"Almost all methods of :any:`Client` (the ones that accept `**kwargs`) "
"accept some additional arguments:"
msgstr ""
"Почти все методы :any:`Client` (те, которые принимают `**kwargs`) "
"принимают некоторые дополнительные параметры:"

#: of yadisk._client.Client:17
msgid ""
"Additional parameters, specific to a given HTTP client library can also "
"be passed, see documentation for specific :any:`Session` subclasses "
"(:doc:`/api_reference/sessions`)."
msgstr ""
"Дополнительные параметры, относящиеся к конкретной HTTP библиотеке могут "
"также быть переданы, см. документацию для конкретных подклассов "
":any:`Session` (:doc:`/api_reference/sessions`)."

#: of yadisk._client.Client:26
msgid ""
"`None`, `str` or an instance of :any:`Session`. If :code:`session` is a "
"string, the appropriate session class will be imported, it must be one of"
" the following values:    * :code:`\"httpx\"` - :any:`HTTPXSession`   * "
":code:`\"pycurl\"` - :any:`PycURLSession`   * :code:`\"requests\"` - "
":any:`RequestsSession`"
msgstr ""
"`None`, `str` или объект :any:`Session`. Если :code:`session` - строка, "
"то нужный класс будет автоматически импортирован, допустимые значения:"
"    * :code:`\"httpx\"` - :any:`HTTPXSession`   * :code:`\"pycurl\"` - "
":any:`PycURLSession`   * :code:`\"requests\"` - :any:`RequestsSession`"

#: of yadisk._client.Client:26
msgid ""
"`None`, `str` or an instance of :any:`Session`. If :code:`session` is a "
"string, the appropriate session class will be imported, it must be one of"
" the following values:"
msgstr ""
"`None`, `str` или объект :any:`Session`. Если :code:`session` - строка, "
"то нужный класс будет автоматически импортирован, допустимые значения:"

#: of yadisk._client.Client:35
msgid ""
"`None` or a function that opens a file for reading or writing "
"(:code:`open()` by default)"
msgstr ""
"`None` или функция, которая открывает файл для чтения или записи "
"(:code:`open()` по умолчанию)"

#: of yadisk._client.Client:37
msgid ""
"kept for compatibility, callable that returns an instance of "
":any:`Session`"
msgstr "оставлен для совместимости, функция, возвращающая объект :any:`Session`"

#: of yadisk._client.Client:45
msgid "current session (:any:`Session` instance)"
msgstr "текущая сессия (объект :any:`Session`)"

#: of yadisk._client.Client:46
msgid ""
"function that opens a file for reading or writing (:code:`open()` by "
"default)"
msgstr ""
"функция, которая открывает файл для чтения или записи (:code:`open()` по "
"умолчанию)"

#: of yadisk._client.Client.close:4
msgid "This method can also be called implicitly by using the `with` statement."
msgstr "Этот метод может также быть вызван неявно с помощью конструкции `with`."

#: of yadisk._client.Client.download:19
msgid ":any:`SyncResourceLinkObject`, link to the source resource"
msgstr ":any:`SyncResourceLinkObject`, ссылка на исходный ресурс"

#: of yadisk._client.Client.download_public:3
#: yadisk._client.Client.get_public_download_link:3
#: yadisk._client.Client.get_public_meta:3
#: yadisk._client.Client.get_public_type:3
#: yadisk._client.Client.is_public_dir:3 yadisk._client.Client.is_public_file:3
#: yadisk._client.Client.public_exists:3 yadisk._client.Client.public_listdir:3
#: yadisk._client.Client.save_to_disk:5
msgid "public key or public URL of the public resource"
msgstr "публичный ключ или URL к публичному ресурсу"

#: of yadisk._client.Client.download_public:20
msgid ":any:`SyncPublicResourceLinkObject`"
msgstr ":any:`SyncPublicResourceLinkObject`"

#: of yadisk._client.Client.get_all_public_resources:22
#: yadisk._client.Client.public_listdir:27
msgid "generator of :any:`SyncPublicResourceObject`"
msgstr "генератор :any:`SyncPublicResourceObject`"

#: of yadisk._client.Client.get_device_code:1
msgid ""
"This request is used for authorization using the Yandex OAuth page. In "
"this case the user must enter the verification code (:code:`user_code`) "
"in the browser on the Yandex OAuth page. After the user has entered the "
"code on the OAuth page, the application can exchange the "
":code:`device_code` for the token using the "
":any:`Client.get_token_from_device_code()`."
msgstr ""
"Данный запрос используется для авторизации с помощью страницы Яндекс "
"OAuth. В данном случае пользователь должен ввести код подтверждения "
"(:code:`user_code`) в браузере на странице Яндекс OAuth. После того как "
"пользователь ввёл код, приложение может обменять :code:`device_code` на "
"токен с помощью метода :any:`Client.get_token_from_device_code()`."

#: of yadisk._client.Client.get_device_code:21
msgid "invalid client ID"
msgstr "неправильный идентификатор приложения"

#: of yadisk._client.Client.get_files:23
#: yadisk._client.Client.get_last_uploaded:20 yadisk._client.Client.listdir:24
msgid "generator of :any:`ResourceObject`"
msgstr "генератор :any:`ResourceObject`"

#: of yadisk._client.Client.get_meta:23
msgid ":any:`SyncResourceObject`"
msgstr ":any:`SyncResourceObject`"

#: of yadisk._client.Client.get_public_meta:26
msgid ":any:`SyncPublicResourceObject`"
msgstr ":any:`SyncPublicResourceObject`"

#: of yadisk._client.Client.get_public_resources:21
msgid ":any:`SyncPublicResourcesListObject`"
msgstr ":any:`SyncPublicResourceObject`"

#: of yadisk._client.Client.get_token_from_device_code:1
msgid ""
"Get a new token from a device code, previously obtained with "
":any:`Client.get_device_code()`."
msgstr ""
"Получает новый токен с помощью кода устройства (device_code), полученного"
" с помощью :any:`Client.get_device_code()`"

#: of yadisk._client.Client.get_token_from_device_code:3
msgid "device code, obtained from :any:`Client.get_device_code()`"
msgstr ""
"код устройства (device_code), полученный с помощью "
":any:`Client.get_device_code()`"

#: of yadisk._client.Client.get_upload_link_object:1
msgid ""
"Get a link to upload the file using the PUT request. This is similar to "
":any:`Client.get_upload_link()`, except it returns an instance of "
":any:`ResourceUploadLinkObject` which also contains an asynchronous "
"operation ID."
msgstr ""
"Получает ссылку для загрузки файла на диск при помощи PUT запроса. Этот "
"метод аналогичен :any:`Client.get_upload_link()`, но возвращает объект "
":any:`ResourceUploadLinkObject`, который также содержит идентификатор "
"асинхронной операции."

#: of yadisk._client.Client.is_public_dir:1
msgid "Check whether the public resource is a public directory."
msgstr "Проверяет, является ли публичный ресурс публичной папкой."

#: of yadisk._client.Client.is_public_file:1
msgid "Check whether the public resource is a public file."
msgstr "Проверяет, является ли публичный ресурс публичным файлом."

#: of yadisk._client.Client.makedirs:21 yadisk._client.Client.mkdir:21
#: yadisk._client.Client.unpublish:19
msgid ":any:`SyncResourceLinkObject`"
msgstr ":any:`SyncResourceLinkObject`"

#: of yadisk._client.Client.patch:20
msgid ":any:`ResourceObject`"
msgstr ":any:`ResourceObject`"

#: of yadisk._client.Client.publish:19
msgid ":any:`SyncResourceLinkObject`, link to the resource"
msgstr ":any:`SyncResourceLinkObject`, ссылка на ресурс"

#: of yadisk._client.Client.restore_trash:4
msgid "path to the trash resource to be restored"
msgstr "путь к восстанавливаему ресурсу"

#: of yadisk._client.Client.revoke_token:3
msgid "token to revoke"
msgstr "токен, подлежащий отзыву"

#: of yadisk._client.Client.upload:3 yadisk._client.Client.upload_by_link:3
msgid ""
"path, file-like object to be uploaded or a function that returns an "
"iterator (or generator)"
msgstr ""
"путь, файл-подобный объект, который нужно загрузить, или функция, которая"
" возвращает итератор (или генератор)"

#: of yadisk._client.Client.upload:25
msgid ":any:`SyncResourceLinkObject`, link to the destination resource"
msgstr ":any:`SyncResourceLinkObject`, ссылка на загруженный ресурс"

#: of yadisk._client.Client.upload_url:33
msgid ":any:`SyncOperationLinkObject`, link to the asynchronous operation"
msgstr ":any:`SyncOperationLinkObject`, ссылка на асинхронную операцию"

#: ../../api_reference/types.rst:2
msgid "Types"
msgstr "Типы"

#: ../../docstring of typing.Union:1
msgid ":any:`Client` or :any:`AsyncClient`"
msgstr ":any:`Client` или :any:`AsyncClient`"

#: ../../docstring of typing.Union:1
msgid ":any:`Response` or :any:`AsyncResponse`"
msgstr ":any:`Response` или :any:`AsyncResponse`"

#: ../../docstring of typing.Union:1
msgid ""
"Callback function (may be asynchronous) that is invoked to consume the "
"streamed HTTP response body"
msgstr ""
"Функция обратного вызова (может быть асинхронной), которая вызывается для"
" \"потребления\" тела HTTP-запроса"

#: of yadisk.types.AsyncFileLike:1 yadisk.types.BinaryAsyncFileLike:1
msgid "Bases: :py:class:`~typing.Protocol`"
msgstr "Базовые классы: :py:class:`~typing.Protocol`"

#: of yadisk.types.AsyncFileLike:1
msgid ""
"This protocol describes the bare minimum set of required methods for an "
"async file-like object (open in either binary or unicode mode)."
msgstr ""
"Данный протокол описывает минимальный набор методов для асинхронного "
"файл-подобного объекта (открытого либо в бинарном или текстовом режиме)."

#: of yadisk.types.AsyncFileLike.read:1
msgid "Reads `size` bytes or characters."
msgstr "Считывает `size` байт или символов"

#: of yadisk.types.AsyncFileLike.read:3 yadisk.types.BinaryAsyncFileLike.read:3
msgid "`int`, number of bytes/characters to read from the file"
msgstr "`int`, число байт/символов, которые нужно считать"

#: of yadisk.types.AsyncFileLike.read:4 yadisk.types.BinaryAsyncFileLike.read:4
msgid "data that was read from the file"
msgstr "данные, которые были прочитаны из файла"

#: of yadisk.types.AsyncFileLike.seek:1 yadisk.types.BinaryAsyncFileLike.seek:1
msgid "Performs a seek operation on a file."
msgstr "Выполняет операцию seek над файлом"

#: of yadisk.types.AsyncFileLike.seek:3 yadisk.types.BinaryAsyncFileLike.seek:3
msgid "`int`, position to seek to"
msgstr "`int`, позиция"

#: of yadisk.types.AsyncFileLike.seek:4 yadisk.types.BinaryAsyncFileLike.seek:4
msgid ""
"`int`, 0 (seek absolute position), 1 (seek relative to current position) "
"or 2 (seek to file's end)"
msgstr ""
"`int`, 0 (абсолютное позиционирование), 1 (относительное "
"позиционирование) или 2 (позиционирование относительно конца файла)"

#: of yadisk.types.AsyncFileLike.seek:7 yadisk.types.BinaryAsyncFileLike.seek:7
msgid "`int`, absolute position within the file after the seek operation"
msgstr "`int`, абсолютная позиция внутри файла после операции seek"

#: of yadisk.types.AsyncFileLike.tell:1 yadisk.types.BinaryAsyncFileLike.tell:1
msgid "Returns current position within the file."
msgstr "Возвращает текущую позицию внутри файла"

#: of yadisk.types.AsyncFileLike.tell:3 yadisk.types.BinaryAsyncFileLike.tell:3
msgid "`int`, current position within the file"
msgstr "`int`, текущая позиция внутри файла"

#: of yadisk.types.AsyncFileLike.write:1
#: yadisk.types.BinaryAsyncFileLike.write:1
msgid "Writes data (contained in `buffer`)."
msgstr "Записывает данные (содержащейся в `buffer`)."

#: of yadisk.types.AsyncFileLike.write:3
#: yadisk.types.BinaryAsyncFileLike.write:3
msgid "data to be written"
msgstr "данные, которые нужно записать"

#: of yadisk.types.AsyncFileLike.write:4
msgid "the number of written bytes/characters"
msgstr "число записанных байт/символов"

#: ../../docstring of typing.Union:1
msgid "This is used to specify a source file to upload (async variant)"
msgstr ""
"Используется для указания исходного файла для загрузки на сервер "
"(асинхронный вариант)"

#: ../../docstring of typing.Union:1
msgid ""
"This is used to specify a destination file to download into (async "
"variant)"
msgstr ""
"Используется для указания файла назначения, в который будут скачаны "
"данные (асинхронный вариант)"

#: ../../docstring of typing.Union:1
msgid "Function that is used for opening local files (async variant)"
msgstr ""
"Функция, которая используется для открытия локальных файлов (асинхронный "
"вариант)"

#: ../../docstring of typing.Union:1
msgid "Request payload - data to be uploaded (async variant)"
msgstr ""
"Полезная нагрузка запроса - данные, которые будут загружены на сервер "
"(асинхронный вариант)"

#: ../../docstring collections.abc.Callable:1 of
msgid "Function that returns an instance of :any:`AsyncSession`"
msgstr "Функция, возвращающая объект :any:`AsyncSession`"

#: ../../docstring of typing.Union:1
msgid "Valid asynchronous session name (see :doc:`/api_reference/sessions`)"
msgstr "Имя асинхронной сессии (см. :doc:`/api_reference/sessions`)"

#: of yadisk.types.BinaryAsyncFileLike:1
msgid ""
"This protocol describes the bare minimum set of required methods for an "
"async file-like object open in binary mode."
msgstr ""
"Данный протокол описывает минимальный набор методов для асинхронного "
"файл-подобного объекта, открытого в бинарном режиме."

#: of yadisk.types.BinaryAsyncFileLike.read:1
msgid "Reads `size` bytes."
msgstr "Считывает `size` байт."

#: of yadisk.types.BinaryAsyncFileLike.write:4
msgid "the number of written bytes"
msgstr "число записанных байт"

#: ../../docstring collections.abc.Callable:1 of
msgid ""
"Callback function that is invoked to consume the streamed HTTP response "
"body"
msgstr ""
"Функция обратного вызова, которая вызывается для \"потребления\" тела "
"HTTP-запроса"

#: ../../docstring of typing.Union:1
msgid "File mode for :any:`OpenFileCallback` and :any:`AsyncOpenFileCallback`"
msgstr ""
"Режим открытия файла для :any:`OpenFileCallback` и "
":any:`AsyncOpenFileCallback`"

#: ../../docstring of typing.Union:1
msgid "This is used to specify a source file to upload"
msgstr "Используется для указания исходного файла для загрузки на сервер"

#: ../../docstring of typing.Union:1
msgid "This is used to specify a destination file to download into"
msgstr "Используется для указания файла назначения, в который будут скачаны данные"

#: ../../docstring of typing.Union:1
msgid "HTTP request method"
msgstr "Метод HTTP запроса"

#: ../../docstring collections.abc.Mapping:1 of
msgid "Type used for passing HTTP request headers"
msgstr "Тип используемый для задания заголовков HTTP запросов"

#: ../../docstring of typing.Union:1
msgid "JSON data (parsed)"
msgstr "Данные JSON (после парсинга)"

#: ../../docstring collections.abc.Callable:1 of
msgid "Function that is used for opening local files (like :any:`open`)"
msgstr ""
"Функция, которая используется для открытия локальных файлов (как "
":any:`open`)"

#: ../../docstring of typing.Union:1
msgid "Yandex.Disk's asynchronous operation status"
msgstr "Статус асинхронной операции Яндекс.Диска"

#: ../../docstring of typing.Union:1
msgid "Request payload - data to be uploaded"
msgstr "Полезная нагрузка запроса - данные, которые будут загружены на сервер"

#: ../../docstring collections.abc.Callable:1 of
msgid "Function that returns an instance of :any:`Session`"
msgstr "Функция, возвращающая объект :any:`Session`"

#: ../../docstring of typing.Union:1
msgid "Valid session name (see :doc:`/api_reference/sessions`)"
msgstr "Имя сессии (см. :doc:`/api_reference/sessions`)"

#: ../../docstring of typing.Union:1
msgid ""
"Request timeout (in seconds). Can be a single number, None or a tuple. If"
" the timeout is specified as a tuple, then the first value is the connect"
" timeout, and the second value is the read timeout. Otherwise, both "
"connect and read timeouts are set to the same value. A value of None "
"means no timeout. If the timeout's value is :code:`...`, the default "
"timeout is used (either :any:`settings.DEFAULT_TIMEOUT` or "
":any:`settings.DEFAULT_UPLOAD_TIMEOUT`)"
msgstr ""
"Таймаут запроса (в секундах). Может быть числом, None или кортежем. Если "
"таймаут задан как кортеж, то первое значение - таймаут соединения, а "
"второе - таймаут чтения. Иначе, заданное значение используется для обоих "
"таймаутов. Значение None означает отсутствие таймаута. Если в качестве "
"таймаута передано значение :code:`...`, то используется таймаут по "
"умолчанию (:any:`settings.DEFAULT_TIMEOUT` или "
":any:`settings.DEFAULT_UPLOAD_TIMEOUT`)"

#: ../../api_reference/utilities.rst:2
msgid "Utilities"
msgstr "Вспомогательные средства"

#: of yadisk.utils.CaseInsensitiveDict:1
msgid "A case-insensitive dictionary. All keys are converted to lowercase."
msgstr ""
"Словарь, нечувствительный к регистру. Все ключи преобразуются в нижний "
"регистр."

#: of yadisk.utils.CaseInsensitiveDict.get:1
#: yadisk.utils.CaseInsensitiveDict.setdefault:3
msgid "Return the value for key if key is in the dictionary, else default."
msgstr "Return the value for key if key is in the dictionary, else default."

#: of yadisk.utils.CaseInsensitiveDict.pop:1
msgid ""
"If the key is not found, return the default if given; otherwise, raise a "
"KeyError."
msgstr ""
"If the key is not found, return the default if given; otherwise, raise a "
"KeyError."

#: of yadisk.utils.CaseInsensitiveDict.setdefault:1
msgid "Insert key with a value of default if key is not in the dictionary."
msgstr "Insert key with a value of default if key is not in the dictionary."

#: of yadisk.utils.CaseInsensitiveDict.update:1
msgid ""
"If E is present and has a .keys() method, then does:  for k in E.keys(): "
"D[k] = E[k] If E is present and lacks a .keys() method, then does:  for "
"k, v in E: D[k] = v In either case, this is followed by: for k in F:  "
"D[k] = F[k]"
msgstr ""
"If E is present and has a .keys() method, then does:  for k in E.keys(): "
"D[k] = E[k] If E is present and lacks a .keys() method, then does:  for "
"k, v in E: D[k] = v In either case, this is followed by: for k in F:  "
"D[k] = F[k]"

#: of yadisk.utils.async_auto_retry:1 yadisk.utils.auto_retry:1
msgid ""
"Attempt to perform a request with automatic retries. A retry is triggered"
" by :any:`RequestError` or :any:`RetriableYaDiskError`, unless the raised"
" exception has :code:`disable_retry` set to :code:`True`."
msgstr ""
"Выполняет запрос с автоматическими повторными попытками. Повторная "
"попытка может быть вызвана :any:`RequestError` или "
":any:`RetriableYaDiskError`, если у исключения не задан атрибут "
":code:`disable_retry=True`."

#: of yadisk.utils.async_auto_retry:5 yadisk.utils.auto_retry:5
msgid "function to run, must not require any arguments"
msgstr "Функция, подлежащая исполнению, не должна требовать аргументов"

#: of yadisk.utils.async_auto_retry:7 yadisk.utils.auto_retry:7
msgid "`int` or `float`, delay between retries (in seconds)"
msgstr "`int` или `float`, задержка между повторными попытками в секундах"

#: of yadisk.utils.async_auto_retry:8 yadisk.utils.auto_retry:8
msgid "`tuple` or `None`, additional arguments for `func`"
msgstr "`tuple` или `None`, дополнительные аргументы для `func`"

#: of yadisk.utils.async_auto_retry:9 yadisk.utils.auto_retry:9
msgid "`dict` or `None`, additional keyword arguments for `func`"
msgstr "`dict` или `None`, дополнительные keyword-аргументы для `func`"

#: of yadisk.utils.async_auto_retry:12 yadisk.utils.auto_retry:12
msgid "return value of func()"
msgstr "Значение, возвращаемое func()"

#: of yadisk.utils.get_exception:1
msgid ""
"Get an exception instance based on response, assuming the request has "
"failed."
msgstr ""
"Возвращает объект исключения, основываясь на ответе (подразумевается, что"
" запрос не удался)."

#: of yadisk.utils.get_exception:4
msgid "an instance of :any:`ErrorObject` or `None`"
msgstr "экземпляр :any:`ErrorObject` или `None`"

#: of yadisk.utils.get_exception:6
msgid "an exception instance, subclass of :any:`YaDiskError`"
msgstr "Объект исключения, подкласс :any:`YaDiskError`"

#~ msgid ":any:`ResourceLinkObject`, link to the source resource"
#~ msgstr ":any:`ResourceLinkObject`, ссылка на исходный ресурс"

#~ msgid "generator of :any:`PublicResourceObject`"
#~ msgstr "генератор :any:`PublicResourceObject`"

#~ msgid ":any:`ResourceLinkObject`, link to the resource"
#~ msgstr ":any:`ResourceLinkObject`, ссылка на ресурс"

#~ msgid ""
#~ ":any:`OperationLinkObject` if the operation is"
#~ " performed asynchronously, `None` otherwise"
#~ msgstr ""
#~ ":any:`OperationLinkObject`, если операция "
#~ "выполняется асинхронно, иначе `None`"

#~ msgid ":any:`ResourceLinkObject`, link to the destination resource"
#~ msgstr ":any:`ResourceLinkObject`, ссылка на загруженный ресурс"

#~ msgid ":any:`OperationLinkObject`, link to the asynchronous operation"
#~ msgstr ":any:`OperationLinkObject`, ссылка на асинхронную операцию"

#~ msgid "generator of :any:`TrashResourceObject`"
#~ msgstr "генератор :any:`TrashResourceObject`"

#~ msgid ""
#~ "path, file-like object to be "
#~ "uploaded or a function that returns "
#~ "a an iterator (or generator)"
#~ msgstr ""

#~ msgid ""
#~ "path or file-like object to be "
#~ "uploaded or a function that returns "
#~ "a an iterator (or generator)"
#~ msgstr ""

#~ msgid ""
#~ "path or file-like object to be "
#~ "uploaded or a function that returns "
#~ "an iterator (or generator)"
#~ msgstr ""

#~ msgid "`None` or a function that returns a new instance of :any:`AsyncSession`"
#~ msgstr ""
#~ "`None` или функция, которая возвращает "
#~ "новый экземпляр :any:`AsyncSession`"

#~ msgid "function that returns a new instance of :any:`AsyncSession`"
#~ msgstr "функция, которая возвращает новый экземпляр :any:`AsyncSession`"

#~ msgid ""
#~ "current session (:any:`AsyncSession` instance), "
#~ "created using the `session_factory` with "
#~ "filled out authentication headers"
#~ msgstr ""
#~ "текущая сессия (экземпляр :any:`AsyncSession`), "
#~ "созданная с помощью `session_factory` с "
#~ "заполненными заголовками аутентификации"

#~ msgid "Get authentication URL for the user to go to."
#~ msgstr "Получает URL для аутентификации для пользователя."

#~ msgid ""
#~ "indicates whether to use lightweight "
#~ "layout, values other than \"popup\" are"
#~ " ignored"
#~ msgstr ""
#~ "указывает использовать облегчённую вёрстку, "
#~ "обрабатывает только \"popup\", остальные "
#~ "значения игнорируются"

#~ msgid ""
#~ "Get the URL for the user to "
#~ "get the confirmation code. The "
#~ "confirmation code can later be used "
#~ "to get the token."
#~ msgstr ""
#~ "Получает URL для получения пользователем "
#~ "кода подтверждения. Он может быть "
#~ "использован для получения токена."

#~ msgid "Prepares a new :any:`AsyncSession` object with headers needed for API."
#~ msgstr ""
#~ "Готовит новый объект :any:`AsyncSession` с "
#~ "заголовками, необходимыми для API."

#~ msgid "application token, equivalent to `self.token` if `None`"
#~ msgstr "токен, то же самое, что `self.token`, если `None`"

#~ msgid "`AsyncSession`"
#~ msgstr "`AsyncSession`"

#~ msgid "token cannot be revoked (not bound to this application, etc.)"
#~ msgstr ""
#~ "токен не может быть отозван (например,"
#~ " если не привязан к данному "
#~ "приложению)"

#~ msgid "Bases: :py:class:`~yadisk.objects.resources.LinkObject`"
#~ msgstr "Базовые классы: :py:class:`~yadisk.objects.resources.LinkObject`"

#~ msgid "`None` or a function that returns a new instance of :any:`Session`"
#~ msgstr "`None` или функция, которая возващает новый экземпляр :any:`Session`"

#~ msgid "function that returns a new instance of :any:`Session`"
#~ msgstr "функция, которая возващает новый экземпляр :any:`Session`"

#~ msgid ""
#~ "current session (:any:`Session` instance), "
#~ "created using the `session_factory` with "
#~ "filled out authentication headers"
#~ msgstr ""
#~ "текущая сессия (экземпляр :any:`Session`), "
#~ "созданная с помощью `session_factory` с "
#~ "заполненными заголовками аутентификации"

#~ msgid "Prepares :any:`Session` object with headers needed for API."
#~ msgstr "Готовит объект :any:`Session` с заголовками, необходимыми для API."

#~ msgid ":any:`Session`"
#~ msgstr ":any:`Session`"

#~ msgid "an instance of :any:`Response`"
#~ msgstr "объект :any:`Response`"

#~ msgid "Low-Level API"
#~ msgstr "Низкоуровневый API"

#~ msgid "API Request Objects"
#~ msgstr "Объекты запросов к API"

#~ msgid "Base class for all API requests."
#~ msgstr "Базовый класс для всех объектов запросов к REST API."

#~ msgid "an instance of :any:`Session`"
#~ msgstr "объект :any:`Session`"

#~ msgid "`dict` of arguments, that will be passed to `process_args`"
#~ msgstr "`dict`, аргументы, которые будут перданы в `process_args`"

#~ msgid "`str`, request URL"
#~ msgstr "`str`, URL запроса"

#~ msgid ""
#~ "`str`, Content-Type header (\"application/x"
#~ "-www-form-urlencoded\" by default)"
#~ msgstr ""
#~ "`str`, заголовок Content-Type (\"application/x"
#~ "-www-form-urlencoded\" по умолчанию)"

#~ msgid "`list`-like, list of response codes that indicate request's success"
#~ msgstr "`list`-подобный, список кодов ответов, означающих успех запроса"

#~ msgid "`float`, delay between retries in seconds"
#~ msgstr "`float`, задержка между повторными попытками в секундах"

#~ msgid "Process the response."
#~ msgstr "Обрабатывает ответ."

#~ msgid "extra arguments (optional)"
#~ msgstr "дополнительные аргументы (опциональные)"

#~ msgid "depends on `self.process_json()`"
#~ msgstr "зависит от `self.process_json()`"

#~ msgid "Actually send the request"
#~ msgstr "Отправляет запрос"

#~ msgid ":any:`AsyncResponse` (`self.response`)"
#~ msgstr ":any:`AsyncResponse` (`self.response`)"

#~ msgid "Process the JSON response."
#~ msgstr "Обрабатывает JSON ответ."

#~ msgid "`dict` or `None`, JSON response"
#~ msgstr "`dict` или `None`, JSON ответ"

#~ msgid "processed response, can be anything"
#~ msgstr "обработанный ответ, может быть что угодно"

#~ msgid ":any:`Response` (`self.response`)"
#~ msgstr ":any:`Response` (`self.response`)"

#~ msgid "Bases: :py:class:`~yadisk.api.api_request.APIRequest`"
#~ msgstr "Базовые классы: :py:class:`~yadisk.api.api_request.APIRequest`"

#~ msgid ""
#~ "This request is used for authorization"
#~ " using the Yandex OAuth page. In "
#~ "this case the user must enter the"
#~ " verification code (:code:`user_code`) in "
#~ "the browser on the Yandex OAuth "
#~ "page. After the user has entered "
#~ "the code on the OAuth page, the"
#~ " application can exchange the "
#~ ":code:`device_code` for the token."
#~ msgstr ""
#~ "Данный запрос используется для авторизации "
#~ "с помощью страницы Яндекс OAuth. В "
#~ "данном случае пользователь должен ввести "
#~ "код подтверждения (:code:`user_code`) в "
#~ "браузере на странице Яндекс OAuth. После"
#~ " того как пользователь ввёл код, "
#~ "приложение может обменять :code:`device_code` "
#~ "на токен."

#~ msgid ""
#~ "an instance of :any:`Session` or "
#~ ":any:`AsyncSession` with prepared headers"
#~ msgstr ""
#~ "объект :any:`Session` или :any:`AsyncSession` "
#~ "с подготовленными заголовками"

#~ msgid "A request to get the token."
#~ msgstr "Запрос для получения токена."

#~ msgid "A request to refresh an existing token."
#~ msgstr "Запрос для обновления существующего токена."

#~ msgid "the refresh token that was received with the original token"
#~ msgstr "refresh-токен, полученный вместе с токеном"

#~ msgid "A request to revoke the token."
#~ msgstr "Запрос для отзыва токена."

#~ msgid "the token to be revoked"
#~ msgstr "токен, подлежащий отзыву"

#~ msgid "A request to get disk information."
#~ msgstr "Запрос для получения информации о диске."

#~ msgid "A request to copy a file or a directory."
#~ msgstr "Запрос копирования файла или папки."

#~ msgid ":any:`ResourceLinkObject` or :any:`OperationLinkObject`"
#~ msgstr ":any:`ResourceLinkObject` или :any:`OperationLinkObject`"

#~ msgid "A request to delete a file or a directory."
#~ msgstr "Запрос для удаления ресурса."

#~ msgid ":any:`OperationLinkObject` or `None`"
#~ msgstr ":any:`OperationLinkObject` или `None`"

#~ msgid "A request to delete a trash resource."
#~ msgstr "Запрос для удаления ресурса корзины."

#~ msgid ""
#~ "A request to get a flat list "
#~ "of all files (that doesn't include "
#~ "directories)."
#~ msgstr "Запрос для получения плоского списка всех файлов."

#~ msgid ":any:`FilesResourceListObject`"
#~ msgstr ":any:`FilesResourceListObject`"

#~ msgid "A request to get a download link to a resource."
#~ msgstr "Запрос для получения ссылки на скачивание ресурса."

#~ msgid "path to the resource to be downloaded"
#~ msgstr "путь к скачиваемому ресурсу"

#~ msgid ":any:`ResourceDownloadLinkObject`"
#~ msgstr ":any:`ResourceDownloadLinkObject`"

#~ msgid "A request to get meta-information about a resource."
#~ msgstr "Запрос для получния мета-информации о ресурсе."

#~ msgid "A request to get a download link for a public resource."
#~ msgstr "Запрос для получения ссылки на скачивание публичного ресурса."

#~ msgid "A request to get meta-information about a public resource."
#~ msgstr "Запрос для получния мета-информации о публичном ресурсе."

#~ msgid ":any:`PublicResourceObject`"
#~ msgstr ":any:`PublicResourceObject`"

#~ msgid "A request to get a list of public resources."
#~ msgstr "Запрос для получения списка публичных ресурсов."

#~ msgid ":any:`PublicResourcesListObject`"
#~ msgstr ":any:`PublicResourcesListObject`"

#~ msgid "A request to get meta-information about a trash resource."
#~ msgstr "Запрос для получния мета-информации о ресурсе корзины."

#~ msgid ":any:`TrashResourceObject`"
#~ msgstr ":any:`TrashResourceObject`"

#~ msgid "A request to get an upload link."
#~ msgstr "Запрос для получения ссылки для загрузки ресурса."

#~ msgid ""
#~ "A request to get the list of "
#~ "latest uploaded files sorted by upload"
#~ " date."
#~ msgstr ""
#~ "Запрос для получения списка последних "
#~ "загруженных файлов, отсортированного по дате"
#~ " загрузки."

#~ msgid ":any:`LastUploadedResourceListObject`"
#~ msgstr ":any:`LastUploadedResourceListObject`"

#~ msgid "A request to create a new directory."
#~ msgstr "Запрос для создания новой папки."

#~ msgid ":any:`ResourceLinkObject`"
#~ msgstr ":any:`ResourceLinkObject`"

#~ msgid "A request to move a resource."
#~ msgstr "Запрос для перемещения ресурса."

#~ msgid ":any:`OperationLinkObject` or :any:`ResourceLinkObject`"
#~ msgstr ":any:`OperationLinkObject` или :any:`ResourceLinkObject`"

#~ msgid "A request to update custom properties of a resource."
#~ msgstr "Запрос для обновления пользовательских свойств ресурса."

#~ msgid "A request to make a resource public."
#~ msgstr "Запрос для того, чтобы сделать ресурс публичным."

#~ msgid "A request to restore trash."
#~ msgstr "Запрос для восстановления мусора."

#~ msgid "A request to save a public resource to the disk."
#~ msgstr "Запрос для сохранения публичного ресурса на диск."

#~ msgid "A request to make a public resource private."
#~ msgstr "Запрос для того, чтобы сделать публичный ресурс приватным."

#~ msgid "A request to upload a file from URL."
#~ msgstr "Запрос для загрузки файла по URL."

#~ msgid ":any:`OperationLinkObject`"
#~ msgstr ":any:`OperationLinkObject`"

#~ msgid "A request to get operation status."
#~ msgstr "Запрос для получения статуса операции."

#~ msgid "operation ID or link"
#~ msgstr "идентификатор операции или ссылка на нее"

#~ msgid ":any:`OperationStatusObject`"
#~ msgstr ":any:`OperationStatusObject`"

#~ msgid ""
#~ "Copy resource to `dst_path`. If the "
#~ "operation is performed asynchronously, returns"
#~ " the link to the operation, "
#~ "otherwise, returns the link to the "
#~ "newly created resource."
#~ msgstr ""
#~ "Копирует ресурс в `dst_path`. Если "
#~ "операция выполняется асинхронно, возвращает "
#~ "ссылку на операцию, иначе, возвращает "
#~ "ссылку на новый ресурс."

#~ msgid ":code:`copy(dst_path, /, **kwargs)`"
#~ msgstr ":code:`copy(dst_path, /, **kwargs)`"

#~ msgid ":code:`copy(relative_path, dst_path, /, **kwargs)`"
#~ msgstr ":code:`copy(relative_path, dst_path, /, **kwargs)`"

#~ msgid "`str` or `None`, source path relative to the resource"
#~ msgstr "`str` or `None`, исходный путь, относительно ресурса"

#~ msgid "Download the file. This method takes 1 or 2 positional arguments:"
#~ msgstr "Скачивает файл. Данный метод принимает 1 или 2 позиционных аргумента:"

#~ msgid ":code:`download(dst_path_or_file, /, **kwargs)`"
#~ msgstr ":code:`download(dst_path_or_file, /, **kwargs)`"

#~ msgid ":code:`download(relative_path, dst_path_or_file, /, **kwargs)`"
#~ msgstr ":code:`download(relative_path, dst_path_or_file, /, **kwargs)`"

#~ msgid ""
#~ "If `relative_path` is empty or None "
#~ "(or not specified) this method will "
#~ "try to use the `file` attribute as"
#~ " a download link."
#~ msgstr ""
#~ "Если `relative_path` пустой или None "
#~ "(или не указан), данный метод будет "
#~ "использовать поле `file` (если доступно) "
#~ "в качестве ссылки для скачивания."

#~ msgid "Check whether resource exists."
#~ msgstr "Проверяет, существует ли ресурс."

#~ msgid "`str` or `None`, relative path from the resource"
#~ msgstr "`str` или `None`, относительный путь от ресурса"

#~ msgid "`str` or `None`, path relative to the resource"
#~ msgstr "`str` или `None`, относительный путь от ресурса"

#~ msgid "`str` or `None`, relative path from resource"
#~ msgstr "`str` или `None`, относительный путь от ресурса"

#~ msgid "relative path to a resource in a public folder."
#~ msgstr "относительный путь к ресурсу внутри публичной папки."

#~ msgid "relative path from the resource"
#~ msgstr "относительный путь от ресурса"

#~ msgid "`str` or `None`, relative path to the resource"
#~ msgstr "`str` или `None`, относительный путь от ресурса"

#~ msgid "Check whether resource is a directory."
#~ msgstr "Проверяет, является ли ресурс папкой."

#~ msgid "Check whether resource is a file."
#~ msgstr "Проверяет, является ли ресурс файлом."

#~ msgid "Get contents of the resource."
#~ msgstr "Получает содержимое папки."

#~ msgid "relative path from resource"
#~ msgstr "относительный путь от ресурса"

#~ msgid "generator of :any:`AsyncResourceObject`"
#~ msgstr "генератор :any:`AsyncResourceObject`"

#~ msgid "`str` or `None`, relative path to the directory to be created"
#~ msgstr "`str` или `None`, относительный путь к папке, подлежащей созданию"

#~ msgid ""
#~ "Move resource to `dst_path`. This method"
#~ " takes 1 or 2 positional arguments:"
#~ msgstr ""
#~ "Перемещает ресурс в `dst_path`. Данный "
#~ "метод принимает 1 или 2 позиционных "
#~ "аргумента:"

#~ msgid ":code:`move(dst_path, /, **kwargs)`"
#~ msgstr ":code:`move(dst_path, /, **kwargs)`"

#~ msgid ":code:`move(relative_path, dst_path, /, **kwargs)`"
#~ msgstr ":code:`move(relative_path, dst_path, /, **kwargs)`"

#~ msgid "`str` or `None`, source path to be moved relative to the resource"
#~ msgstr ""
#~ "`str` или `None`, исходный путь, "
#~ "относительно ресурса, подлежащий перемещению"

#~ msgid ""
#~ "Update custom properties of a resource."
#~ " This method takes 1 or 2 "
#~ "positional arguments:"
#~ msgstr ""
#~ "Обновляет пользовательские свойства ресурса. "
#~ "Данный метод принимает 1  или 2 "
#~ "позиционных аргумента:"

#~ msgid ":code:`patch(properties, /, **kwargs)`"
#~ msgstr ":code:`patch(properties, /, **kwargs)`"

#~ msgid ":code:`patch(relative_path, properties, /, **kwargs)`"
#~ msgstr ":code:`patch(relative_path, properties, /, **kwargs)`"

#~ msgid "relative path to the resource in the public folder."
#~ msgstr "относительный путь к ресурсу внутри публичной папки"

#~ msgid "generator of :any:`AsyncPublicResourceObject`"
#~ msgstr "генератор :any:`AsyncPublicResourceObject`"

#~ msgid "`str` or `None`, relative path to the resource to be published"
#~ msgstr "`str` или `None`, относительный путь к публикуемому ресурсу"

#~ msgid "`str` or `None`, relative path to the resource to be removed"
#~ msgstr "`str` или `None`, относительный путь к удаляемому ресурсу"

#~ msgid "`str` or `None`, source path to be renamed relative to the resource"
#~ msgstr ""
#~ "`str` или `None`, исходный путь, "
#~ "относительно ресурса, подлежащий переименованию"

#~ msgid "`str` or `None`, relative path to the resource to be unpublished"
#~ msgstr ""
#~ "`str` или `None`, относительный путь к"
#~ " ресурсу, подлежащему депубликации"

#~ msgid "path or file-like object to be uploaded"
#~ msgstr "путь к файлу или файл-подобный объект для загрузки"

#~ msgid "`str` or `None`, destination path relative to the resource"
#~ msgstr "`str` или `None`, путь назначения относительно ресурса"

#~ msgid ":code:`copy(relative_src_path, dst_path, /, **kwargs)`"
#~ msgstr ":code:`copy(relative_src_path, dst_path, /, **kwargs)`"

#~ msgid "generator of :any:`SyncResourceObject`"
#~ msgstr "генератор :any:`SyncResourceObject`"

#~ msgid "`str`, type of the operation"
#~ msgstr "`str`, тип операции"

#~ msgid ":any:`LinkObject`, link to the operation"
#~ msgstr ":any:`LinkObject`, ссылка на операцию"

#~ msgid "`dict`, other information about the operation"
#~ msgstr "`dict`, другая информация об операции"

#~ msgid "Updates session's headers."
#~ msgstr "Обновляет заголовки сессии."

#~ msgid "dictionary of headers to be set"
#~ msgstr "словарь заголовков, которые будут заданы"

#~ msgid "Sets token for the session by setting the Authorization header."
#~ msgstr "Задаёт токен для сессии (заголовок Authorization)."

#~ msgid "`str`, API token"
#~ msgstr "`str`, токен API"

#~ msgid "**DEFAULT_N_RETRIES** - `int`, default number of retries"
#~ msgstr ""
#~ "**DEFAULT_N_RETRIES** - `int`, максимальное "
#~ "число повторных попыток запроса по "
#~ "умолчанию"

#~ msgid ""
#~ "**DEFAULT_UPLOAD_TIMEOUT** - analogous to "
#~ "`DEFAULT_TIMEOUT` but for `upload` function"
#~ msgstr ""
#~ "**DEFAULT_UPLOAD_TIMEOUT** - аналогично "
#~ "`DEFAULT_TIMEOUT`, но для функции `upload`"

#~ msgid ""
#~ "**DEFAULT_UPLOAD_RETRY_INTERVAL** - analogous to "
#~ "`DEFAULT_RETRY_INTERVAL` but for `upload` "
#~ "function"
#~ msgstr ""
#~ "**DEFAULT_UPLOAD_RETRY_INTERVAL** - аналогично "
#~ "`DEFAULT_RETRY_INTERVAL`, но для функции "
#~ "`upload`"

#~ msgid "`bool`, not clear waht this is for"
#~ msgstr ""

